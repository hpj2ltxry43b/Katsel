#pragma once

#include "codegen/codegen.h"

#include "ast/visitor.h"
#include "ast/ast.h"

#include "ir/value.h"
#include "ir/type.h"
#include "ir/instruction.h"

class CodeGen::TypeVisitor : public ASTNS::TypeBVisitor
{
public:
    TypeVisitor(CodeGen &cg);

    IR::Type* type(ASTNS::TypeB *ast);

private:
    // TYPEVISITOR METHODS START

// The following code was autogenerated - see the utils/ directory
void visitBuiltinType(ASTNS::BuiltinType *ast) override;
// This code was autogenerated - see the utils/ directory

    // TYPEVISITOR METHODS END

    IR::Type *ret;

    CodeGen &cg;
};

class CodeGen::ForwDecl : public ASTNS::DeclBVisitor, public ASTNS::CUBVisitor
{
public:
    ForwDecl(CodeGen &cg);

private:
    // FORWDECL METHODS START

// The following code was autogenerated - see the utils/ directory
void visitCU(ASTNS::CU *ast) override;
void visitDeclList(ASTNS::DeclList *ast) override;
void visitFunctionDecl(ASTNS::FunctionDecl *ast) override;
// This code was autogenerated - see the utils/ directory

    // FORWDECL METHODS END

    CodeGen &cg;
};

class CodeGen::FunctionCodeGen
{
    struct Local
    {
        size_t scopenum;
        IR::Register *v;
        std::string name;
    };

    std::vector<Local> locals;
    size_t curScope = 1;

    void addLocal(std::string const &name, IR::Register *val);
    Local* findLocal(std::string const &name);

    void incScope();
    void decScope();
};

class CodeGen::ParamVisitor : public ASTNS::PListBVisitor
{
public:
    struct Param
    {
        IR::Type *ty;
        std::string name;
        ASTNS::Param *ast;
    };

    ParamVisitor(CodeGen &cg);

    std::vector<Param> ret;

private:
    // PARAMVISITOR METHODS START

// The following code was autogenerated - see the utils/ directory
void visitParam(ASTNS::Param *ast) override;
void visitParamList(ASTNS::ParamList *ast) override;
void visitParamList_OPT(ASTNS::ParamList_OPT *ast) override;
void visitParamSegment(ASTNS::ParamSegment *ast) override;
// This code was autogenerated - see the utils/ directory

    // PARAMVISITOR METHODS END

    CodeGen &cg;
};

class CodeGen::Context
{
public:
    Context();

    std::map<std::string, IR::Value*> globalSymbolTable;

    IR::BuiltinType* getBuiltinType(IR::BuiltinType::Builtins ty);
    IR::FunctionType* getFunctionType(IR::Type *ret, std::vector<IR::Type*> paramtys);
    IR::VoidType* getVoidType();

    IR::Value* getGlobal(std::string const &name);

    std::vector<std::unique_ptr<IR::ConstInt>> constants;
    IR::ConstInt* getConstInt(IR::BuiltinType *ty, int val);
    IR::Void* getVoidValue();

private:
    std::vector<std::unique_ptr<IR::Type>> types;
    IR::Void voidValue;
};
