#include "ast/dotvisitor.h"

#include <iostream>
#include <sstream>

// DOTVISITOR START
// The following code was autogenerated - see the utils/ directory
void ASTNS::DotVisitor::visitAdditionExpr(ASTNS::AdditionExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::AdditionExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">AdditionExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::AdditionExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">AdditionExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitAnotherArg(ASTNS::AnotherArg *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::AnotherArg::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">AnotherArg (A)</td></tr><tr>";
            ostream << "<td port=\"arg\">arg</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->arg)
                    {
                        a->arg->accept(this);
                        connect(thisid, "arg", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "arg", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitAnotherDecl(ASTNS::AnotherDecl *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::AnotherDecl::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">AnotherDecl (A)</td></tr><tr>";
            ostream << "<td port=\"decl\">decl</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->decl)
                    {
                        a->decl->accept(this);
                        connect(thisid, "decl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decl", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitAnotherParam(ASTNS::AnotherParam *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::AnotherParam::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">AnotherParam (A)</td></tr><tr>";
            ostream << "<td port=\"param\">param</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->param)
                    {
                        a->param->accept(this);
                        connect(thisid, "param", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "param", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitAnotherStmt(ASTNS::AnotherStmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::AnotherStmt::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">AnotherStmt (A)</td></tr><tr>";
            ostream << "<td port=\"stmt\">stmt</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->stmt)
                    {
                        a->stmt->accept(this);
                        connect(thisid, "stmt", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmt", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitAnotherVarStmtItem(ASTNS::AnotherVarStmtItem *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::AnotherVarStmtItem::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">AnotherVarStmtItem (A)</td></tr><tr>";
            ostream << "<td port=\"varstmtitem\">varstmtitem</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->varstmtitem)
                    {
                        a->varstmtitem->accept(this);
                        connect(thisid, "varstmtitem", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "varstmtitem", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitArg(ASTNS::Arg *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Arg::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Arg (A)</td></tr><tr>";
            ostream << "<td port=\"expr\">expr</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitArgList(ASTNS::ArgList *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ArgList::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">ArgList (A)</td></tr><tr>";
            ostream << "<td port=\"argsegment\">argsegment</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->argsegment)
                    {
                        a->argsegment->accept(this);
                        connect(thisid, "argsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "argsegment", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::ArgList::Form::AT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">ArgList (AT)</td></tr><tr>";
            ostream << "<td port=\"argsegment\">argsegment</td>";
            ostream << "<td port=\"comma\">comma</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->argsegment)
                    {
                        a->argsegment->accept(this);
                        connect(thisid, "argsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "argsegment", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitArgList_OPT(ASTNS::ArgList_OPT *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ArgList_OPT::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">ArgList_OPT (A)</td></tr><tr>";
            ostream << "<td port=\"arglist\">arglist</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->arglist)
                    {
                        a->arglist->accept(this);
                        connect(thisid, "arglist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "arglist", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::ArgList_OPT::Form::EMPTY:
            ostream << thisid << " [label=\"ArgList_OPT (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitArgSegment(ASTNS::ArgSegment *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ArgSegment::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">ArgSegment (ATA)</td></tr><tr>";
            ostream << "<td port=\"argsegment\">argsegment</td>";
            ostream << "<td port=\"comma\">comma</td>";
            ostream << "<td port=\"anotherarg\">anotherarg</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->argsegment)
                    {
                        a->argsegment->accept(this);
                        connect(thisid, "argsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "argsegment", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    if (a->anotherarg)
                    {
                        a->anotherarg->accept(this);
                        connect(thisid, "anotherarg", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "anotherarg", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::ArgSegment::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">ArgSegment (A)</td></tr><tr>";
            ostream << "<td port=\"arg\">arg</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->arg)
                    {
                        a->arg->accept(this);
                        connect(thisid, "arg", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "arg", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitAssignmentExpr(ASTNS::AssignmentExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::AssignmentExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">AssignmentExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"target\">target</td>";
            ostream << "<td port=\"equal\">equal</td>";
            ostream << "<td port=\"value\">value</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->target)
                    {
                        a->target->accept(this);
                        connect(thisid, "target", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "target", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->equal.stringify());
                    connect(thisid, "equal", tokennodeid);
            }
            {
                    if (a->value)
                    {
                        a->value->accept(this);
                        connect(thisid, "value", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "value", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::AssignmentExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">AssignmentExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBinAndExpr(ASTNS::BinAndExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BinAndExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">BinAndExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::BinAndExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">BinAndExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBinOrExpr(ASTNS::BinOrExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BinOrExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">BinOrExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::BinOrExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">BinOrExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBitAndExpr(ASTNS::BitAndExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BitAndExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">BitAndExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::BitAndExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">BitAndExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBitOrExpr(ASTNS::BitOrExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BitOrExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">BitOrExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::BitOrExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">BitOrExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBitShiftExpr(ASTNS::BitShiftExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BitShiftExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">BitShiftExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::BitShiftExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">BitShiftExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBitXorExpr(ASTNS::BitXorExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BitXorExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">BitXorExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::BitXorExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">BitXorExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBlock(ASTNS::Block *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Block::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Block (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBlockedExpr(ASTNS::BlockedExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BlockedExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">BlockedExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitBracedBlock(ASTNS::BracedBlock *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::BracedBlock::Form::TAAT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">BracedBlock (TAAT)</td></tr><tr>";
            ostream << "<td port=\"ocurb\">ocurb</td>";
            ostream << "<td port=\"stmts\">stmts</td>";
            ostream << "<td port=\"implret\">implret</td>";
            ostream << "<td port=\"ccurb\">ccurb</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ocurb.stringify());
                    connect(thisid, "ocurb", tokennodeid);
            }
            {
                    if (a->stmts)
                    {
                        a->stmts->accept(this);
                        connect(thisid, "stmts", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmts", nullptrnodeid);
                    }
            }
            {
                    if (a->implret)
                    {
                        a->implret->accept(this);
                        connect(thisid, "implret", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "implret", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->ccurb.stringify());
                    connect(thisid, "ccurb", tokennodeid);
            }
            break;
        case ASTNS::BracedBlock::Form::TTAAT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"5\">BracedBlock (TTAAT)</td></tr><tr>";
            ostream << "<td port=\"ocurb\">ocurb</td>";
            ostream << "<td port=\"newlopt\">newlopt</td>";
            ostream << "<td port=\"stmts\">stmts</td>";
            ostream << "<td port=\"implret\">implret</td>";
            ostream << "<td port=\"ccurb\">ccurb</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ocurb.stringify());
                    connect(thisid, "ocurb", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->newlopt.stringify());
                    connect(thisid, "newlopt", tokennodeid);
            }
            {
                    if (a->stmts)
                    {
                        a->stmts->accept(this);
                        connect(thisid, "stmts", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmts", nullptrnodeid);
                    }
            }
            {
                    if (a->implret)
                    {
                        a->implret->accept(this);
                        connect(thisid, "implret", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "implret", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->ccurb.stringify());
                    connect(thisid, "ccurb", tokennodeid);
            }
            break;
        case ASTNS::BracedBlock::Form::TTTAATT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"7\">BracedBlock (TTTAATT)</td></tr><tr>";
            ostream << "<td port=\"ocurb\">ocurb</td>";
            ostream << "<td port=\"newlopt\">newlopt</td>";
            ostream << "<td port=\"indentopt\">indentopt</td>";
            ostream << "<td port=\"stmts\">stmts</td>";
            ostream << "<td port=\"implret\">implret</td>";
            ostream << "<td port=\"dedentopt\">dedentopt</td>";
            ostream << "<td port=\"ccurb\">ccurb</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ocurb.stringify());
                    connect(thisid, "ocurb", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->newlopt.stringify());
                    connect(thisid, "newlopt", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->indentopt.stringify());
                    connect(thisid, "indentopt", tokennodeid);
            }
            {
                    if (a->stmts)
                    {
                        a->stmts->accept(this);
                        connect(thisid, "stmts", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmts", nullptrnodeid);
                    }
            }
            {
                    if (a->implret)
                    {
                        a->implret->accept(this);
                        connect(thisid, "implret", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "implret", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->dedentopt.stringify());
                    connect(thisid, "dedentopt", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->ccurb.stringify());
                    connect(thisid, "ccurb", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitCU(ASTNS::CU *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::CU::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">CU (A)</td></tr><tr>";
            ostream << "<td port=\"dl\">dl</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->dl)
                    {
                        a->dl->accept(this);
                        connect(thisid, "dl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "dl", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::CU::Form::EMPTY:
            ostream << thisid << " [label=\"CU (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitCallExpr(ASTNS::CallExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::CallExpr::Form::ATAT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">CallExpr (ATAT)</td></tr><tr>";
            ostream << "<td port=\"callee\">callee</td>";
            ostream << "<td port=\"oparn\">oparn</td>";
            ostream << "<td port=\"args\">args</td>";
            ostream << "<td port=\"cparn\">cparn</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->callee)
                    {
                        a->callee->accept(this);
                        connect(thisid, "callee", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "callee", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->args)
                    {
                        a->args->accept(this);
                        connect(thisid, "args", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "args", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
        case ASTNS::CallExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">CallExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitCastExpr(ASTNS::CastExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::CastExpr::Form::TATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">CastExpr (TATA)</td></tr><tr>";
            ostream << "<td port=\"oparn\">oparn</td>";
            ostream << "<td port=\"type\">type</td>";
            ostream << "<td port=\"cparn\">cparn</td>";
            ostream << "<td port=\"operand\">operand</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->type)
                    {
                        a->type->accept(this);
                        connect(thisid, "type", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "type", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->operand)
                    {
                        a->operand->accept(this);
                        connect(thisid, "operand", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "operand", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::CastExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">CastExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitCompEQExpr(ASTNS::CompEQExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::CompEQExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">CompEQExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::CompEQExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">CompEQExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitCompLGTExpr(ASTNS::CompLGTExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::CompLGTExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">CompLGTExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::CompLGTExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">CompLGTExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitDecl(ASTNS::Decl *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Decl::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Decl (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitDeclList(ASTNS::DeclList *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::DeclList::Form::AA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">DeclList (AA)</td></tr><tr>";
            ostream << "<td port=\"decllist\">decllist</td>";
            ostream << "<td port=\"anotherdecl\">anotherdecl</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->decllist)
                    {
                        a->decllist->accept(this);
                        connect(thisid, "decllist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decllist", nullptrnodeid);
                    }
            }
            {
                    if (a->anotherdecl)
                    {
                        a->anotherdecl->accept(this);
                        connect(thisid, "anotherdecl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "anotherdecl", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::DeclList::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">DeclList (A)</td></tr><tr>";
            ostream << "<td port=\"decl\">decl</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->decl)
                    {
                        a->decl->accept(this);
                        connect(thisid, "decl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decl", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitExpr(ASTNS::Expr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Expr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Expr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitExprStmt(ASTNS::ExprStmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ExprStmt::Form::AA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">ExprStmt (AA)</td></tr><tr>";
            ostream << "<td port=\"expr\">expr</td>";
            ostream << "<td port=\"ending\">ending</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            {
                    if (a->ending)
                    {
                        a->ending->accept(this);
                        connect(thisid, "ending", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "ending", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitExpr_OPT(ASTNS::Expr_OPT *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Expr_OPT::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Expr_OPT (A)</td></tr><tr>";
            ostream << "<td port=\"expr\">expr</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::Expr_OPT::Form::EMPTY:
            ostream << thisid << " [label=\"Expr_OPT (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitForExpr(ASTNS::ForExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ForExpr::Form::TATATATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"8\">ForExpr (TATATATA)</td></tr><tr>";
            ostream << "<td port=\"fortok\">fortok</td>";
            ostream << "<td port=\"start\">start</td>";
            ostream << "<td port=\"semi1\">semi1</td>";
            ostream << "<td port=\"cond\">cond</td>";
            ostream << "<td port=\"semi2\">semi2</td>";
            ostream << "<td port=\"increment\">increment</td>";
            ostream << "<td port=\"cparn\">cparn</td>";
            ostream << "<td port=\"body\">body</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->fortok.stringify());
                    connect(thisid, "fortok", tokennodeid);
            }
            {
                    if (a->start)
                    {
                        a->start->accept(this);
                        connect(thisid, "start", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "start", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi1.stringify());
                    connect(thisid, "semi1", tokennodeid);
            }
            {
                    if (a->cond)
                    {
                        a->cond->accept(this);
                        connect(thisid, "cond", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "cond", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi2.stringify());
                    connect(thisid, "semi2", tokennodeid);
            }
            {
                    if (a->increment)
                    {
                        a->increment->accept(this);
                        connect(thisid, "increment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "increment", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->body)
                    {
                        a->body->accept(this);
                        connect(thisid, "body", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "body", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitFunctionDecl(ASTNS::FunctionDecl *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::FunctionDecl::Form::TATTATAA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"8\">FunctionDecl (TATTATAA)</td></tr><tr>";
            ostream << "<td port=\"fun\">fun</td>";
            ostream << "<td port=\"retty\">retty</td>";
            ostream << "<td port=\"name\">name</td>";
            ostream << "<td port=\"oparn\">oparn</td>";
            ostream << "<td port=\"paramlist\">paramlist</td>";
            ostream << "<td port=\"cparn\">cparn</td>";
            ostream << "<td port=\"body\">body</td>";
            ostream << "<td port=\"endl\">endl</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->fun.stringify());
                    connect(thisid, "fun", tokennodeid);
            }
            {
                    if (a->retty)
                    {
                        a->retty->accept(this);
                        connect(thisid, "retty", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "retty", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->paramlist)
                    {
                        a->paramlist->accept(this);
                        connect(thisid, "paramlist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramlist", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->body)
                    {
                        a->body->accept(this);
                        connect(thisid, "body", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "body", nullptrnodeid);
                    }
            }
            {
                    if (a->endl)
                    {
                        a->endl->accept(this);
                        connect(thisid, "endl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "endl", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::FunctionDecl::Form::TATTATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"7\">FunctionDecl (TATTATA)</td></tr><tr>";
            ostream << "<td port=\"fun\">fun</td>";
            ostream << "<td port=\"retty\">retty</td>";
            ostream << "<td port=\"name\">name</td>";
            ostream << "<td port=\"oparn\">oparn</td>";
            ostream << "<td port=\"paramlist\">paramlist</td>";
            ostream << "<td port=\"cparn\">cparn</td>";
            ostream << "<td port=\"endl\">endl</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->fun.stringify());
                    connect(thisid, "fun", tokennodeid);
            }
            {
                    if (a->retty)
                    {
                        a->retty->accept(this);
                        connect(thisid, "retty", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "retty", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->paramlist)
                    {
                        a->paramlist->accept(this);
                        connect(thisid, "paramlist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramlist", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->endl)
                    {
                        a->endl->accept(this);
                        connect(thisid, "endl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "endl", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitIfExpr(ASTNS::IfExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::IfExpr::Form::TAA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">IfExpr (TAA)</td></tr><tr>";
            ostream << "<td port=\"iftok\">iftok</td>";
            ostream << "<td port=\"cond\">cond</td>";
            ostream << "<td port=\"trues\">trues</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->iftok.stringify());
                    connect(thisid, "iftok", tokennodeid);
            }
            {
                    if (a->cond)
                    {
                        a->cond->accept(this);
                        connect(thisid, "cond", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "cond", nullptrnodeid);
                    }
            }
            {
                    if (a->trues)
                    {
                        a->trues->accept(this);
                        connect(thisid, "trues", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "trues", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::IfExpr::Form::TAATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"5\">IfExpr (TAATA)</td></tr><tr>";
            ostream << "<td port=\"iftok\">iftok</td>";
            ostream << "<td port=\"cond\">cond</td>";
            ostream << "<td port=\"trues\">trues</td>";
            ostream << "<td port=\"elsetok\">elsetok</td>";
            ostream << "<td port=\"falses\">falses</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->iftok.stringify());
                    connect(thisid, "iftok", tokennodeid);
            }
            {
                    if (a->cond)
                    {
                        a->cond->accept(this);
                        connect(thisid, "cond", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "cond", nullptrnodeid);
                    }
            }
            {
                    if (a->trues)
                    {
                        a->trues->accept(this);
                        connect(thisid, "trues", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "trues", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->elsetok.stringify());
                    connect(thisid, "elsetok", tokennodeid);
            }
            {
                    if (a->falses)
                    {
                        a->falses->accept(this);
                        connect(thisid, "falses", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "falses", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitImplRet(ASTNS::ImplRet *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ImplRet::Form::TAA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">ImplRet (TAA)</td></tr><tr>";
            ostream << "<td port=\"leftarrow\">leftarrow</td>";
            ostream << "<td port=\"expr\">expr</td>";
            ostream << "<td port=\"ending\">ending</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->leftarrow.stringify());
                    connect(thisid, "leftarrow", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            {
                    if (a->ending)
                    {
                        a->ending->accept(this);
                        connect(thisid, "ending", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "ending", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitImplRet_OPT(ASTNS::ImplRet_OPT *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ImplRet_OPT::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">ImplRet_OPT (A)</td></tr><tr>";
            ostream << "<td port=\"implret\">implret</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->implret)
                    {
                        a->implret->accept(this);
                        connect(thisid, "implret", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "implret", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::ImplRet_OPT::Form::EMPTY:
            ostream << thisid << " [label=\"ImplRet_OPT (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitIndentedBlock(ASTNS::IndentedBlock *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::IndentedBlock::Form::TTAAT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"5\">IndentedBlock (TTAAT)</td></tr><tr>";
            ostream << "<td port=\"newl\">newl</td>";
            ostream << "<td port=\"indent\">indent</td>";
            ostream << "<td port=\"stmts\">stmts</td>";
            ostream << "<td port=\"implret\">implret</td>";
            ostream << "<td port=\"dedent\">dedent</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->newl.stringify());
                    connect(thisid, "newl", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->indent.stringify());
                    connect(thisid, "indent", tokennodeid);
            }
            {
                    if (a->stmts)
                    {
                        a->stmts->accept(this);
                        connect(thisid, "stmts", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmts", nullptrnodeid);
                    }
            }
            {
                    if (a->implret)
                    {
                        a->implret->accept(this);
                        connect(thisid, "implret", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "implret", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->dedent.stringify());
                    connect(thisid, "dedent", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitLineEnding(ASTNS::LineEnding *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::LineEnding::Form::T:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">LineEnding (T)</td></tr><tr>";
            ostream << "<td port=\"tok\">tok</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->tok.stringify());
                    connect(thisid, "tok", tokennodeid);
            }
            break;
        case ASTNS::LineEnding::Form::TT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">LineEnding (TT)</td></tr><tr>";
            ostream << "<td port=\"tok\">tok</td>";
            ostream << "<td port=\"tok2\">tok2</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->tok.stringify());
                    connect(thisid, "tok", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->tok2.stringify());
                    connect(thisid, "tok2", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitLineEnding_OPT(ASTNS::LineEnding_OPT *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::LineEnding_OPT::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">LineEnding_OPT (A)</td></tr><tr>";
            ostream << "<td port=\"lineending\">lineending</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lineending)
                    {
                        a->lineending->accept(this);
                        connect(thisid, "lineending", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lineending", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::LineEnding_OPT::Form::EMPTY:
            ostream << thisid << " [label=\"LineEnding_OPT (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitMultExpr(ASTNS::MultExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::MultExpr::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">MultExpr (ATA)</td></tr><tr>";
            ostream << "<td port=\"lhs\">lhs</td>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"rhs\">rhs</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::MultExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">MultExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitNotBlockedExpr(ASTNS::NotBlockedExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::NotBlockedExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">NotBlockedExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitParam(ASTNS::Param *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Param::Form::AT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Param (AT)</td></tr><tr>";
            ostream << "<td port=\"type\">type</td>";
            ostream << "<td port=\"name\">name</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->type)
                    {
                        a->type->accept(this);
                        connect(thisid, "type", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "type", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitParamList(ASTNS::ParamList *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ParamList::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">ParamList (A)</td></tr><tr>";
            ostream << "<td port=\"paramsegment\">paramsegment</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->paramsegment)
                    {
                        a->paramsegment->accept(this);
                        connect(thisid, "paramsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramsegment", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::ParamList::Form::AT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">ParamList (AT)</td></tr><tr>";
            ostream << "<td port=\"paramsegment\">paramsegment</td>";
            ostream << "<td port=\"comma\">comma</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->paramsegment)
                    {
                        a->paramsegment->accept(this);
                        connect(thisid, "paramsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramsegment", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitParamList_OPT(ASTNS::ParamList_OPT *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ParamList_OPT::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">ParamList_OPT (A)</td></tr><tr>";
            ostream << "<td port=\"paramlist\">paramlist</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->paramlist)
                    {
                        a->paramlist->accept(this);
                        connect(thisid, "paramlist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramlist", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::ParamList_OPT::Form::EMPTY:
            ostream << thisid << " [label=\"ParamList_OPT (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitParamSegment(ASTNS::ParamSegment *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::ParamSegment::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">ParamSegment (ATA)</td></tr><tr>";
            ostream << "<td port=\"paramsegment\">paramsegment</td>";
            ostream << "<td port=\"comma\">comma</td>";
            ostream << "<td port=\"anotherparam\">anotherparam</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->paramsegment)
                    {
                        a->paramsegment->accept(this);
                        connect(thisid, "paramsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramsegment", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    if (a->anotherparam)
                    {
                        a->anotherparam->accept(this);
                        connect(thisid, "anotherparam", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "anotherparam", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::ParamSegment::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">ParamSegment (A)</td></tr><tr>";
            ostream << "<td port=\"param\">param</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->param)
                    {
                        a->param->accept(this);
                        connect(thisid, "param", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "param", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitPrimaryExpr(ASTNS::PrimaryExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::PrimaryExpr::Form::T:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">PrimaryExpr (T)</td></tr><tr>";
            ostream << "<td port=\"value\">value</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->value.stringify());
                    connect(thisid, "value", tokennodeid);
            }
            break;
        case ASTNS::PrimaryExpr::Form::TAT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">PrimaryExpr (TAT)</td></tr><tr>";
            ostream << "<td port=\"oparn\">oparn</td>";
            ostream << "<td port=\"expr\">expr</td>";
            ostream << "<td port=\"cparn\">cparn</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitPrimitiveType(ASTNS::PrimitiveType *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::PrimitiveType::Form::T:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">PrimitiveType (T)</td></tr><tr>";
            ostream << "<td port=\"type\">type</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->type.stringify());
                    connect(thisid, "type", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitRetStmt(ASTNS::RetStmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::RetStmt::Form::TAA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">RetStmt (TAA)</td></tr><tr>";
            ostream << "<td port=\"ret\">ret</td>";
            ostream << "<td port=\"expr\">expr</td>";
            ostream << "<td port=\"ending\">ending</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ret.stringify());
                    connect(thisid, "ret", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            {
                    if (a->ending)
                    {
                        a->ending->accept(this);
                        connect(thisid, "ending", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "ending", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::RetStmt::Form::TA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">RetStmt (TA)</td></tr><tr>";
            ostream << "<td port=\"ret\">ret</td>";
            ostream << "<td port=\"ending\">ending</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ret.stringify());
                    connect(thisid, "ret", tokennodeid);
            }
            {
                    if (a->ending)
                    {
                        a->ending->accept(this);
                        connect(thisid, "ending", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "ending", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitStmt(ASTNS::Stmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Stmt::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Stmt (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitStmtList(ASTNS::StmtList *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::StmtList::Form::AA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">StmtList (AA)</td></tr><tr>";
            ostream << "<td port=\"stmtlist\">stmtlist</td>";
            ostream << "<td port=\"anotherstmt\">anotherstmt</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->stmtlist)
                    {
                        a->stmtlist->accept(this);
                        connect(thisid, "stmtlist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmtlist", nullptrnodeid);
                    }
            }
            {
                    if (a->anotherstmt)
                    {
                        a->anotherstmt->accept(this);
                        connect(thisid, "anotherstmt", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "anotherstmt", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::StmtList::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">StmtList (A)</td></tr><tr>";
            ostream << "<td port=\"stmt\">stmt</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->stmt)
                    {
                        a->stmt->accept(this);
                        connect(thisid, "stmt", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmt", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitStmtList_OPT(ASTNS::StmtList_OPT *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::StmtList_OPT::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">StmtList_OPT (A)</td></tr><tr>";
            ostream << "<td port=\"stmtlist\">stmtlist</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->stmtlist)
                    {
                        a->stmtlist->accept(this);
                        connect(thisid, "stmtlist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmtlist", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::StmtList_OPT::Form::EMPTY:
            ostream << thisid << " [label=\"StmtList_OPT (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitType(ASTNS::Type *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Type::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Type (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitUnaryExpr(ASTNS::UnaryExpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::UnaryExpr::Form::TA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">UnaryExpr (TA)</td></tr><tr>";
            ostream << "<td port=\"op\">op</td>";
            ostream << "<td port=\"operand\">operand</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->operand)
                    {
                        a->operand->accept(this);
                        connect(thisid, "operand", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "operand", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::UnaryExpr::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">UnaryExpr (A)</td></tr><tr>";
            ostream << "<td port=\"_\">_</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->_)
                    {
                        a->_->accept(this);
                        connect(thisid, "_", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "_", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitVarStmt(ASTNS::VarStmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::VarStmt::Form::TAAA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">VarStmt (TAAA)</td></tr><tr>";
            ostream << "<td port=\"var\">var</td>";
            ostream << "<td port=\"type\">type</td>";
            ostream << "<td port=\"assignments\">assignments</td>";
            ostream << "<td port=\"ending\">ending</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->var.stringify());
                    connect(thisid, "var", tokennodeid);
            }
            {
                    if (a->type)
                    {
                        a->type->accept(this);
                        connect(thisid, "type", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "type", nullptrnodeid);
                    }
            }
            {
                    if (a->assignments)
                    {
                        a->assignments->accept(this);
                        connect(thisid, "assignments", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "assignments", nullptrnodeid);
                    }
            }
            {
                    if (a->ending)
                    {
                        a->ending->accept(this);
                        connect(thisid, "ending", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "ending", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitVarStmtItem(ASTNS::VarStmtItem *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::VarStmtItem::Form::TTA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">VarStmtItem (TTA)</td></tr><tr>";
            ostream << "<td port=\"name\">name</td>";
            ostream << "<td port=\"equal\">equal</td>";
            ostream << "<td port=\"expr\">expr</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->equal.stringify());
                    connect(thisid, "equal", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::VarStmtItem::Form::T:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">VarStmtItem (T)</td></tr><tr>";
            ostream << "<td port=\"name\">name</td>";
            ostream << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitVarStmtItemList(ASTNS::VarStmtItemList *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::VarStmtItemList::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">VarStmtItemList (A)</td></tr><tr>";
            ostream << "<td port=\"varstmtitemsegment\">varstmtitemsegment</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->varstmtitemsegment)
                    {
                        a->varstmtitemsegment->accept(this);
                        connect(thisid, "varstmtitemsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "varstmtitemsegment", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::VarStmtItemList::Form::AT:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">VarStmtItemList (AT)</td></tr><tr>";
            ostream << "<td port=\"varstmtitemsegment\">varstmtitemsegment</td>";
            ostream << "<td port=\"comma\">comma</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->varstmtitemsegment)
                    {
                        a->varstmtitemsegment->accept(this);
                        connect(thisid, "varstmtitemsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "varstmtitemsegment", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitVarStmtItemSegment(ASTNS::VarStmtItemSegment *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::VarStmtItemSegment::Form::ATA:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">VarStmtItemSegment (ATA)</td></tr><tr>";
            ostream << "<td port=\"varstmtitemsegment\">varstmtitemsegment</td>";
            ostream << "<td port=\"comma\">comma</td>";
            ostream << "<td port=\"anothervarstmtitem\">anothervarstmtitem</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->varstmtitemsegment)
                    {
                        a->varstmtitemsegment->accept(this);
                        connect(thisid, "varstmtitemsegment", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "varstmtitemsegment", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    if (a->anothervarstmtitem)
                    {
                        a->anothervarstmtitem->accept(this);
                        connect(thisid, "anothervarstmtitem", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "anothervarstmtitem", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::VarStmtItemSegment::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">VarStmtItemSegment (A)</td></tr><tr>";
            ostream << "<td port=\"varstmtitem\">varstmtitem</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->varstmtitem)
                    {
                        a->varstmtitem->accept(this);
                        connect(thisid, "varstmtitem", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "varstmtitem", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void ASTNS::DotVisitor::visitVarStmt_OPT(ASTNS::VarStmt_OPT *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::VarStmt_OPT::Form::A:
            ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">VarStmt_OPT (A)</td></tr><tr>";
            ostream << "<td port=\"varstmt\">varstmt</td>";
            ostream << "</tr></table>>]\n";
            {
                    if (a->varstmt)
                    {
                        a->varstmt->accept(this);
                        connect(thisid, "varstmt", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "varstmt", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::VarStmt_OPT::Form::EMPTY:
            ostream << thisid << " [label=\"VarStmt_OPT (EMPTY)\"]";
            break;
    }
    lastid = std::move(thisid);
}
// This code was autogenerated - see the utils/ directory
// DOTVISITOR END
void ASTNS::DotVisitor::dotVisit(ASTNS::CUB *ast)
{
    ostream << "strict digraph {\n";
    ostream << "node [shape=plain]\n";
    ast->accept(this);
    ostream << "}\n";
}
std::string ASTNS::DotVisitor::curid()
{
    std::stringstream ss;
    ss << "struct" << _curid;
    ++_curid;
    return ss.str();
}
std::string ASTNS::DotVisitor::makeTextNode(std::string type, std::string text)
{
    std::string thisid = curid();
#define FINDREP(x, r) {\
    size_t it;\
    while ((it = text.find(x)) != std::string::npos)\
        text.replace(it, it + 1, r);\
    }

    FINDREP("&", "\x07amp;")
    FINDREP("<", "\x07lt;")
    FINDREP(">", "\x07rt;")
    FINDREP("\x07", "&")

#undef FINDREP
    ostream << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td>" << type << "</td></tr><tr><td>" << text << "</td></tr></table>>]\n";
    return thisid;
}
void ASTNS::DotVisitor::connect(std::string startid, std::string fieldname, std::string connectto)
{
    ostream << startid << ":" << fieldname << " -> " << connectto << ":__heading\n";
}

ASTNS::DotVisitor::DotVisitor(llvm::raw_ostream &ostream): ostream(ostream) {}
