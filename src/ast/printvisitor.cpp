#include "ast/printvisitor.h"

#include <iostream>
#include <string>

// PRINTVISITOR START
// The following code was autogenerated - see the utils/ directory
void ASTNS::PrintVisitor::visitAdditionExpr(ASTNS::AdditionExpr *a)
{
    switch (a->form)
    {
        case ASTNS::AdditionExpr::Form::ATA:
            pai("AdditionExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitArg(ASTNS::Arg *a)
{
    switch (a->form)
    {
        case ASTNS::Arg::Form::A:
            pai("Arg A\n");
            ++indent;
            pai("std::unique_ptr<ExprB> expr = ");
            if (a->expr)
                a->expr->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitArgList(ASTNS::ArgList *a)
{
    switch (a->form)
    {
        case ASTNS::ArgList::Form::AT:
            pai("ArgList AT\n");
            ++indent;
            pai("std::unique_ptr<ArgB> argsegment = ");
            if (a->argsegment)
                a->argsegment->accept(this);
            else
                pai("nullptr\n");
            pai("Token comma = ");
            pai("\"");
            pai(std::string(a->comma.start, a->comma.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitArgList_OPT(ASTNS::ArgList_OPT *a)
{
    switch (a->form)
    {
        case ASTNS::ArgList_OPT::Form::EMPTY:
            pai("ArgList_OPT EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitArgSegment(ASTNS::ArgSegment *a)
{
    switch (a->form)
    {
        case ASTNS::ArgSegment::Form::ATA:
            pai("ArgSegment ATA\n");
            ++indent;
            pai("std::unique_ptr<ArgB> argsegment = ");
            if (a->argsegment)
                a->argsegment->accept(this);
            else
                pai("nullptr\n");
            pai("Token comma = ");
            pai("\"");
            pai(std::string(a->comma.start, a->comma.end));
            pai("\"\n");
            pai("std::unique_ptr<ArgB> anotherarg = ");
            if (a->anotherarg)
                a->anotherarg->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitAssignmentExpr(ASTNS::AssignmentExpr *a)
{
    switch (a->form)
    {
        case ASTNS::AssignmentExpr::Form::ATA:
            pai("AssignmentExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> target = ");
            if (a->target)
                a->target->accept(this);
            else
                pai("nullptr\n");
            pai("Token equal = ");
            pai("\"");
            pai(std::string(a->equal.start, a->equal.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> value = ");
            if (a->value)
                a->value->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBinAndExpr(ASTNS::BinAndExpr *a)
{
    switch (a->form)
    {
        case ASTNS::BinAndExpr::Form::ATA:
            pai("BinAndExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBinOrExpr(ASTNS::BinOrExpr *a)
{
    switch (a->form)
    {
        case ASTNS::BinOrExpr::Form::ATA:
            pai("BinOrExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBitAndExpr(ASTNS::BitAndExpr *a)
{
    switch (a->form)
    {
        case ASTNS::BitAndExpr::Form::ATA:
            pai("BitAndExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBitOrExpr(ASTNS::BitOrExpr *a)
{
    switch (a->form)
    {
        case ASTNS::BitOrExpr::Form::ATA:
            pai("BitOrExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBitShiftExpr(ASTNS::BitShiftExpr *a)
{
    switch (a->form)
    {
        case ASTNS::BitShiftExpr::Form::ATA:
            pai("BitShiftExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBitXorExpr(ASTNS::BitXorExpr *a)
{
    switch (a->form)
    {
        case ASTNS::BitXorExpr::Form::ATA:
            pai("BitXorExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBracedBlock(ASTNS::BracedBlock *a)
{
    switch (a->form)
    {
        case ASTNS::BracedBlock::Form::TAAT:
            pai("BracedBlock TAAT\n");
            ++indent;
            pai("Token ocurb = ");
            pai("\"");
            pai(std::string(a->ocurb.start, a->ocurb.end));
            pai("\"\n");
            pai("std::unique_ptr<StmtB> stmts = ");
            if (a->stmts)
                a->stmts->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<ExprB> implret = ");
            if (a->implret)
                a->implret->accept(this);
            else
                pai("nullptr\n");
            pai("Token ccurb = ");
            pai("\"");
            pai(std::string(a->ccurb.start, a->ccurb.end));
            pai("\"\n");
            break;
        case ASTNS::BracedBlock::Form::TTAAT:
            pai("BracedBlock TTAAT\n");
            ++indent;
            pai("Token ocurb = ");
            pai("\"");
            pai(std::string(a->ocurb.start, a->ocurb.end));
            pai("\"\n");
            pai("Token newlopt = ");
            pai("\"");
            pai(std::string(a->newlopt.start, a->newlopt.end));
            pai("\"\n");
            pai("std::unique_ptr<StmtB> stmts = ");
            if (a->stmts)
                a->stmts->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<ExprB> implret = ");
            if (a->implret)
                a->implret->accept(this);
            else
                pai("nullptr\n");
            pai("Token ccurb = ");
            pai("\"");
            pai(std::string(a->ccurb.start, a->ccurb.end));
            pai("\"\n");
            break;
        case ASTNS::BracedBlock::Form::TTTAATT:
            pai("BracedBlock TTTAATT\n");
            ++indent;
            pai("Token ocurb = ");
            pai("\"");
            pai(std::string(a->ocurb.start, a->ocurb.end));
            pai("\"\n");
            pai("Token newlopt = ");
            pai("\"");
            pai(std::string(a->newlopt.start, a->newlopt.end));
            pai("\"\n");
            pai("Token indentopt = ");
            pai("\"");
            pai(std::string(a->indentopt.start, a->indentopt.end));
            pai("\"\n");
            pai("std::unique_ptr<StmtB> stmts = ");
            if (a->stmts)
                a->stmts->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<ExprB> implret = ");
            if (a->implret)
                a->implret->accept(this);
            else
                pai("nullptr\n");
            pai("Token dedentopt = ");
            pai("\"");
            pai(std::string(a->dedentopt.start, a->dedentopt.end));
            pai("\"\n");
            pai("Token ccurb = ");
            pai("\"");
            pai(std::string(a->ccurb.start, a->ccurb.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitBuiltinType(ASTNS::BuiltinType *a)
{
    switch (a->form)
    {
        case ASTNS::BuiltinType::Form::T:
            pai("BuiltinType T\n");
            ++indent;
            pai("Token type = ");
            pai("\"");
            pai(std::string(a->type.start, a->type.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitCU(ASTNS::CU *a)
{
    switch (a->form)
    {
        case ASTNS::CU::Form::A:
            pai("CU A\n");
            ++indent;
            pai("std::unique_ptr<DeclB> dl = ");
            if (a->dl)
                a->dl->accept(this);
            else
                pai("nullptr\n");
            break;
        case ASTNS::CU::Form::EMPTY:
            pai("CU EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitCallExpr(ASTNS::CallExpr *a)
{
    switch (a->form)
    {
        case ASTNS::CallExpr::Form::ATAT:
            pai("CallExpr ATAT\n");
            ++indent;
            pai("std::unique_ptr<ExprB> callee = ");
            if (a->callee)
                a->callee->accept(this);
            else
                pai("nullptr\n");
            pai("Token oparn = ");
            pai("\"");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("\"\n");
            pai("std::unique_ptr<ArgB> args = ");
            if (a->args)
                a->args->accept(this);
            else
                pai("nullptr\n");
            pai("Token cparn = ");
            pai("\"");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitCastExpr(ASTNS::CastExpr *a)
{
    switch (a->form)
    {
        case ASTNS::CastExpr::Form::TATA:
            pai("CastExpr TATA\n");
            ++indent;
            pai("Token oparn = ");
            pai("\"");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("\"\n");
            pai("std::unique_ptr<TypeB> type = ");
            if (a->type)
                a->type->accept(this);
            else
                pai("nullptr\n");
            pai("Token cparn = ");
            pai("\"");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> operand = ");
            if (a->operand)
                a->operand->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitCompEQExpr(ASTNS::CompEQExpr *a)
{
    switch (a->form)
    {
        case ASTNS::CompEQExpr::Form::ATA:
            pai("CompEQExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitCompLGTExpr(ASTNS::CompLGTExpr *a)
{
    switch (a->form)
    {
        case ASTNS::CompLGTExpr::Form::ATA:
            pai("CompLGTExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitDeclList(ASTNS::DeclList *a)
{
    switch (a->form)
    {
        case ASTNS::DeclList::Form::AA:
            pai("DeclList AA\n");
            ++indent;
            pai("std::unique_ptr<DeclB> decllist = ");
            if (a->decllist)
                a->decllist->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<DeclB> anotherdecl = ");
            if (a->anotherdecl)
                a->anotherdecl->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitExprStmt(ASTNS::ExprStmt *a)
{
    switch (a->form)
    {
        case ASTNS::ExprStmt::Form::AA:
            pai("ExprStmt AA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> expr = ");
            if (a->expr)
                a->expr->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<LineEndingB> ending = ");
            if (a->ending)
                a->ending->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitExpr_OPT(ASTNS::Expr_OPT *a)
{
    switch (a->form)
    {
        case ASTNS::Expr_OPT::Form::EMPTY:
            pai("Expr_OPT EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitForExpr(ASTNS::ForExpr *a)
{
    switch (a->form)
    {
        case ASTNS::ForExpr::Form::TATATATA:
            pai("ForExpr TATATATA\n");
            ++indent;
            pai("Token fortok = ");
            pai("\"");
            pai(std::string(a->fortok.start, a->fortok.end));
            pai("\"\n");
            pai("std::unique_ptr<StmtB> start = ");
            if (a->start)
                a->start->accept(this);
            else
                pai("nullptr\n");
            pai("Token semi1 = ");
            pai("\"");
            pai(std::string(a->semi1.start, a->semi1.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> cond = ");
            if (a->cond)
                a->cond->accept(this);
            else
                pai("nullptr\n");
            pai("Token semi2 = ");
            pai("\"");
            pai(std::string(a->semi2.start, a->semi2.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> increment = ");
            if (a->increment)
                a->increment->accept(this);
            else
                pai("nullptr\n");
            pai("Token cparn = ");
            pai("\"");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> body = ");
            if (a->body)
                a->body->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitFunctionDecl(ASTNS::FunctionDecl *a)
{
    switch (a->form)
    {
        case ASTNS::FunctionDecl::Form::TATTATAA:
            pai("FunctionDecl TATTATAA\n");
            ++indent;
            pai("Token fun = ");
            pai("\"");
            pai(std::string(a->fun.start, a->fun.end));
            pai("\"\n");
            pai("std::unique_ptr<TypeB> retty = ");
            if (a->retty)
                a->retty->accept(this);
            else
                pai("nullptr\n");
            pai("Token name = ");
            pai("\"");
            pai(std::string(a->name.start, a->name.end));
            pai("\"\n");
            pai("Token oparn = ");
            pai("\"");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("\"\n");
            pai("std::unique_ptr<PListB> paramlist = ");
            if (a->paramlist)
                a->paramlist->accept(this);
            else
                pai("nullptr\n");
            pai("Token cparn = ");
            pai("\"");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> body = ");
            if (a->body)
                a->body->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<LineEndingB> endl = ");
            if (a->endl)
                a->endl->accept(this);
            else
                pai("nullptr\n");
            break;
        case ASTNS::FunctionDecl::Form::TATTATA:
            pai("FunctionDecl TATTATA\n");
            ++indent;
            pai("Token fun = ");
            pai("\"");
            pai(std::string(a->fun.start, a->fun.end));
            pai("\"\n");
            pai("std::unique_ptr<TypeB> retty = ");
            if (a->retty)
                a->retty->accept(this);
            else
                pai("nullptr\n");
            pai("Token name = ");
            pai("\"");
            pai(std::string(a->name.start, a->name.end));
            pai("\"\n");
            pai("Token oparn = ");
            pai("\"");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("\"\n");
            pai("std::unique_ptr<PListB> paramlist = ");
            if (a->paramlist)
                a->paramlist->accept(this);
            else
                pai("nullptr\n");
            pai("Token cparn = ");
            pai("\"");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("\"\n");
            pai("std::unique_ptr<LineEndingB> endl = ");
            if (a->endl)
                a->endl->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitIfExpr(ASTNS::IfExpr *a)
{
    switch (a->form)
    {
        case ASTNS::IfExpr::Form::TAA:
            pai("IfExpr TAA\n");
            ++indent;
            pai("Token iftok = ");
            pai("\"");
            pai(std::string(a->iftok.start, a->iftok.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> cond = ");
            if (a->cond)
                a->cond->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<ExprB> trues = ");
            if (a->trues)
                a->trues->accept(this);
            else
                pai("nullptr\n");
            break;
        case ASTNS::IfExpr::Form::TAATA:
            pai("IfExpr TAATA\n");
            ++indent;
            pai("Token iftok = ");
            pai("\"");
            pai(std::string(a->iftok.start, a->iftok.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> cond = ");
            if (a->cond)
                a->cond->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<ExprB> trues = ");
            if (a->trues)
                a->trues->accept(this);
            else
                pai("nullptr\n");
            pai("Token elsetok = ");
            pai("\"");
            pai(std::string(a->elsetok.start, a->elsetok.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> falses = ");
            if (a->falses)
                a->falses->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitImplRet(ASTNS::ImplRet *a)
{
    switch (a->form)
    {
        case ASTNS::ImplRet::Form::TAA:
            pai("ImplRet TAA\n");
            ++indent;
            pai("Token leftarrow = ");
            pai("\"");
            pai(std::string(a->leftarrow.start, a->leftarrow.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> expr = ");
            if (a->expr)
                a->expr->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<LineEndingB> ending = ");
            if (a->ending)
                a->ending->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitImplRet_OPT(ASTNS::ImplRet_OPT *a)
{
    switch (a->form)
    {
        case ASTNS::ImplRet_OPT::Form::EMPTY:
            pai("ImplRet_OPT EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitIndentedBlock(ASTNS::IndentedBlock *a)
{
    switch (a->form)
    {
        case ASTNS::IndentedBlock::Form::TTAAT:
            pai("IndentedBlock TTAAT\n");
            ++indent;
            pai("Token newl = ");
            pai("\"");
            pai(std::string(a->newl.start, a->newl.end));
            pai("\"\n");
            pai("Token indent = ");
            pai("\"");
            pai(std::string(a->indent.start, a->indent.end));
            pai("\"\n");
            pai("std::unique_ptr<StmtB> stmts = ");
            if (a->stmts)
                a->stmts->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<ExprB> implret = ");
            if (a->implret)
                a->implret->accept(this);
            else
                pai("nullptr\n");
            pai("Token dedent = ");
            pai("\"");
            pai(std::string(a->dedent.start, a->dedent.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitLineEnding(ASTNS::LineEnding *a)
{
    switch (a->form)
    {
        case ASTNS::LineEnding::Form::T:
            pai("LineEnding T\n");
            ++indent;
            pai("Token tok = ");
            pai("\"");
            pai(std::string(a->tok.start, a->tok.end));
            pai("\"\n");
            break;
        case ASTNS::LineEnding::Form::TT:
            pai("LineEnding TT\n");
            ++indent;
            pai("Token tok = ");
            pai("\"");
            pai(std::string(a->tok.start, a->tok.end));
            pai("\"\n");
            pai("Token tok2 = ");
            pai("\"");
            pai(std::string(a->tok2.start, a->tok2.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitLineEnding_OPT(ASTNS::LineEnding_OPT *a)
{
    switch (a->form)
    {
        case ASTNS::LineEnding_OPT::Form::EMPTY:
            pai("LineEnding_OPT EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitMultExpr(ASTNS::MultExpr *a)
{
    switch (a->form)
    {
        case ASTNS::MultExpr::Form::ATA:
            pai("MultExpr ATA\n");
            ++indent;
            pai("std::unique_ptr<ExprB> lhs = ");
            if (a->lhs)
                a->lhs->accept(this);
            else
                pai("nullptr\n");
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> rhs = ");
            if (a->rhs)
                a->rhs->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitParam(ASTNS::Param *a)
{
    switch (a->form)
    {
        case ASTNS::Param::Form::AT:
            pai("Param AT\n");
            ++indent;
            pai("std::unique_ptr<TypeB> type = ");
            if (a->type)
                a->type->accept(this);
            else
                pai("nullptr\n");
            pai("Token name = ");
            pai("\"");
            pai(std::string(a->name.start, a->name.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitParamList(ASTNS::ParamList *a)
{
    switch (a->form)
    {
        case ASTNS::ParamList::Form::AT:
            pai("ParamList AT\n");
            ++indent;
            pai("std::unique_ptr<PListB> paramsegment = ");
            if (a->paramsegment)
                a->paramsegment->accept(this);
            else
                pai("nullptr\n");
            pai("Token comma = ");
            pai("\"");
            pai(std::string(a->comma.start, a->comma.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitParamList_OPT(ASTNS::ParamList_OPT *a)
{
    switch (a->form)
    {
        case ASTNS::ParamList_OPT::Form::EMPTY:
            pai("ParamList_OPT EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitParamSegment(ASTNS::ParamSegment *a)
{
    switch (a->form)
    {
        case ASTNS::ParamSegment::Form::ATA:
            pai("ParamSegment ATA\n");
            ++indent;
            pai("std::unique_ptr<PListB> paramsegment = ");
            if (a->paramsegment)
                a->paramsegment->accept(this);
            else
                pai("nullptr\n");
            pai("Token comma = ");
            pai("\"");
            pai(std::string(a->comma.start, a->comma.end));
            pai("\"\n");
            pai("std::unique_ptr<PListB> anotherparam = ");
            if (a->anotherparam)
                a->anotherparam->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitPrimaryExpr(ASTNS::PrimaryExpr *a)
{
    switch (a->form)
    {
        case ASTNS::PrimaryExpr::Form::T:
            pai("PrimaryExpr T\n");
            ++indent;
            pai("Token value = ");
            pai("\"");
            pai(std::string(a->value.start, a->value.end));
            pai("\"\n");
            break;
        case ASTNS::PrimaryExpr::Form::TAT:
            pai("PrimaryExpr TAT\n");
            ++indent;
            pai("Token oparn = ");
            pai("\"");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> expr = ");
            if (a->expr)
                a->expr->accept(this);
            else
                pai("nullptr\n");
            pai("Token cparn = ");
            pai("\"");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitRetStmt(ASTNS::RetStmt *a)
{
    switch (a->form)
    {
        case ASTNS::RetStmt::Form::TAA:
            pai("RetStmt TAA\n");
            ++indent;
            pai("Token ret = ");
            pai("\"");
            pai(std::string(a->ret.start, a->ret.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> expr = ");
            if (a->expr)
                a->expr->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<LineEndingB> ending = ");
            if (a->ending)
                a->ending->accept(this);
            else
                pai("nullptr\n");
            break;
        case ASTNS::RetStmt::Form::TA:
            pai("RetStmt TA\n");
            ++indent;
            pai("Token ret = ");
            pai("\"");
            pai(std::string(a->ret.start, a->ret.end));
            pai("\"\n");
            pai("std::unique_ptr<LineEndingB> ending = ");
            if (a->ending)
                a->ending->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitStmtList(ASTNS::StmtList *a)
{
    switch (a->form)
    {
        case ASTNS::StmtList::Form::AA:
            pai("StmtList AA\n");
            ++indent;
            pai("std::unique_ptr<StmtB> stmtlist = ");
            if (a->stmtlist)
                a->stmtlist->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<StmtB> anotherstmt = ");
            if (a->anotherstmt)
                a->anotherstmt->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitStmtList_OPT(ASTNS::StmtList_OPT *a)
{
    switch (a->form)
    {
        case ASTNS::StmtList_OPT::Form::EMPTY:
            pai("StmtList_OPT EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitUnaryExpr(ASTNS::UnaryExpr *a)
{
    switch (a->form)
    {
        case ASTNS::UnaryExpr::Form::TA:
            pai("UnaryExpr TA\n");
            ++indent;
            pai("Token op = ");
            pai("\"");
            pai(std::string(a->op.start, a->op.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> operand = ");
            if (a->operand)
                a->operand->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmt(ASTNS::VarStmt *a)
{
    switch (a->form)
    {
        case ASTNS::VarStmt::Form::TAAA:
            pai("VarStmt TAAA\n");
            ++indent;
            pai("Token var = ");
            pai("\"");
            pai(std::string(a->var.start, a->var.end));
            pai("\"\n");
            pai("std::unique_ptr<TypeB> type = ");
            if (a->type)
                a->type->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<VStmtIB> assignments = ");
            if (a->assignments)
                a->assignments->accept(this);
            else
                pai("nullptr\n");
            pai("std::unique_ptr<LineEndingB> ending = ");
            if (a->ending)
                a->ending->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmtItem(ASTNS::VarStmtItem *a)
{
    switch (a->form)
    {
        case ASTNS::VarStmtItem::Form::TTA:
            pai("VarStmtItem TTA\n");
            ++indent;
            pai("Token name = ");
            pai("\"");
            pai(std::string(a->name.start, a->name.end));
            pai("\"\n");
            pai("Token equal = ");
            pai("\"");
            pai(std::string(a->equal.start, a->equal.end));
            pai("\"\n");
            pai("std::unique_ptr<ExprB> expr = ");
            if (a->expr)
                a->expr->accept(this);
            else
                pai("nullptr\n");
            break;
        case ASTNS::VarStmtItem::Form::T:
            pai("VarStmtItem T\n");
            ++indent;
            pai("Token name = ");
            pai("\"");
            pai(std::string(a->name.start, a->name.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmtItemList(ASTNS::VarStmtItemList *a)
{
    switch (a->form)
    {
        case ASTNS::VarStmtItemList::Form::AT:
            pai("VarStmtItemList AT\n");
            ++indent;
            pai("std::unique_ptr<VStmtIB> varstmtitemsegment = ");
            if (a->varstmtitemsegment)
                a->varstmtitemsegment->accept(this);
            else
                pai("nullptr\n");
            pai("Token comma = ");
            pai("\"");
            pai(std::string(a->comma.start, a->comma.end));
            pai("\"\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmtItemSegment(ASTNS::VarStmtItemSegment *a)
{
    switch (a->form)
    {
        case ASTNS::VarStmtItemSegment::Form::ATA:
            pai("VarStmtItemSegment ATA\n");
            ++indent;
            pai("std::unique_ptr<VStmtIB> varstmtitemsegment = ");
            if (a->varstmtitemsegment)
                a->varstmtitemsegment->accept(this);
            else
                pai("nullptr\n");
            pai("Token comma = ");
            pai("\"");
            pai(std::string(a->comma.start, a->comma.end));
            pai("\"\n");
            pai("std::unique_ptr<VStmtIB> anothervarstmtitem = ");
            if (a->anothervarstmtitem)
                a->anothervarstmtitem->accept(this);
            else
                pai("nullptr\n");
            break;
    }
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmt_OPT(ASTNS::VarStmt_OPT *a)
{
    switch (a->form)
    {
        case ASTNS::VarStmt_OPT::Form::EMPTY:
            pai("VarStmt_OPT EMPTY\n");
            ++indent;
            break;
    }
    --indent;
}
// This code was autogenerated - see the utils/ directory
// PRINTVISITOR END

void ASTNS::PrintVisitor::pai(std::string &s)
{
    for (auto i = s.begin(); i != s.end(); ++i)
    {
        if (pindent)
            for (int j = 0; j < indent; ++j)
                ostream << "  ";

        pindent = false;
        ostream << *i;

        if (*i == '\n')
            pindent = true;
    }
}
void ASTNS::PrintVisitor::pai(std::string &&s)
{
    pai(s);
}

ASTNS::PrintVisitor::PrintVisitor(llvm::raw_ostream &ostream): indent(0), ostream(ostream) {}
