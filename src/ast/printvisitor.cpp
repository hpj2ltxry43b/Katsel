#include "ast/printvisitor.h"

#include <iostream>
#include <string>

// PRINTVISITOR START
// The following code was autogenerated - see the utils/ directory
void ASTNS::PrintVisitor::visitCU(ASTNS::CU *a)
{
    pai("CU\n");
    ++indent;
    pai("std::unique_ptr<DeclList> decls = ");
    if (a->decls)
        a->decls->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitDeclList(ASTNS::DeclList *a)
{
    pai("DeclList\n");
    ++indent;
    pai("std::vector<std::unique_ptr<Decl>> decls = ");
    pai("\"");
    pai(std::string(a->decls.start, a->decls.end));
    pai("\"\n");
    --indent;
}
void ASTNS::PrintVisitor::visitFunctionDecl(ASTNS::FunctionDecl *a)
{
    pai("FunctionDecl\n");
    ++indent;
    pai("std::unique_ptr<Type> retty = ");
    if (a->retty)
        a->retty->accept(this);
    else
        pai("nullptr\n");
    pai("Token name = ");
    pai("\"");
    pai(std::string(a->name.start, a->name.end));
    pai("\"\n");
    pai("std::unique_ptr<ParamList> params = ");
    if (a->params)
        a->params->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmt(ASTNS::VarStmt *a)
{
    pai("VarStmt\n");
    ++indent;
    pai("std::unique_ptr<Type> type = ");
    if (a->type)
        a->type->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<VarStmtItemList> assignments = ");
    if (a->assignments)
        a->assignments->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmtItem(ASTNS::VarStmtItem *a)
{
    pai("VarStmtItem\n");
    ++indent;
    pai("Token name = ");
    pai("\"");
    pai(std::string(a->name.start, a->name.end));
    pai("\"\n");
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitVarStmtItemList(ASTNS::VarStmtItemList *a)
{
    pai("VarStmtItemList\n");
    ++indent;
    pai("std::vector<std::unique_ptr<VarStmtItem>> vis = ");
    pai("\"");
    pai(std::string(a->vis.start, a->vis.end));
    pai("\"\n");
    --indent;
}
void ASTNS::PrintVisitor::visitExprStmt(ASTNS::ExprStmt *a)
{
    pai("ExprStmt\n");
    ++indent;
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitRetStmt(ASTNS::RetStmt *a)
{
    pai("RetStmt\n");
    ++indent;
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitBlock(ASTNS::Block *a)
{
    pai("Block\n");
    ++indent;
    pai("std::unique_ptr<StmtList> stmts = ");
    if (a->stmts)
        a->stmts->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> implRet = ");
    if (a->implRet)
        a->implRet->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitStmtList(ASTNS::StmtList *a)
{
    pai("StmtList\n");
    ++indent;
    pai("std::vector<std::unique_ptr<Stmt>> stmts = ");
    pai("\"");
    pai(std::string(a->stmts.start, a->stmts.end));
    pai("\"\n");
    --indent;
}
void ASTNS::PrintVisitor::visitImplRet(ASTNS::ImplRet *a)
{
    pai("ImplRet\n");
    ++indent;
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitPrimitiveType(ASTNS::PrimitiveType *a)
{
    pai("PrimitiveType\n");
    ++indent;
    pai("Token ty = ");
    pai("\"");
    pai(std::string(a->ty.start, a->ty.end));
    pai("\"\n");
    --indent;
}
void ASTNS::PrintVisitor::visitArg(ASTNS::Arg *a)
{
    pai("Arg\n");
    ++indent;
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitArgList(ASTNS::ArgList *a)
{
    pai("ArgList\n");
    ++indent;
    pai("std::vector<std::unique_ptr<Arg>> args = ");
    pai("\"");
    pai(std::string(a->args.start, a->args.end));
    pai("\"\n");
    --indent;
}
void ASTNS::PrintVisitor::visitParam(ASTNS::Param *a)
{
    pai("Param\n");
    ++indent;
    pai("std::unique_ptr<Type> ty = ");
    if (a->ty)
        a->ty->accept(this);
    else
        pai("nullptr\n");
    pai("Token name = ");
    pai("\"");
    pai(std::string(a->name.start, a->name.end));
    pai("\"\n");
    --indent;
}
void ASTNS::PrintVisitor::visitParamList(ASTNS::ParamList *a)
{
    pai("ParamList\n");
    ++indent;
    pai("std::vector<std::unique_ptr<Param>> params = ");
    pai("\"");
    pai(std::string(a->params.start, a->params.end));
    pai("\"\n");
    --indent;
}
void ASTNS::PrintVisitor::visitIfExpr(ASTNS::IfExpr *a)
{
    pai("IfExpr\n");
    ++indent;
    pai("std::unique_ptr<Expr> cond = ");
    if (a->cond)
        a->cond->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> trues = ");
    if (a->trues)
        a->trues->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> falses = ");
    if (a->falses)
        a->falses->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitForExpr(ASTNS::ForExpr *a)
{
    pai("ForExpr\n");
    ++indent;
    pai("std::unique_ptr<VarStmt> start = ");
    if (a->start)
        a->start->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> cond = ");
    if (a->cond)
        a->cond->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> increment = ");
    if (a->increment)
        a->increment->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> body = ");
    if (a->body)
        a->body->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitAssignmentExpr(ASTNS::AssignmentExpr *a)
{
    pai("AssignmentExpr\n");
    ++indent;
    pai("std::unique_ptr<Expr> target = ");
    if (a->target)
        a->target->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitShortCircuitExpr(ASTNS::ShortCircuitExpr *a)
{
    pai("ShortCircuitExpr\n");
    ++indent;
    pai("std::unique_ptr<Expr> lhs = ");
    if (a->lhs)
        a->lhs->accept(this);
    else
        pai("nullptr\n");
    pai("Token op = ");
    pai("\"");
    pai(std::string(a->op.start, a->op.end));
    pai("\"\n");
    pai("std::unique_ptr<Expr> rhs = ");
    if (a->rhs)
        a->rhs->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitBinaryExpr(ASTNS::BinaryExpr *a)
{
    pai("BinaryExpr\n");
    ++indent;
    pai("std::unique_ptr<Expr> lhs = ");
    if (a->lhs)
        a->lhs->accept(this);
    else
        pai("nullptr\n");
    pai("Token op = ");
    pai("\"");
    pai(std::string(a->op.start, a->op.end));
    pai("\"\n");
    pai("std::unique_ptr<Expr> rhs = ");
    if (a->rhs)
        a->rhs->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitCastExpr(ASTNS::CastExpr *a)
{
    pai("CastExpr\n");
    ++indent;
    pai("std::unique_ptr<Type> castto = ");
    if (a->castto)
        a->castto->accept(this);
    else
        pai("nullptr\n");
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitUnaryExpr(ASTNS::UnaryExpr *a)
{
    pai("UnaryExpr\n");
    ++indent;
    pai("Token op = ");
    pai("\"");
    pai(std::string(a->op.start, a->op.end));
    pai("\"\n");
    pai("std::unique_ptr<Expr> expr = ");
    if (a->expr)
        a->expr->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitCallExpr(ASTNS::CallExpr *a)
{
    pai("CallExpr\n");
    ++indent;
    pai("std::unique_ptr<Expr> callee = ");
    if (a->callee)
        a->callee->accept(this);
    else
        pai("nullptr\n");
    pai("Token oparn = ");
    pai("\"");
    pai(std::string(a->oparn.start, a->oparn.end));
    pai("\"\n");
    pai("std::unique_ptr<ArgList> args = ");
    if (a->args)
        a->args->accept(this);
    else
        pai("nullptr\n");
    --indent;
}
void ASTNS::PrintVisitor::visitPrimaryExpr(ASTNS::PrimaryExpr *a)
{
    pai("PrimaryExpr\n");
    ++indent;
    pai("Token value = ");
    pai("\"");
    pai(std::string(a->value.start, a->value.end));
    pai("\"\n");
    --indent;
}
// This code was autogenerated - see the utils/ directory
// PRINTVISITOR END

void ASTNS::PrintVisitor::pai(std::string &s)
{
    for (auto i = s.begin(); i != s.end(); ++i)
    {
        if (pindent)
            for (int j = 0; j < indent; ++j)
                ostream << "  ";

        pindent = false;
        ostream << *i;

        if (*i == '\n')
            pindent = true;
    }
}
void ASTNS::PrintVisitor::pai(std::string &&s)
{
    pai(s);
}

ASTNS::PrintVisitor::PrintVisitor(llvm::raw_ostream &ostream): indent(0), ostream(ostream) {}
