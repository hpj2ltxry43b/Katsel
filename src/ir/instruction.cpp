#include "ir/instruction.h"
#include "ir/value.h"
#include "ir/visitor.h"
#include <ostream>

// INSTR CPP START

// The following code was autogenerated - see the utils/ directory
IR::Instrs::Store::Store(Register *target, Value *value): target(target), value(value) {}
void IR::Instrs::Store::accept(InstructionVisitor *v) { v->visitStore(this); }
IR::Instrs::Or::Or(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::Or::accept(InstructionVisitor *v) { v->visitOr(this); }
IR::Instrs::And::And(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::And::accept(InstructionVisitor *v) { v->visitAnd(this); }
IR::Instrs::IntCmpNE::IntCmpNE(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::IntCmpNE::accept(InstructionVisitor *v) { v->visitIntCmpNE(this); }
IR::Instrs::IntCmpEQ::IntCmpEQ(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::IntCmpEQ::accept(InstructionVisitor *v) { v->visitIntCmpEQ(this); }
IR::Instrs::IntCmpULT::IntCmpULT(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::IntCmpULT::accept(InstructionVisitor *v) { v->visitIntCmpULT(this); }
IR::Instrs::IntCmpUGT::IntCmpUGT(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::IntCmpUGT::accept(InstructionVisitor *v) { v->visitIntCmpUGT(this); }
IR::Instrs::IntCmpULE::IntCmpULE(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::IntCmpULE::accept(InstructionVisitor *v) { v->visitIntCmpULE(this); }
IR::Instrs::IntCmpUGE::IntCmpUGE(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::IntCmpUGE::accept(InstructionVisitor *v) { v->visitIntCmpUGE(this); }
IR::Instrs::FloatCmpNE::FloatCmpNE(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::FloatCmpNE::accept(InstructionVisitor *v) { v->visitFloatCmpNE(this); }
IR::Instrs::FloatCmpEQ::FloatCmpEQ(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::FloatCmpEQ::accept(InstructionVisitor *v) { v->visitFloatCmpEQ(this); }
IR::Instrs::FloatCmpULT::FloatCmpULT(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::FloatCmpULT::accept(InstructionVisitor *v) { v->visitFloatCmpULT(this); }
IR::Instrs::FloatCmpUGT::FloatCmpUGT(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::FloatCmpUGT::accept(InstructionVisitor *v) { v->visitFloatCmpUGT(this); }
IR::Instrs::FloatCmpULE::FloatCmpULE(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::FloatCmpULE::accept(InstructionVisitor *v) { v->visitFloatCmpULE(this); }
IR::Instrs::FloatCmpUGE::FloatCmpUGE(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::FloatCmpUGE::accept(InstructionVisitor *v) { v->visitFloatCmpUGE(this); }
IR::Instrs::BitXor::BitXor(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::BitXor::accept(InstructionVisitor *v) { v->visitBitXor(this); }
IR::Instrs::BitOr::BitOr(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::BitOr::accept(InstructionVisitor *v) { v->visitBitOr(this); }
IR::Instrs::BitAnd::BitAnd(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::BitAnd::accept(InstructionVisitor *v) { v->visitBitAnd(this); }
IR::Instrs::BitNot::BitNot(Register *target, Value *op): target(target), op(op) {}
void IR::Instrs::BitNot::accept(InstructionVisitor *v) { v->visitBitNot(this); }
IR::Instrs::ShiftR::ShiftR(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::ShiftR::accept(InstructionVisitor *v) { v->visitShiftR(this); }
IR::Instrs::ShiftL::ShiftL(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::ShiftL::accept(InstructionVisitor *v) { v->visitShiftL(this); }
IR::Instrs::Add::Add(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::Add::accept(InstructionVisitor *v) { v->visitAdd(this); }
IR::Instrs::Sub::Sub(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::Sub::accept(InstructionVisitor *v) { v->visitSub(this); }
IR::Instrs::Mult::Mult(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::Mult::accept(InstructionVisitor *v) { v->visitMult(this); }
IR::Instrs::Div::Div(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::Div::accept(InstructionVisitor *v) { v->visitDiv(this); }
IR::Instrs::Mod::Mod(Register *target, Value *lhs, Value *rhs): target(target), lhs(lhs), rhs(rhs) {}
void IR::Instrs::Mod::accept(InstructionVisitor *v) { v->visitMod(this); }
IR::Instrs::Neg::Neg(Register *target, Value *op): target(target), op(op) {}
void IR::Instrs::Neg::accept(InstructionVisitor *v) { v->visitNeg(this); }
IR::Instrs::Trunc::Trunc(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::Trunc::accept(InstructionVisitor *v) { v->visitTrunc(this); }
IR::Instrs::ZeroExt::ZeroExt(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::ZeroExt::accept(InstructionVisitor *v) { v->visitZeroExt(this); }
IR::Instrs::SignExt::SignExt(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::SignExt::accept(InstructionVisitor *v) { v->visitSignExt(this); }
IR::Instrs::FloatTrunc::FloatTrunc(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::FloatTrunc::accept(InstructionVisitor *v) { v->visitFloatTrunc(this); }
IR::Instrs::FloatExt::FloatExt(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::FloatExt::accept(InstructionVisitor *v) { v->visitFloatExt(this); }
IR::Instrs::SIntToFloat::SIntToFloat(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::SIntToFloat::accept(InstructionVisitor *v) { v->visitSIntToFloat(this); }
IR::Instrs::UIntToFloat::UIntToFloat(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::UIntToFloat::accept(InstructionVisitor *v) { v->visitUIntToFloat(this); }
IR::Instrs::FloatToSInt::FloatToSInt(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::FloatToSInt::accept(InstructionVisitor *v) { v->visitFloatToSInt(this); }
IR::Instrs::FloatToUInt::FloatToUInt(Register *target, Value *op, Type *newt): target(target), op(op), newt(newt) {}
void IR::Instrs::FloatToUInt::accept(InstructionVisitor *v) { v->visitFloatToUInt(this); }
IR::Instrs::Return::Return(Value *value): value(value) {}
void IR::Instrs::Return::accept(InstructionVisitor *v) { v->visitReturn(this); }
IR::Instrs::Call::Call(Register *reg, Function *f, std::vector<Value*> args): reg(reg), f(f), args(args) {}
void IR::Instrs::Call::accept(InstructionVisitor *v) { v->visitCall(this); }
IR::Instrs::GotoBr::GotoBr(Block *to): to(to) {}
void IR::Instrs::GotoBr::accept(BrVisitor *v) { v->visitGotoBr(this); }
IR::Instrs::CondBr::CondBr(Value *v, Block *trueB, Block *falseB): v(v), trueB(trueB), falseB(falseB) {}
void IR::Instrs::CondBr::accept(BrVisitor *v) { v->visitCondBr(this); }
// This code was autogenerated - see the utils/ directory

// INSTR CPP END
