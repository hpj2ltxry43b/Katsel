#include "ir/printer.h"
#include "ir/value.h"

IR::Printer::Printer(std::ostream &ostream): ostream(ostream) {}
// INSTR PRINTER START

// The following code was autogenerated - see the utils/ directory
void IR::Printer::visitStore(IR::Instrs::Store *i)
{
    ostream << "store ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->value->stringify();
    ostream << std::endl;
}
void IR::Printer::visitOr(IR::Instrs::Or *i)
{
    ostream << "or ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitAnd(IR::Instrs::And *i)
{
    ostream << "and ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitIntCmpNE(IR::Instrs::IntCmpNE *i)
{
    ostream << "intcmpne ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitIntCmpEQ(IR::Instrs::IntCmpEQ *i)
{
    ostream << "intcmpeq ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitIntCmpULT(IR::Instrs::IntCmpULT *i)
{
    ostream << "intcmpult ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitIntCmpUGT(IR::Instrs::IntCmpUGT *i)
{
    ostream << "intcmpugt ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitIntCmpULE(IR::Instrs::IntCmpULE *i)
{
    ostream << "intcmpule ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitIntCmpUGE(IR::Instrs::IntCmpUGE *i)
{
    ostream << "intcmpuge ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatCmpNE(IR::Instrs::FloatCmpNE *i)
{
    ostream << "floatcmpne ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatCmpEQ(IR::Instrs::FloatCmpEQ *i)
{
    ostream << "floatcmpeq ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatCmpULT(IR::Instrs::FloatCmpULT *i)
{
    ostream << "floatcmpult ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatCmpUGT(IR::Instrs::FloatCmpUGT *i)
{
    ostream << "floatcmpugt ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatCmpULE(IR::Instrs::FloatCmpULE *i)
{
    ostream << "floatcmpule ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatCmpUGE(IR::Instrs::FloatCmpUGE *i)
{
    ostream << "floatcmpuge ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitBitXor(IR::Instrs::BitXor *i)
{
    ostream << "bitxor ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitBitOr(IR::Instrs::BitOr *i)
{
    ostream << "bitor ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitBitAnd(IR::Instrs::BitAnd *i)
{
    ostream << "bitand ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitBitNot(IR::Instrs::BitNot *i)
{
    ostream << "bitnot ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << std::endl;
}
void IR::Printer::visitShiftR(IR::Instrs::ShiftR *i)
{
    ostream << "shiftr ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitShiftL(IR::Instrs::ShiftL *i)
{
    ostream << "shiftl ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitAdd(IR::Instrs::Add *i)
{
    ostream << "add ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitSub(IR::Instrs::Sub *i)
{
    ostream << "sub ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitMult(IR::Instrs::Mult *i)
{
    ostream << "mult ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitDiv(IR::Instrs::Div *i)
{
    ostream << "div ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitMod(IR::Instrs::Mod *i)
{
    ostream << "mod ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->lhs->stringify();
    ostream << " ";
    ostream << i->rhs->stringify();
    ostream << std::endl;
}
void IR::Printer::visitNeg(IR::Instrs::Neg *i)
{
    ostream << "neg ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << std::endl;
}
void IR::Printer::visitTrunc(IR::Instrs::Trunc *i)
{
    ostream << "trunc ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitZeroExt(IR::Instrs::ZeroExt *i)
{
    ostream << "zeroext ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitSignExt(IR::Instrs::SignExt *i)
{
    ostream << "signext ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatTrunc(IR::Instrs::FloatTrunc *i)
{
    ostream << "floattrunc ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatExt(IR::Instrs::FloatExt *i)
{
    ostream << "floatext ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitSIntToFloat(IR::Instrs::SIntToFloat *i)
{
    ostream << "sinttofloat ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitUIntToFloat(IR::Instrs::UIntToFloat *i)
{
    ostream << "uinttofloat ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatToSInt(IR::Instrs::FloatToSInt *i)
{
    ostream << "floattosint ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitFloatToUInt(IR::Instrs::FloatToUInt *i)
{
    ostream << "floattouint ";
    ostream << i->target->stringify();
    ostream << " ";
    ostream << i->op->stringify();
    ostream << " ";
    ostream << i->newt->stringify();
    ostream << std::endl;
}
void IR::Printer::visitReturn(IR::Instrs::Return *i)
{
    ostream << "return ";
    ostream << (i->value ? i->value->stringify() : "void");
    ostream << std::endl;
}
void IR::Printer::visitCall(IR::Instrs::Call *i)
{
    ostream << "call ";
    ostream << (i->reg ? i->reg->stringify() : "void");
    ostream << " ";
    ostream << i->f->stringify();
    ostream << " ";
    for (IR::Value const *v : i->args)
{
    ostream << v->stringify() << " ";
}
    ostream << std::endl;
}
void IR::Printer::visitGotoBr(IR::Instrs::GotoBr *i)
{
    ostream << "gotobr ";
    ostream << i->b->name;
    ostream << std::endl;
}
void IR::Printer::visitCondBr(IR::Instrs::CondBr *i)
{
    ostream << "condbr ";
    ostream << i->v->stringify();
    ostream << " ";
    ostream << i->trueb->name;
    ostream << " ";
    ostream << i->falseb->name;
    ostream << std::endl;
}
// This code was autogenerated - see the utils/ directory

// INSTR PRINTER END
