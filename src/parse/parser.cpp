#include "parse/parser.h"

#include "lex/tokentype.h"
#include "message/errors.h"

#include <sstream>
#include <stack>

Parser::Parser(Lexer &l, File &sourcefile): lexer(l), sourcefile(sourcefile) {}

// get goto {{{
// GETGOTO START

// The following code was autogenerated - see the utils/ directory
template <> size_t Parser::getGoto<ASTNS::Declarations>(size_t state)
{
    switch (state)
    {
        case 0:
            return 1;
        default:
            reportAbortNoh("retrieve goto of nonterminal declarations in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Decl>(size_t state)
{
    switch (state)
    {
        case 0:
            return 2;
        case 1:
            return 18;
        default:
            reportAbortNoh("retrieve goto of nonterminal decl in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Function>(size_t state)
{
    switch (state)
    {
        case 0:
        case 1:
            return 3;
        default:
            reportAbortNoh("retrieve goto of nonterminal function in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Type>(size_t state)
{
    switch (state)
    {
        case 0:
        case 1:
            return 4;
        case 20:
            return 23;
        case 27:
            return 69;
        case 35:
            return 72;
        default:
            reportAbortNoh("retrieve goto of nonterminal type in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Block>(size_t state)
{
    switch (state)
    {
        case 21:
            return 24;
        case 25:
        case 29:
            return 34;
        case 26:
            return 68;
        default:
            reportAbortNoh("retrieve goto of nonterminal block in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Paramlist>(size_t state)
{
    switch (state)
    {
        case 20:
            return 22;
        default:
            reportAbortNoh("retrieve goto of nonterminal paramlist in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Stmts>(size_t state)
{
    switch (state)
    {
        case 25:
            return 29;
        default:
            reportAbortNoh("retrieve goto of nonterminal stmts in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Stmt>(size_t state)
{
    switch (state)
    {
        case 25:
            return 30;
        case 29:
            return 71;
        default:
            reportAbortNoh("retrieve goto of nonterminal stmt in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Varstmt>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
            return 31;
        default:
            reportAbortNoh("retrieve goto of nonterminal varstmt in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Exprstmt>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
            return 32;
        default:
            reportAbortNoh("retrieve goto of nonterminal exprstmt in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Retstmt>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
            return 33;
        default:
            reportAbortNoh("retrieve goto of nonterminal retstmt in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Varstmtfinisher>(size_t state)
{
    switch (state)
    {
        case 72:
            return 101;
        default:
            reportAbortNoh("retrieve goto of nonterminal varstmtfinisher in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Expression>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
            return 36;
        case 37:
            return 74;
        case 67:
            return 99;
        case 98:
            return 126;
        case 130:
            return 135;
        case 133:
            return 137;
        case 138:
            return 139;
        default:
            reportAbortNoh("retrieve goto of nonterminal expression in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Args>(size_t state)
{
    switch (state)
    {
        case 98:
            return 124;
        default:
            reportAbortNoh("retrieve goto of nonterminal args in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Assignmentexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 67:
        case 98:
        case 130:
        case 133:
        case 138:
            return 38;
        case 75:
            return 104;
        default:
            reportAbortNoh("retrieve goto of nonterminal assignmentexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Ternaryexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 67:
        case 75:
        case 98:
        case 130:
        case 133:
        case 138:
            return 39;
        case 131:
            return 136;
        default:
            reportAbortNoh("retrieve goto of nonterminal ternaryexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Binorexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 67:
        case 75:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 40;
        case 76:
            return 105;
        default:
            reportAbortNoh("retrieve goto of nonterminal binorexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Binandexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 67:
        case 75:
        case 76:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 41;
        case 77:
            return 106;
        default:
            reportAbortNoh("retrieve goto of nonterminal binandexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Binnotexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 67:
        case 75:
        case 76:
        case 77:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 42;
        case 43:
            return 79;
        case 78:
            return 107;
        default:
            reportAbortNoh("retrieve goto of nonterminal binnotexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Compeqexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 44;
        default:
            reportAbortNoh("retrieve goto of nonterminal compeqexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Complgtexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 45;
        case 80:
            return 108;
        case 81:
            return 109;
        default:
            reportAbortNoh("retrieve goto of nonterminal complgtexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Bitxorexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 46;
        case 82:
            return 110;
        case 83:
            return 111;
        case 84:
            return 112;
        case 85:
            return 113;
        default:
            reportAbortNoh("retrieve goto of nonterminal bitxorexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Bitorexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 47;
        case 86:
            return 114;
        default:
            reportAbortNoh("retrieve goto of nonterminal bitorexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Bitandexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 48;
        case 87:
            return 115;
        default:
            reportAbortNoh("retrieve goto of nonterminal bitandexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Bitshiftexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 49;
        case 88:
            return 116;
        default:
            reportAbortNoh("retrieve goto of nonterminal bitshiftexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Additionexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 50;
        case 89:
            return 117;
        case 90:
            return 118;
        default:
            reportAbortNoh("retrieve goto of nonterminal additionexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Multexpr>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 51;
        case 91:
            return 119;
        case 92:
            return 120;
        default:
            reportAbortNoh("retrieve goto of nonterminal multexpr in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Unary>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 52;
        case 53:
            return 96;
        case 54:
            return 97;
        case 93:
            return 121;
        case 94:
            return 122;
        case 95:
            return 123;
        default:
            reportAbortNoh("retrieve goto of nonterminal unary in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Call>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 53:
        case 54:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 55;
        default:
            reportAbortNoh("retrieve goto of nonterminal call in invalid state");
    }
}
template <> size_t Parser::getGoto<ASTNS::Primary>(size_t state)
{
    switch (state)
    {
        case 25:
        case 29:
        case 37:
        case 43:
        case 53:
        case 54:
        case 67:
        case 75:
        case 76:
        case 77:
        case 78:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 98:
        case 130:
        case 131:
        case 133:
        case 138:
            return 56;
        default:
            reportAbortNoh("retrieve goto of nonterminal primary in invalid state");
    }
}
// This code was autogenerated - see the utils/ directory

// GETGOTO END
// }}}

std::unique_ptr<ASTNS::Declarations> Parser::parse()
{
    struct stackitem
    {
        int state;
        stackitem(size_t state): state(state) {}
        virtual void dummy() {}
    };

    struct tokstackitem : public stackitem
    {
        Token tok;
        tokstackitem(size_t state, Token tok): stackitem(state), tok(tok) {}
    };
    
    struct aststackitem : public stackitem
    {
        std::unique_ptr<ASTNS::AST> ast;
        aststackitem(size_t state, std::unique_ptr<ASTNS::AST> ast): stackitem(state), ast(std::move(ast)) {}
    };

    // parser loop {{{
    // PARSERLOOP START

// The following code was autogenerated - see the utils/ directory
#define SHIFT(newstate) \
    lasttok = lookahead;\
    stack.push(std::make_unique<tokstackitem>(newstate, lasttok));\
    lookahead = consume();
#define REDUCET(n) \
    std::unique_ptr<stackitem> _a ## n = std::move(stack.top()); stack.pop();\
    tokstackitem *si ## n = dynamic_cast<tokstackitem*>(_a ## n .get());\
    Token a ## n (si ## n ->tok);
#define REDUCEA(n) \
    std::unique_ptr<stackitem> _a ## n = std::move(stack.top()); stack.pop();\
    aststackitem *si ## n = dynamic_cast<aststackitem*>(_a ## n .get());\
    std::unique_ptr<ASTNS::AST> a ## n (std::move(si ## n ->ast));
#define SHIFTON(ty, n) \
    case ty: \
        {SHIFT(n)} break;
#define DEFAULTINVALID2(justparsed, expected) \
    default: \
        invalidSyntax(justparsed, expected, lookahead, lasttok);\
        done = true;\
        break;
#define DEFAULTINVALID3(justparsed, expected, whileparsing) \
    default: \
        invalidSyntax(justparsed, expected, whileparsing, lookahead, lasttok);\
        done = true;\
        break;
#define REDUCESKIP(cl) \
    {\
        std::unique_ptr<stackitem> popped (std::move(stack.top())); stack.pop();\
        aststackitem *asi = dynamic_cast<aststackitem*>(popped.get());\
        size_t newstate = getGoto<ASTNS::cl>(stack.top()->state);\
        stack.push(std::make_unique<aststackitem>(newstate, std::move(asi->ast)));\
    }
    bool done = false;
    Token lookahead (consume());
    Token lasttok = lookahead;
    std::stack<std::unique_ptr<stackitem>> stack;
    stack.push(std::make_unique<stackitem>(0));
    while (!done)
    {
        switch (stack.top()->state)
        {
            case 0:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 14)
                    SHIFTON(TokenType::CHAR, 17)
                    SHIFTON(TokenType::DOUBLE, 15)
                    SHIFTON(TokenType::FLOAT, 13)
                    SHIFTON(TokenType::SINT16, 10)
                    SHIFTON(TokenType::SINT32, 11)
                    SHIFTON(TokenType::SINT64, 12)
                    SHIFTON(TokenType::SINT8, 9)
                    SHIFTON(TokenType::UINT16, 6)
                    SHIFTON(TokenType::UINT32, 7)
                    SHIFTON(TokenType::UINT64, 8)
                    SHIFTON(TokenType::UINT8, 5)
                    SHIFTON(TokenType::VOID, 16)
                    DEFAULTINVALID3("beginning", "declaration list", "compilation unit")
                }
                break;
            case 1:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 14)
                    SHIFTON(TokenType::EOF_, 14)
                    SHIFTON(TokenType::CHAR, 17)
                    SHIFTON(TokenType::DOUBLE, 15)
                    SHIFTON(TokenType::FLOAT, 13)
                    SHIFTON(TokenType::SINT16, 10)
                    SHIFTON(TokenType::SINT32, 11)
                    SHIFTON(TokenType::SINT64, 12)
                    SHIFTON(TokenType::SINT8, 9)
                    SHIFTON(TokenType::UINT16, 6)
                    SHIFTON(TokenType::UINT32, 7)
                    SHIFTON(TokenType::UINT64, 8)
                    SHIFTON(TokenType::UINT8, 5)
                    SHIFTON(TokenType::VOID, 16)
                    DEFAULTINVALID2("declaration list", "declaration")
                }
                break;
            case 2:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                    case TokenType::CHAR:
                    case TokenType::DOUBLE:
                    case TokenType::EOF_:
                    case TokenType::FLOAT:
                    case TokenType::SINT16:
                    case TokenType::SINT32:
                    case TokenType::SINT64:
                    case TokenType::SINT8:
                    case TokenType::UINT16:
                    case TokenType::UINT32:
                    case TokenType::UINT64:
                    case TokenType::UINT8:
                    case TokenType::VOID:
                        REDUCESKIP(Declarations);
                        break;
                    DEFAULTINVALID3("declaration", "nothing", "declaration list")
                }
                break;
            case 3:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                    case TokenType::CHAR:
                    case TokenType::DOUBLE:
                    case TokenType::EOF_:
                    case TokenType::FLOAT:
                    case TokenType::SINT16:
                    case TokenType::SINT32:
                    case TokenType::SINT64:
                    case TokenType::SINT8:
                    case TokenType::UINT16:
                    case TokenType::UINT32:
                    case TokenType::UINT64:
                    case TokenType::UINT8:
                    case TokenType::VOID:
                        REDUCESKIP(Decl);
                        break;
                    DEFAULTINVALID3("function declaration", "nothing", "declaration")
                }
                break;
            case 4:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 19)
                    DEFAULTINVALID3("type specifier", "TokenType::IDENTIFIER", "function declaration")
                }
                break;
            case 5:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::UINT8", "nothing", "type specifier")
                }
                break;
            case 6:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::UINT16", "nothing", "type specifier")
                }
                break;
            case 7:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::UINT32", "nothing", "type specifier")
                }
                break;
            case 8:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::UINT64", "nothing", "type specifier")
                }
                break;
            case 9:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::SINT8", "nothing", "type specifier")
                }
                break;
            case 10:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::SINT16", "nothing", "type specifier")
                }
                break;
            case 11:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::SINT32", "nothing", "type specifier")
                }
                break;
            case 12:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::SINT64", "nothing", "type specifier")
                }
                break;
            case 13:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::FLOAT", "nothing", "type specifier")
                }
                break;
            case 14:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::BOOL", "nothing", "type specifier")
                }
                break;
            case 15:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::DOUBLE", "nothing", "type specifier")
                }
                break;
            case 16:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::VOID", "nothing", "type specifier")
                }
                break;
            case 17:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Type>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Type>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::CHAR", "nothing", "type specifier")
                }
                break;
            case 18:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                    case TokenType::CHAR:
                    case TokenType::DOUBLE:
                    case TokenType::EOF_:
                    case TokenType::FLOAT:
                    case TokenType::SINT16:
                    case TokenType::SINT32:
                    case TokenType::SINT64:
                    case TokenType::SINT8:
                    case TokenType::UINT16:
                    case TokenType::UINT32:
                    case TokenType::UINT64:
                    case TokenType::UINT8:
                    case TokenType::VOID:
                        {
                            REDUCEA(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Declarations>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Declarations>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("declaration", "nothing", "declaration list")
                }
                break;
            case 19:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::OPARN, 20)
                    DEFAULTINVALID3("TokenType::IDENTIFIER", "TokenType::OPARN", "function declaration")
                }
                break;
            case 20:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 14)
                    SHIFTON(TokenType::CHAR, 17)
                    SHIFTON(TokenType::CPARN, 21)
                    SHIFTON(TokenType::DOUBLE, 15)
                    SHIFTON(TokenType::FLOAT, 13)
                    SHIFTON(TokenType::SINT16, 10)
                    SHIFTON(TokenType::SINT32, 11)
                    SHIFTON(TokenType::SINT64, 12)
                    SHIFTON(TokenType::SINT8, 9)
                    SHIFTON(TokenType::UINT16, 6)
                    SHIFTON(TokenType::UINT32, 7)
                    SHIFTON(TokenType::UINT64, 8)
                    SHIFTON(TokenType::UINT8, 5)
                    SHIFTON(TokenType::VOID, 16)
                    DEFAULTINVALID3("TokenType::OPARN", "either TokenType::CPARN or parameter list", "function declaration")
                }
                break;
            case 21:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::OCURB, 25)
                    DEFAULTINVALID3("TokenType::CPARN", "code block", "function declaration")
                }
                break;
            case 22:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COMMA, 27)
                    SHIFTON(TokenType::CPARN, 26)
                    DEFAULTINVALID2("parameter list", "either TokenType::COMMA or TokenType::CPARN")
                }
                break;
            case 23:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 28)
                    DEFAULTINVALID3("type specifier", "TokenType::IDENTIFIER", "parameter list")
                }
                break;
            case 24:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                    case TokenType::CHAR:
                    case TokenType::DOUBLE:
                    case TokenType::EOF_:
                    case TokenType::FLOAT:
                    case TokenType::SINT16:
                    case TokenType::SINT32:
                    case TokenType::SINT64:
                    case TokenType::SINT8:
                    case TokenType::UINT16:
                    case TokenType::UINT32:
                    case TokenType::UINT64:
                    case TokenType::UINT8:
                    case TokenType::VOID:
                        {
                            REDUCEA(4)
                            REDUCET(3)
                            REDUCET(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4));
                            size_t newstate = getGoto<ASTNS::Function>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("code block", "nothing", "function declaration")
                }
                break;
            case 25:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OCURB, 25)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::RETURN, 37)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    SHIFTON(TokenType::VAR, 35)
                    DEFAULTINVALID3("TokenType::OCURB", "statements", "code block")
                }
                break;
            case 26:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::OCURB, 25)
                    DEFAULTINVALID3("TokenType::CPARN", "code block", "function declaration")
                }
                break;
            case 27:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 14)
                    SHIFTON(TokenType::CHAR, 17)
                    SHIFTON(TokenType::DOUBLE, 15)
                    SHIFTON(TokenType::FLOAT, 13)
                    SHIFTON(TokenType::SINT16, 10)
                    SHIFTON(TokenType::SINT32, 11)
                    SHIFTON(TokenType::SINT64, 12)
                    SHIFTON(TokenType::SINT8, 9)
                    SHIFTON(TokenType::UINT16, 6)
                    SHIFTON(TokenType::UINT32, 7)
                    SHIFTON(TokenType::UINT64, 8)
                    SHIFTON(TokenType::UINT8, 5)
                    SHIFTON(TokenType::VOID, 16)
                    DEFAULTINVALID3("TokenType::COMMA", "type specifier", "parameter list")
                }
                break;
            case 28:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Paramlist>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Paramlist>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::IDENTIFIER", "nothing", "parameter list")
                }
                break;
            case 29:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CCURB, 70)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OCURB, 25)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::RETURN, 37)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    SHIFTON(TokenType::VAR, 35)
                    DEFAULTINVALID2("statements", "either TokenType::CCURB or statement")
                }
                break;
            case 30:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmts);
                        break;
                    DEFAULTINVALID3("statement", "nothing", "statements")
                }
                break;
            case 31:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("variable statement", "nothing", "statement")
                }
                break;
            case 32:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("expression statement", "nothing", "statement")
                }
                break;
            case 33:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("return statement", "nothing", "statement")
                }
                break;
            case 34:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("code block", "nothing", "statement")
                }
                break;
            case 35:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 14)
                    SHIFTON(TokenType::CHAR, 17)
                    SHIFTON(TokenType::DOUBLE, 15)
                    SHIFTON(TokenType::FLOAT, 13)
                    SHIFTON(TokenType::SINT16, 10)
                    SHIFTON(TokenType::SINT32, 11)
                    SHIFTON(TokenType::SINT64, 12)
                    SHIFTON(TokenType::SINT8, 9)
                    SHIFTON(TokenType::UINT16, 6)
                    SHIFTON(TokenType::UINT32, 7)
                    SHIFTON(TokenType::UINT64, 8)
                    SHIFTON(TokenType::UINT8, 5)
                    SHIFTON(TokenType::VOID, 16)
                    DEFAULTINVALID3("TokenType::VAR", "type specifier", "variable statement")
                }
                break;
            case 36:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::SEMICOLON, 73)
                    DEFAULTINVALID3("expression", "TokenType::SEMICOLON", "expression statement")
                }
                break;
            case 37:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::RETURN", "expression", "return statement")
                }
                break;
            case 38:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Expression);
                        break;
                    DEFAULTINVALID3("assignment expression", "nothing", "expression")
                }
                break;
            case 39:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Assignmentexpr);
                        break;
                    SHIFTON(TokenType::EQUAL, 75)
                    DEFAULTINVALID3("ternary expression", "TokenType::EQUAL", "assignment expression")
                }
                break;
            case 40:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::EQUAL:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Ternaryexpr);
                        break;
                    SHIFTON(TokenType::DOUBLEPIPE, 77)
                    SHIFTON(TokenType::QUESTION, 76)
                    DEFAULTINVALID2("binary or expression", "either TokenType::DOUBLEPIPE or TokenType::QUESTION")
                }
                break;
            case 41:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Binorexpr);
                        break;
                    SHIFTON(TokenType::DOUBLEAMPER, 78)
                    DEFAULTINVALID2("binary and expression", "TokenType::DOUBLEAMPER")
                }
                break;
            case 42:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Binandexpr);
                        break;
                    DEFAULTINVALID3("binary not expression", "nothing", "binary and expression")
                }
                break;
            case 43:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::BANG", "binary not expression", "binary not expression")
                }
                break;
            case 44:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANGEQUAL, 80)
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Binnotexpr);
                        break;
                    SHIFTON(TokenType::DOUBLEEQUAL, 81)
                    DEFAULTINVALID2("equality expression", "either TokenType::BANGEQUAL or TokenType::DOUBLEEQUAL")
                }
                break;
            case 45:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Compeqexpr);
                        break;
                    SHIFTON(TokenType::GREATER, 83)
                    SHIFTON(TokenType::GREATEREQUAL, 85)
                    SHIFTON(TokenType::LESS, 82)
                    SHIFTON(TokenType::LESSEQUAL, 84)
                    DEFAULTINVALID2("comparison expression", "TokenType::GREATER, TokenType::GREATEREQUAL, TokenType::LESS, or TokenType::LESSEQUAL")
                }
                break;
            case 46:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Complgtexpr);
                        break;
                    SHIFTON(TokenType::CARET, 86)
                    DEFAULTINVALID2("bitwise xor expression", "TokenType::CARET")
                }
                break;
            case 47:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Bitxorexpr);
                        break;
                    SHIFTON(TokenType::PIPE, 87)
                    DEFAULTINVALID2("bitwise or expression", "TokenType::PIPE")
                }
                break;
            case 48:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::AMPER, 88)
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Bitorexpr);
                        break;
                    DEFAULTINVALID2("bitwise and expression", "TokenType::AMPER")
                }
                break;
            case 49:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Bitandexpr);
                        break;
                    SHIFTON(TokenType::DOUBLEGREATER, 89)
                    SHIFTON(TokenType::DOUBLELESS, 90)
                    DEFAULTINVALID2("bit shift expression", "either TokenType::DOUBLEGREATER or TokenType::DOUBLELESS")
                }
                break;
            case 50:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Bitshiftexpr);
                        break;
                    SHIFTON(TokenType::MINUS, 92)
                    SHIFTON(TokenType::PLUS, 91)
                    DEFAULTINVALID2("addition expression", "either TokenType::MINUS or TokenType::PLUS")
                }
                break;
            case 51:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Additionexpr);
                        break;
                    SHIFTON(TokenType::PERCENT, 95)
                    SHIFTON(TokenType::SLASH, 94)
                    SHIFTON(TokenType::STAR, 93)
                    DEFAULTINVALID2("multiplication expression", "TokenType::PERCENT, TokenType::SLASH, or TokenType::STAR")
                }
                break;
            case 52:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        REDUCESKIP(Multexpr);
                        break;
                    DEFAULTINVALID3("unary expression", "nothing", "multiplication expression")
                }
                break;
            case 53:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::TILDE", "unary expression", "unary expression")
                }
                break;
            case 54:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::MINUS", "unary expression", "unary expression")
                }
                break;
            case 55:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        REDUCESKIP(Unary);
                        break;
                    DEFAULTINVALID3("function call expression", "nothing", "unary expression")
                }
                break;
            case 56:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        REDUCESKIP(Call);
                        break;
                    SHIFTON(TokenType::OPARN, 98)
                    DEFAULTINVALID3("primary expression", "TokenType::OPARN", "function call expression")
                }
                break;
            case 57:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::TRUELIT", "nothing", "primary expression")
                }
                break;
            case 58:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::FALSELIT", "nothing", "primary expression")
                }
                break;
            case 59:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::FLOATLIT", "nothing", "primary expression")
                }
                break;
            case 60:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::NULLPTRLIT", "nothing", "primary expression")
                }
                break;
            case 61:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::DECINTLIT", "nothing", "primary expression")
                }
                break;
            case 62:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::OCTINTLIT", "nothing", "primary expression")
                }
                break;
            case 63:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::BININTLIT", "nothing", "primary expression")
                }
                break;
            case 64:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::HEXINTLIT", "nothing", "primary expression")
                }
                break;
            case 65:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::CHARLIT", "nothing", "primary expression")
                }
                break;
            case 66:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::STRINGLIT", "nothing", "primary expression")
                }
                break;
            case 67:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::OPARN", "expression", "primary expression")
                }
                break;
            case 68:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                    case TokenType::CHAR:
                    case TokenType::DOUBLE:
                    case TokenType::EOF_:
                    case TokenType::FLOAT:
                    case TokenType::SINT16:
                    case TokenType::SINT32:
                    case TokenType::SINT64:
                    case TokenType::SINT8:
                    case TokenType::UINT16:
                    case TokenType::UINT32:
                    case TokenType::UINT64:
                    case TokenType::UINT8:
                    case TokenType::VOID:
                        {
                            REDUCEA(5)
                            REDUCET(4)
                            REDUCEA(3)
                            REDUCET(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5));
                            size_t newstate = getGoto<ASTNS::Function>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("code block", "nothing", "function declaration")
                }
                break;
            case 69:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 100)
                    DEFAULTINVALID3("type specifier", "TokenType::IDENTIFIER", "parameter list")
                }
                break;
            case 70:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::BOOL:
                    case TokenType::CCURB:
                    case TokenType::CHAR:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::DOUBLE:
                    case TokenType::EOF_:
                    case TokenType::FALSELIT:
                    case TokenType::FLOAT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SINT16:
                    case TokenType::SINT32:
                    case TokenType::SINT64:
                    case TokenType::SINT8:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::UINT16:
                    case TokenType::UINT32:
                    case TokenType::UINT64:
                    case TokenType::UINT8:
                    case TokenType::VAR:
                    case TokenType::VOID:
                        {
                            REDUCET(2)
                            REDUCEA(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Block>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::CCURB", "nothing", "code block")
                }
                break;
            case 71:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCEA(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Stmts>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Stmts>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("statement", "nothing", "statements")
                }
                break;
            case 72:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 102)
                    DEFAULTINVALID3("type specifier", "variable statement assignments", "variable statement")
                }
                break;
            case 73:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Exprstmt>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Exprstmt>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::SEMICOLON", "nothing", "expression statement")
                }
                break;
            case 74:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::SEMICOLON, 103)
                    DEFAULTINVALID3("expression", "TokenType::SEMICOLON", "return statement")
                }
                break;
            case 75:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::EQUAL", "assignment expression", "assignment expression")
                }
                break;
            case 76:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::QUESTION", "binary or expression", "ternary expression")
                }
                break;
            case 77:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::DOUBLEPIPE", "binary and expression", "binary or expression")
                }
                break;
            case 78:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::DOUBLEAMPER", "binary not expression", "binary and expression")
                }
                break;
            case 79:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Binnotexpr>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Binnotexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("binary not expression", "nothing", "binary not expression")
                }
                break;
            case 80:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::BANGEQUAL", "comparison expression", "equality expression")
                }
                break;
            case 81:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::DOUBLEEQUAL", "comparison expression", "equality expression")
                }
                break;
            case 82:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::LESS", "bitwise xor expression", "comparison expression")
                }
                break;
            case 83:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::GREATER", "bitwise xor expression", "comparison expression")
                }
                break;
            case 84:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::LESSEQUAL", "bitwise xor expression", "comparison expression")
                }
                break;
            case 85:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::GREATEREQUAL", "bitwise xor expression", "comparison expression")
                }
                break;
            case 86:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::CARET", "bitwise or expression", "bitwise xor expression")
                }
                break;
            case 87:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::PIPE", "bitwise and expression", "bitwise or expression")
                }
                break;
            case 88:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::AMPER", "bit shift expression", "bitwise and expression")
                }
                break;
            case 89:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::DOUBLEGREATER", "addition expression", "bit shift expression")
                }
                break;
            case 90:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::DOUBLELESS", "addition expression", "bit shift expression")
                }
                break;
            case 91:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::PLUS", "multiplication expression", "addition expression")
                }
                break;
            case 92:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::MINUS", "multiplication expression", "addition expression")
                }
                break;
            case 93:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::STAR", "unary expression", "multiplication expression")
                }
                break;
            case 94:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::SLASH", "unary expression", "multiplication expression")
                }
                break;
            case 95:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::PERCENT", "unary expression", "multiplication expression")
                }
                break;
            case 96:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("unary expression", "nothing", "unary expression")
                }
                break;
            case 97:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("unary expression", "nothing", "unary expression")
                }
                break;
            case 98:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::CPARN, 125)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::OPARN", "either TokenType::CPARN or argument list", "function call expression")
                }
                break;
            case 99:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::CPARN, 127)
                    DEFAULTINVALID3("expression", "TokenType::CPARN", "primary expression")
                }
                break;
            case 100:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            REDUCET(3)
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Paramlist>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::Paramlist>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::IDENTIFIER", "nothing", "parameter list")
                }
                break;
            case 101:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COMMA, 129)
                    SHIFTON(TokenType::SEMICOLON, 128)
                    DEFAULTINVALID2("variable statement assignments", "either TokenType::COMMA or TokenType::SEMICOLON")
                }
                break;
            case 102:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::EQUAL, 130)
                    DEFAULTINVALID3("TokenType::IDENTIFIER", "TokenType::EQUAL", "variable statement assignments")
                }
                break;
            case 103:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(2)
                            REDUCEA(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Retstmt>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Retstmt>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::SEMICOLON", "nothing", "return statement")
                }
                break;
            case 104:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Assignmentexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Assignmentexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("assignment expression", "nothing", "assignment expression")
                }
                break;
            case 105:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COLON, 131)
                    SHIFTON(TokenType::DOUBLEPIPE, 77)
                    DEFAULTINVALID2("binary or expression", "either TokenType::COLON or TokenType::DOUBLEPIPE")
                }
                break;
            case 106:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Binorexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Binorexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::DOUBLEAMPER, 78)
                    DEFAULTINVALID2("binary and expression", "TokenType::DOUBLEAMPER")
                }
                break;
            case 107:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Binandexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Binandexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("binary not expression", "nothing", "binary and expression")
                }
                break;
            case 108:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Compeqexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Compeqexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::GREATER, 83)
                    SHIFTON(TokenType::GREATEREQUAL, 85)
                    SHIFTON(TokenType::LESS, 82)
                    SHIFTON(TokenType::LESSEQUAL, 84)
                    DEFAULTINVALID2("comparison expression", "TokenType::GREATER, TokenType::GREATEREQUAL, TokenType::LESS, or TokenType::LESSEQUAL")
                }
                break;
            case 109:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Compeqexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Compeqexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::GREATER, 83)
                    SHIFTON(TokenType::GREATEREQUAL, 85)
                    SHIFTON(TokenType::LESS, 82)
                    SHIFTON(TokenType::LESSEQUAL, 84)
                    DEFAULTINVALID2("comparison expression", "TokenType::GREATER, TokenType::GREATEREQUAL, TokenType::LESS, or TokenType::LESSEQUAL")
                }
                break;
            case 110:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Complgtexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Complgtexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 86)
                    DEFAULTINVALID2("bitwise xor expression", "TokenType::CARET")
                }
                break;
            case 111:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Complgtexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Complgtexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 86)
                    DEFAULTINVALID2("bitwise xor expression", "TokenType::CARET")
                }
                break;
            case 112:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Complgtexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Complgtexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 86)
                    DEFAULTINVALID2("bitwise xor expression", "TokenType::CARET")
                }
                break;
            case 113:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Complgtexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Complgtexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 86)
                    DEFAULTINVALID2("bitwise xor expression", "TokenType::CARET")
                }
                break;
            case 114:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Bitxorexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Bitxorexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::PIPE, 87)
                    DEFAULTINVALID2("bitwise or expression", "TokenType::PIPE")
                }
                break;
            case 115:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::AMPER, 88)
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Bitorexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Bitorexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID2("bitwise and expression", "TokenType::AMPER")
                }
                break;
            case 116:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Bitandexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Bitandexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::DOUBLEGREATER, 89)
                    SHIFTON(TokenType::DOUBLELESS, 90)
                    DEFAULTINVALID2("bit shift expression", "either TokenType::DOUBLEGREATER or TokenType::DOUBLELESS")
                }
                break;
            case 117:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Bitshiftexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Bitshiftexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::MINUS, 92)
                    SHIFTON(TokenType::PLUS, 91)
                    DEFAULTINVALID2("addition expression", "either TokenType::MINUS or TokenType::PLUS")
                }
                break;
            case 118:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Bitshiftexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Bitshiftexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::MINUS, 92)
                    SHIFTON(TokenType::PLUS, 91)
                    DEFAULTINVALID2("addition expression", "either TokenType::MINUS or TokenType::PLUS")
                }
                break;
            case 119:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Additionexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Additionexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::PERCENT, 95)
                    SHIFTON(TokenType::SLASH, 94)
                    SHIFTON(TokenType::STAR, 93)
                    DEFAULTINVALID2("multiplication expression", "TokenType::PERCENT, TokenType::SLASH, or TokenType::STAR")
                }
                break;
            case 120:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Additionexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Additionexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    SHIFTON(TokenType::PERCENT, 95)
                    SHIFTON(TokenType::SLASH, 94)
                    SHIFTON(TokenType::STAR, 93)
                    DEFAULTINVALID2("multiplication expression", "TokenType::PERCENT, TokenType::SLASH, or TokenType::STAR")
                }
                break;
            case 121:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Multexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Multexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("unary expression", "nothing", "multiplication expression")
                }
                break;
            case 122:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Multexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Multexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("unary expression", "nothing", "multiplication expression")
                }
                break;
            case 123:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Multexpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Multexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("unary expression", "nothing", "multiplication expression")
                }
                break;
            case 124:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COMMA, 133)
                    SHIFTON(TokenType::CPARN, 132)
                    DEFAULTINVALID2("argument list", "either TokenType::COMMA or TokenType::CPARN")
                }
                break;
            case 125:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Call>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Call>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::CPARN", "nothing", "function call expression")
                }
                break;
            case 126:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        REDUCESKIP(Args);
                        break;
                    DEFAULTINVALID3("expression", "nothing", "argument list")
                }
                break;
            case 127:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(2)
                            REDUCEA(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Primary>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::CPARN", "nothing", "primary expression")
                }
                break;
            case 128:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(3)
                            REDUCEA(2)
                            REDUCEA(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Varstmt>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::Varstmt>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::SEMICOLON", "nothing", "variable statement")
                }
                break;
            case 129:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 134)
                    DEFAULTINVALID3("TokenType::COMMA", "TokenType::IDENTIFIER", "variable statement assignments")
                }
                break;
            case 130:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::EQUAL", "expression", "variable statement assignments")
                }
                break;
            case 131:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::COLON", "ternary expression", "ternary expression")
                }
                break;
            case 132:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(3)
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Call>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::Call>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("TokenType::CPARN", "nothing", "function call expression")
                }
                break;
            case 133:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::COMMA", "expression", "argument list")
                }
                break;
            case 134:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::EQUAL, 138)
                    DEFAULTINVALID3("TokenType::IDENTIFIER", "TokenType::EQUAL", "variable statement assignments")
                }
                break;
            case 135:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Varstmtfinisher>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Varstmtfinisher>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("expression", "nothing", "variable statement assignments")
                }
                break;
            case 136:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::EQUAL:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(4)
                            REDUCET(3)
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Ternaryexpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4));
                            size_t newstate = getGoto<ASTNS::Ternaryexpr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("ternary expression", "nothing", "ternary expression")
                }
                break;
            case 137:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            REDUCEA(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Args>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Args>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("expression", "nothing", "argument list")
                }
                break;
            case 138:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 43)
                    SHIFTON(TokenType::BININTLIT, 63)
                    SHIFTON(TokenType::CHARLIT, 65)
                    SHIFTON(TokenType::DECINTLIT, 61)
                    SHIFTON(TokenType::FALSELIT, 58)
                    SHIFTON(TokenType::FLOATLIT, 59)
                    SHIFTON(TokenType::HEXINTLIT, 64)
                    SHIFTON(TokenType::MINUS, 54)
                    SHIFTON(TokenType::NULLPTRLIT, 60)
                    SHIFTON(TokenType::OCTINTLIT, 62)
                    SHIFTON(TokenType::OPARN, 67)
                    SHIFTON(TokenType::STRINGLIT, 66)
                    SHIFTON(TokenType::TILDE, 53)
                    SHIFTON(TokenType::TRUELIT, 57)
                    DEFAULTINVALID3("TokenType::EQUAL", "expression", "variable statement assignments")
                }
                break;
            case 139:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(4)
                            REDUCET(3)
                            REDUCET(2)
                            REDUCET(1)
                            REDUCEA(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Varstmtfinisher>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4));
                            size_t newstate = getGoto<ASTNS::Varstmtfinisher>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    DEFAULTINVALID3("expression", "nothing", "variable statement assignments")
                }
                break;
            default:
                Error(Error::MsgType::INTERR, lookahead, "Parser reached invalid state")
                    .primary(Error::Primary(lookahead)
                        .error(static_cast<std::stringstream&>(std::stringstream() << "Parser reached invalid state: " << stack.top()->state).str()))
                    .reportAbort();
        }
    }
#undef SHIFT
#undef REDUCET
#undef REDUCEA
#undef REDUCESKIP
#undef SHIFTON
#undef DEFAULTINVALID2
#undef DEFAULTINVALID3
// This code was autogenerated - see the utils/ directory

    // PARSERLOOP END
    // }}}

    aststackitem *asir (dynamic_cast<aststackitem*>(stack.top().get()));
    if (!asir)
        return nullptr;

    std::unique_ptr<ASTNS::AST> astu (std::move(asir->ast));
    ASTNS::Declarations *decls = dynamic_cast<ASTNS::Declarations*>(astu.get());

    if (!decls)
        return nullptr;

    astu.release();
    std::unique_ptr<ASTNS::Declarations> declsu (decls);
    return declsu;
}

Token Parser::consume()
{
    Token cur;
    while (true)
    {
        cur = lexer.nextToken();
        if (cur.type != TokenType::ERROR) return cur;

        Error(Error::MsgType::ERROR, cur, cur.message)
            .primary(Error::Primary(cur)
                .error(cur.message))
            .report();
    }

    return cur;
}

void Parser::invalidSyntax(const char *justparsed, const char *expected, const char *whileparsing, Token const &lookahead, Token const &last)
{
    std::stringstream ssl;
    std::stringstream sss;
    ssl << "expected " << expected << " after " << justparsed << " of " << whileparsing << ", but got " << stringifyTokenType(lookahead.type) << " instead";
    sss << "expected " << expected;
    Error(Error::MsgType::ERROR, lookahead, ssl.str())
        .primary(Error::Primary(last)
            .error(sss.str()))
        .primary(Error::Primary(lookahead)
            .note("unexpected token here"))
        .report();
}
void Parser::invalidSyntax(const char *justparsed, const char *expected, Token const &lookahead, Token const &last)
{
    std::stringstream ssl;
    std::stringstream sss;
    ssl << "expected " << expected << " after " << justparsed << ", but got " << stringifyTokenType(lookahead.type) << " instead";
    sss << "expected " << expected;
    Error(Error::MsgType::ERROR, lookahead, ssl.str())
        .primary(Error::Primary(last)
            .error(sss.str()))
        .primary(Error::Primary(lookahead)
            .note("unexpected token here"))
        .report();
}
