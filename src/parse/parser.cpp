#include "parse/parser.h"

#include "lex/tokentype.h"
#include "message/errors.h"

#include <sstream>
#include <stack>

Parser::Parser(Lexer &l, File &sourcefile): lexer(l), sourcefile(sourcefile) {}

// get goto {{{
// GETGOTO START

// The following code was autogenerated - see the utils/ directory
template <> size_t Parser::getGoto<ASTNS::New_stmt>(size_t state)
{
    switch (state)
    {
        case 0:
             return 1;
        default:
            reportAbortNoh("retrieve goto of nonterminal new_stmt in state 22");
    }
}
template <> size_t Parser::getGoto<ASTNS::New_expr>(size_t state)
{
    switch (state)
    {
        case 0:
             return 2;
        case 10:
             return 17;
        default:
            reportAbortNoh("retrieve goto of nonterminal new_expr in state 22");
    }
}
template <> size_t Parser::getGoto<ASTNS::Add>(size_t state)
{
    switch (state)
    {
        case 0:
             return 3;
        case 10:
             return 3;
        default:
            reportAbortNoh("retrieve goto of nonterminal add in state 22");
    }
}
template <> size_t Parser::getGoto<ASTNS::Mult>(size_t state)
{
    switch (state)
    {
        case 0:
             return 4;
        case 10:
             return 4;
        case 11:
             return 18;
        case 12:
             return 19;
        default:
            reportAbortNoh("retrieve goto of nonterminal mult in state 22");
    }
}
template <> size_t Parser::getGoto<ASTNS::Unary>(size_t state)
{
    switch (state)
    {
        case 0:
             return 5;
        case 6:
             return 15;
        case 7:
             return 16;
        case 10:
             return 5;
        case 11:
             return 5;
        case 12:
             return 5;
        case 13:
             return 20;
        case 14:
             return 21;
        default:
            reportAbortNoh("retrieve goto of nonterminal unary in state 22");
    }
}
template <> size_t Parser::getGoto<ASTNS::Primary>(size_t state)
{
    switch (state)
    {
        case 0:
             return 8;
        case 6:
             return 8;
        case 7:
             return 8;
        case 10:
             return 8;
        case 11:
             return 8;
        case 12:
             return 8;
        case 13:
             return 8;
        case 14:
             return 8;
        default:
            reportAbortNoh("retrieve goto of nonterminal primary in state 22");
    }
}
// This code was autogenerated - see the utils/ directory

// GETGOTO END
// }}}

std::unique_ptr<ASTNS::AST> Parser::parse()
{
    struct stackitem
    {
        int state;
        stackitem(size_t state): state(state) {}
        virtual void dummy() {}
    };

    struct tokstackitem : public stackitem
    {
        Token tok;
        tokstackitem(size_t state, Token tok): stackitem(state), tok(tok) {}
    };
    
    struct aststackitem : public stackitem
    {
        std::unique_ptr<ASTNS::NewBaseAST> ast;
        aststackitem(size_t state, std::unique_ptr<ASTNS::NewBaseAST> ast): stackitem(state), ast(std::move(ast)) {}
    };

    // parser loop {{{
    // PARSERLOOP START

// The following code was autogenerated - see the utils/ directory
    bool done = false;
    Token lookahead (consume());
    std::stack<std::unique_ptr<stackitem>> stack;
    stack.push(std::make_unique<stackitem>(0));
    while (!done)
    {
        switch (stack.top()->state)
        {
            case 0:
               switch (lookahead.type)
               {
                    case TokenType::DECINTLIT:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(9, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::OPARN:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(10, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 1:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            done = true;
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 2:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::New_stmt>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::New_stmt>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 3:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::New_expr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::New_expr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::New_expr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::New_expr>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(12, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(11, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 4:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(14, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::STAR:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(13, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 5:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::STAR:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 6:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 7:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 8:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    case TokenType::STAR:
                        {
                            // skip actual reduction
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.top()->state = newstate;
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 9:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::STAR:
                        {
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 10:
               switch (lookahead.type)
               {
                    case TokenType::DECINTLIT:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(9, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::OPARN:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(10, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 11:
               switch (lookahead.type)
               {
                    case TokenType::DECINTLIT:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(9, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::OPARN:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(10, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 12:
               switch (lookahead.type)
               {
                    case TokenType::DECINTLIT:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(9, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::OPARN:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(10, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 13:
               switch (lookahead.type)
               {
                    case TokenType::DECINTLIT:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(9, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::OPARN:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(10, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 14:
               switch (lookahead.type)
               {
                    case TokenType::DECINTLIT:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(9, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(6, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::OPARN:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(10, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::TILDE:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(7, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 15:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::STAR:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 16:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::STAR:
                        {
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Unary>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Unary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 17:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(22, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 18:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(14, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::STAR:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(13, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 19:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Add>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Add>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(14, last));
                            lookahead = consume();
                        }
                        break;
                    case TokenType::STAR:
                        {
                            Token last (lookahead);
                            stack.push(std::make_unique<tokstackitem>(13, last));
                            lookahead = consume();
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 20:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::STAR:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 21:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::STAR:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            aststackitem *asi2 = dynamic_cast<aststackitem*>(_a2.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a2 (std::move(asi2->ast));
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi1 = dynamic_cast<tokstackitem*>(_a1.get());
                            Token a1 (tsi1->tok);
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            aststackitem *asi0 = dynamic_cast<aststackitem*>(_a0.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a0 (std::move(asi0->ast));
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Mult>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Mult>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 22:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi2 = dynamic_cast<tokstackitem*>(_a2.get());
                            Token a2 (tsi2->tok);
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi2 = dynamic_cast<tokstackitem*>(_a2.get());
                            Token a2 (tsi2->tok);
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::MINUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi2 = dynamic_cast<tokstackitem*>(_a2.get());
                            Token a2 (tsi2->tok);
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::PLUS:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi2 = dynamic_cast<tokstackitem*>(_a2.get());
                            Token a2 (tsi2->tok);
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::SLASH:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi2 = dynamic_cast<tokstackitem*>(_a2.get());
                            Token a2 (tsi2->tok);
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    case TokenType::STAR:
                        {
                            std::unique_ptr<stackitem> _a2 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi2 = dynamic_cast<tokstackitem*>(_a2.get());
                            Token a2 (tsi2->tok);
                            std::unique_ptr<stackitem> _a1 = std::move(stack.top()); stack.pop();
                            aststackitem *asi1 = dynamic_cast<aststackitem*>(_a1.get());
                            std::unique_ptr<ASTNS::NewBaseAST> a1 (std::move(asi1->ast));
                            std::unique_ptr<stackitem> _a0 = std::move(stack.top()); stack.pop();
                            tokstackitem *tsi0 = dynamic_cast<tokstackitem*>(_a0.get());
                            Token a0 (tsi0->tok);
                            std::unique_ptr<ASTNS::NewBaseAST> push = std::make_unique<ASTNS::Primary>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Primary>(stack.top()->state);
                            stack.push(std::make_unique<aststackitem>(newstate, std::move(push)));
                        }
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            default:
                Error(Error::MsgType::INTERR, lookahead, "Parser reached invalid state")
                    .primary(Error::Primary(lookahead)
                        .error(static_cast<std::stringstream&>(std::stringstream() << "Parser reached invalid state: " << stack.top()->state).str()))
                    .reportAbort();
        }
    }
// This code was autogenerated - see the utils/ directory

    // PARSERLOOP END
    // }}}
}

Token Parser::consume()
{
    Token cur;
    while (true)
    {
        cur = lexer.nextToken();
        if (cur.type != TokenType::ERROR) return cur;

        Error(Error::MsgType::ERROR, cur, cur.message)
            .primary(Error::Primary(cur)
                .error(cur.message))
            .report();
    }

    return cur;
}

