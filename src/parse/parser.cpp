#include "parse/parser.h"

#include "lex/tokentype.h"
#include "message/errors.h"

#include <sstream>
#include <stack>

Parser::Parser(Lexer &l, File &sourcefile): lexer(l), sourcefile(sourcefile) {}

std::unique_ptr<ASTNS::AST> Parser::parse()
{
    struct stackitem
    {
        int state;
        stackitem(size_t state): state(state) {}
    };

    struct tokstackitem : public stackitem
    {
        Token tok;
        tokstackitem(size_t state, Token tok): stackitem(state), tok(tok) {}
    };
    
    struct aststackitem : public stackitem
    {
        std::unique_ptr<ASTNS::AST> ast;
        aststackitem(size_t state, std::unique_ptr<ASTNS::AST> ast): stackitem(state), ast(std::move(ast)) {}
    };

    Token lookahead (consume());
    std::stack<std::unique_ptr<stackitem>> stack; // wish i didnt have to do it this way

    stack.push(std::make_unique<stackitem>(0));

    bool done = false;
    while (!done)
    {
        Action act = getAction(stack.top()->state, lookahead);

        switch (act.type)
        {
            case Action::ActionType::SHIFT:
                {
                    Token last (lookahead);
                    lookahead = consume();
                    
                    auto toksi = std::make_unique<tokstackitem>(act.as.shift.newstate, last);
                    stack.push(std::move(toksi));
                }
                break;

            case Action::ActionType::REDUCE:
                {
                    // for (int i = 0; i < act.as.reduce.reduceamt; ++i)
                    // {
                        // stack.pop();
                    // }
                    // stack.push(std::make_unique<aststackitem>(getGoto(stack.top().state, ), nullptr));
                }
                break;

            case Action::ActionType::ERROR: 
                 Error(Error::MsgType::ERROR, lookahead, "Invalid syntax").report();
                 done = true;
                 break;

            case Action::ActionType::ACCEPT:
                 done = true;
                 break;
        }
    }
}

Token Parser::consume()
{
    while (true)
    {
        Token cur (lexer.nextToken());

        if (cur.type != TokenType::ERROR) return cur;

        Error(Error::MsgType::ERROR, cur, cur.message)
            .primary(Error::Primary(cur)
                .error(cur.message))
            .report();
    }
}

// getAction {{{1
Parser::Action Parser::getAction(size_t state, Token lookahead)
{
    // GETACTION START

// The following code was autogenerated - see the utils/ directory
    Parser::Action act;
    switch (state)
    {
        case 0:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                case TokenType::DECINTLIT:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 9;
                    break;
                case TokenType::OPARN:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 10;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 1:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::ACCEPT;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 2:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 3:
           switch (lookahead.type)
           {
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 11;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 12;
                    break;
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 4:
           switch (lookahead.type)
           {
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 13;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 14;
                    break;
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 5:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 6:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 7:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 8:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 9:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 1;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 10:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                case TokenType::DECINTLIT:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 9;
                    break;
                case TokenType::OPARN:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 10;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 11:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                case TokenType::DECINTLIT:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 9;
                    break;
                case TokenType::OPARN:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 10;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 12:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                case TokenType::DECINTLIT:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 9;
                    break;
                case TokenType::OPARN:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 10;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 13:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                case TokenType::DECINTLIT:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 9;
                    break;
                case TokenType::OPARN:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 10;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 14:
           switch (lookahead.type)
           {
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 6;
                    break;
                case TokenType::TILDE:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 7;
                    break;
                case TokenType::DECINTLIT:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 9;
                    break;
                case TokenType::OPARN:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 10;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 15:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 16:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 2;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 17:
           switch (lookahead.type)
           {
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 22;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 18:
           switch (lookahead.type)
           {
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 13;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 14;
                    break;
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 19:
           switch (lookahead.type)
           {
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 13;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::SHIFT;
                    act.as.shift.newstate = 14;
                    break;
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 20:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 21:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        case 22:
           switch (lookahead.type)
           {
                case TokenType::EOF_:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::CPARN:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::PLUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::MINUS:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::STAR:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                case TokenType::SLASH:
                    act.type = Parser::Action::ActionType::REDUCE;
                    act.as.reduce.reduceamt = 3;
                    break;
                default:
                    act.type = Parser::Action::ActionType::ERROR;
                    break;
            }
            break;
        default:
            Error(Error::MsgType::INTERR, lookahead, "Parser reached invalid state")
                .primary(Error::Primary(lookahead)
                    .error(static_cast<std::stringstream&>(std::stringstream() << "Parser reached invalid state: " << state).str()))
                .reportAbort();
    }
    return act;
// This code was autogenerated - see the utils/ directory

    // GETACTION END
}
