#include "parse/parser.h"

#include "lex/tokentype.h"
#include "message/errors.h"

#include <sstream>
#include <stack>

Parser::Parser(Lexer &l, File &sourcefile): lexer(l), sourcefile(sourcefile) {}

std::unique_ptr<ASTNS::AST> Parser::parse()
{
    struct stackitem
    {
        int state;
        stackitem(size_t state): state(state) {}
    };

    struct tokstackitem : public stackitem
    {
        Token tok;
        tokstackitem(size_t state, Token tok): stackitem(state), tok(tok) {}
    };
    
    struct aststackitem : public stackitem
    {
        std::unique_ptr<ASTNS::AST> ast;
        aststackitem(size_t state, std::unique_ptr<ASTNS::AST> ast): stackitem(state), ast(std::move(ast)) {}
    };

    // parser loop {{{
    // PARSERLOOP START

// The following code was autogenerated - see the utils/ directory
    bool done = false;
    Token lookahead (consume());
    std::stack<std::unique_ptr<stackitem>> stack;
    stack.push(std::make_unique<stackitem>(0));
    while (true)
    {
        switch(stack.top()->state)
        {
            case 0:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::DECINTLIT:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::OPARN:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 1:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        done = true;
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 2:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 3:
               switch (lookahead.type)
               {
                    case TokenType::PLUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 4:
               switch (lookahead.type)
               {
                    case TokenType::STAR:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::SLASH:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 5:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 6:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 7:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 8:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 9:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 10:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::DECINTLIT:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::OPARN:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 11:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::DECINTLIT:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::OPARN:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 12:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::DECINTLIT:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::OPARN:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 13:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::DECINTLIT:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::OPARN:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 14:
               switch (lookahead.type)
               {
                    case TokenType::MINUS:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::TILDE:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::DECINTLIT:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::OPARN:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 15:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 16:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 17:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 18:
               switch (lookahead.type)
               {
                    case TokenType::STAR:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::SLASH:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 19:
               switch (lookahead.type)
               {
                    case TokenType::STAR:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::SLASH:
                        Token last (lookahead);
                        stack.push(std:make_unique<tokstackitem>(last))
                        lookahead = consume();
                        break;
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 20:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 21:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            case 22:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        // TODO: reduce
                        break;
                    case TokenType::CPARN:
                        // TODO: reduce
                        break;
                    case TokenType::PLUS:
                        // TODO: reduce
                        break;
                    case TokenType::MINUS:
                        // TODO: reduce
                        break;
                    case TokenType::STAR:
                        // TODO: reduce
                        break;
                    case TokenType::SLASH:
                        // TODO: reduce
                        break;
                    default:
                        Error(Error::MsgType::ERROR, lookahead, "Invalid syntax")
                            .primary(Error::Primary(lookahead)
                                 .error("Invalid syntax"))
                             .report();
                        break;
                }
                break;
            default:
                Error(Error::MsgType::INTERR, lookahead, "Parser reached invalid state")
                    .primary(Error::Primary(lookahead)
                        .error(static_cast<std::stringstream&>(std::stringstream() << "Parser reached invalid state: " << state).str()))
                    .reportAbort();
        }
    }
    return act;
// This code was autogenerated - see the utils/ directory

    // PARSERLOOP END
    // }}}
}

Token Parser::consume()
{
    Token cur;
    while (true)
    {
        cur = lexer.nextToken();
        if (cur.type != TokenType::ERROR) return cur;

        Error(Error::MsgType::ERROR, cur, cur.message)
            .primary(Error::Primary(cur)
                .error(cur.message))
            .report();
    }

    return cur;
}

