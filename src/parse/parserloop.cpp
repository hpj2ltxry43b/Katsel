#include "parse/parser.h"
#include "parsestack.h" // in a private header file
#include <vector>
#include "utils/format.h"

// get goto {{{
// GETGOTO START

// The following code was autogenerated - see the utils/ directory
template <> size_t getGoto<ASTNS::CU>(size_t state)
{
    switch (state)
    {
        case 0:
            return 1;
        default:
            reportAbortNoh("retrieve goto of nonterminal CU in invalid state");
    }
}
template <> size_t getGoto<ASTNS::DeclList>(size_t state)
{
    switch (state)
    {
        case 0:
            return 2;
        default:
            reportAbortNoh("retrieve goto of nonterminal DeclList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AnotherDecl>(size_t state)
{
    switch (state)
    {
        case 2:
            return 6;
        default:
            reportAbortNoh("retrieve goto of nonterminal AnotherDecl in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Decl>(size_t state)
{
    switch (state)
    {
        case 0:
            return 3;
        case 2:
            return 7;
        default:
            reportAbortNoh("retrieve goto of nonterminal Decl in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Function>(size_t state)
{
    switch (state)
    {
        case 0:
        case 2:
            return 4;
        default:
            reportAbortNoh("retrieve goto of nonterminal Function in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TypeV>(size_t state)
{
    switch (state)
    {
        case 5:
            return 8;
        default:
            reportAbortNoh("retrieve goto of nonterminal TypeV in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ParamList_OPT>(size_t state)
{
    switch (state)
    {
        case 25:
            return 26;
        default:
            reportAbortNoh("retrieve goto of nonterminal ParamList_OPT in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Block>(size_t state)
{
    switch (state)
    {
        case 30:
            return 33;
        case 35:
        case 38:
            return 45;
        default:
            reportAbortNoh("retrieve goto of nonterminal Block in invalid state");
    }
}
template <> size_t getGoto<ASTNS::StmtList>(size_t state)
{
    switch (state)
    {
        case 35:
            return 38;
        default:
            reportAbortNoh("retrieve goto of nonterminal StmtList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AnotherStmt>(size_t state)
{
    switch (state)
    {
        case 38:
            return 82;
        default:
            reportAbortNoh("retrieve goto of nonterminal AnotherStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Stmt>(size_t state)
{
    switch (state)
    {
        case 35:
            return 40;
        case 38:
            return 83;
        default:
            reportAbortNoh("retrieve goto of nonterminal Stmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::EmptyStmt>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
            return 41;
        default:
            reportAbortNoh("retrieve goto of nonterminal EmptyStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmt>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
            return 42;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ExprStmt>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
            return 43;
        default:
            reportAbortNoh("retrieve goto of nonterminal ExprStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::RetStmt>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
            return 44;
        default:
            reportAbortNoh("retrieve goto of nonterminal RetStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TypeNV>(size_t state)
{
    switch (state)
    {
        case 5:
            return 9;
        case 25:
        case 31:
            return 29;
        case 47:
            return 84;
        case 63:
            return 108;
        default:
            reportAbortNoh("retrieve goto of nonterminal TypeNV in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItemList>(size_t state)
{
    switch (state)
    {
        case 84:
            return 115;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItemList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Expr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
            return 48;
        case 49:
            return 86;
        case 63:
        case 111:
            return 109;
        case 89:
            return 120;
        case 114:
        case 151:
            return 144;
        case 147:
            return 154;
        default:
            reportAbortNoh("retrieve goto of nonterminal Expr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AnotherVarStmtItem>(size_t state)
{
    switch (state)
    {
        case 146:
            return 152;
        default:
            reportAbortNoh("retrieve goto of nonterminal AnotherVarStmtItem in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItem>(size_t state)
{
    switch (state)
    {
        case 84:
            return 116;
        case 146:
            return 153;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItem in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BuiltinTypeNoVoid>(size_t state)
{
    switch (state)
    {
        case 5:
        case 25:
        case 31:
        case 47:
        case 63:
            return 11;
        default:
            reportAbortNoh("retrieve goto of nonterminal BuiltinTypeNoVoid in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ArgList>(size_t state)
{
    switch (state)
    {
        case 114:
            return 142;
        default:
            reportAbortNoh("retrieve goto of nonterminal ArgList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AnotherArg>(size_t state)
{
    switch (state)
    {
        case 151:
            return 156;
        default:
            reportAbortNoh("retrieve goto of nonterminal AnotherArg in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Arg>(size_t state)
{
    switch (state)
    {
        case 114:
            return 143;
        case 151:
            return 157;
        default:
            reportAbortNoh("retrieve goto of nonterminal Arg in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ArgList_OPT>(size_t state)
{
    switch (state)
    {
        case 114:
            return 141;
        default:
            reportAbortNoh("retrieve goto of nonterminal ArgList_OPT in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ParamList>(size_t state)
{
    switch (state)
    {
        case 25:
            return 27;
        default:
            reportAbortNoh("retrieve goto of nonterminal ParamList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AnotherParam>(size_t state)
{
    switch (state)
    {
        case 31:
            return 36;
        default:
            reportAbortNoh("retrieve goto of nonterminal AnotherParam in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Param>(size_t state)
{
    switch (state)
    {
        case 25:
            return 28;
        case 31:
            return 37;
        default:
            reportAbortNoh("retrieve goto of nonterminal Param in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AssignmentExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 89:
        case 111:
        case 114:
        case 147:
        case 151:
            return 50;
        case 88:
            return 119;
        default:
            reportAbortNoh("retrieve goto of nonterminal AssignmentExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TernaryExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 111:
        case 114:
        case 147:
        case 151:
            return 51;
        case 148:
            return 155;
        default:
            reportAbortNoh("retrieve goto of nonterminal TernaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinOrExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 52;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinOrExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinAndExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 53;
        case 90:
            return 121;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinAndExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CompEQExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 54;
        case 91:
            return 122;
        default:
            reportAbortNoh("retrieve goto of nonterminal CompEQExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CompLGTExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 55;
        case 92:
            return 123;
        case 93:
            return 124;
        default:
            reportAbortNoh("retrieve goto of nonterminal CompLGTExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitXorExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 56;
        case 94:
            return 125;
        case 95:
            return 126;
        case 96:
            return 127;
        case 97:
            return 128;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitXorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitOrExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 57;
        case 98:
            return 129;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitOrExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitAndExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 58;
        case 99:
            return 130;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitAndExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitShiftExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 59;
        case 100:
            return 131;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitShiftExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AdditionExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 60;
        case 101:
            return 132;
        case 102:
            return 133;
        default:
            reportAbortNoh("retrieve goto of nonterminal AdditionExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MultExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 61;
        case 103:
            return 134;
        case 104:
            return 135;
        default:
            reportAbortNoh("retrieve goto of nonterminal MultExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::UnaryExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 111:
        case 114:
        case 139:
        case 147:
        case 148:
        case 151:
            return 64;
        case 65:
            return 110;
        case 66:
            return 112;
        case 67:
            return 113;
        case 105:
            return 136;
        case 106:
            return 137;
        case 107:
            return 138;
        default:
            reportAbortNoh("retrieve goto of nonterminal UnaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CastExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 111:
        case 114:
        case 147:
        case 148:
        case 151:
            return 62;
        case 139:
            return 149;
        default:
            reportAbortNoh("retrieve goto of nonterminal CastExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CallExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 65:
        case 66:
        case 67:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 111:
        case 114:
        case 139:
        case 147:
        case 148:
        case 151:
            return 68;
        default:
            reportAbortNoh("retrieve goto of nonterminal CallExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::PrimaryExpr>(size_t state)
{
    switch (state)
    {
        case 35:
        case 38:
        case 49:
        case 63:
        case 65:
        case 66:
        case 67:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 111:
        case 114:
        case 139:
        case 147:
        case 148:
        case 151:
            return 69;
        default:
            reportAbortNoh("retrieve goto of nonterminal PrimaryExpr in invalid state");
    }
}
// This code was autogenerated - see the utils/ directory

// GETGOTO END
// }}}

static void shift(Parser &p, Token &last, Token &lookahead, std::vector<stackitem> &stack, int &steps, int const &newst)
{
    last = lookahead;
    stack.emplace_back(newst, last);
    lookahead = p.consume();
    ++steps;
}

static Token popT(std::vector<stackitem> &stack)
{
    stackitem si = std::move(stack.back());

    stack.pop_back();
    return si.tok;
}

template <typename A>
static std::unique_ptr<A> popA(std::vector<stackitem> &stack)
{
    stackitem si = std::move(stack.back());
    stack.pop_back();

    A *astraw = static_cast<A*>(si.ast.release());
    return std::unique_ptr<A>(astraw);
}

template <typename A>
static void reduceSkip(std::vector<stackitem> &stack)
{
    size_t newstate = getGoto<A>((stack.end() - 2)->state);
    stack.back().state = newstate;
}

static void error(bool &done, bool &errored, errorstate const &ers, std::vector<std::string> const &expectations)
{
    errored = true;

    if (!errorRecovery(ers, expectations))
        done = true;
}

bool _parse(Parser &p, std::vector<stackitem> &stack, bool istrial, std::unique_ptr<ASTNS::CUB> &out, Token const &_lookahead)
{
    // parser loop {{{
    // PARSERLOOP START

// The following code was autogenerated - see the utils/ directory
    bool done = false;
    bool errored = false;
    int steps = 0;
    Token lookahead (_lookahead); // for when you need to inject a new token
    Token lasttok = lookahead;
    while (!done)
    {
        if (istrial && steps > 5)
            return true;
        switch (stack.back().state)
        {
            case 0:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CU>());
                            stack.emplace_back(getGoto<ASTNS::CU>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::FUN:
                        shift(p, lasttok, lookahead, stack, steps, 5); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "compilation unit", "")  });
                }
                break;
            case 1:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                            done = true;
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % to terminate %", stringifyTokenType(TokenType::EOF_), "")  });
                }
                break;
            case 2:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            auto a0 (popA<ASTNS::DeclList>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CU>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::CU>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::FUN:
                        shift(p, lasttok, lookahead, stack, steps, 5); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "another declaration", "declaration list"), format("expected % to terminate %", stringifyTokenType(TokenType::EOF_), "compilation unit")  });
                }
                break;
            case 3:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::DeclList>(stack);
                        break;
                }
                break;
            case 4:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Decl>(stack);
                        break;
                }
                break;
            case 5:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    case TokenType::VOID:
                        shift(p, lasttok, lookahead, stack, steps, 10); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "void-inclusive type specifier", "function declaration")  });
                }
                break;
            case 6:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::AnotherDecl>(stack));
                            auto a0 (popA<ASTNS::DeclList>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::DeclList>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::DeclList>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 7:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AnotherDecl>(stack);
                        break;
                }
                break;
            case 8:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 24); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::IDENTIFIER), "function declaration")  });
                }
                break;
            case 9:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::TypeV>(stack);
                        break;
                }
                break;
            case 10:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::TypeV>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::TypeV>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 11:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::TypeNV>(stack);
                        break;
                }
                break;
            case 12:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 13:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 14:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 15:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 16:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 17:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 18:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 19:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 20:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 21:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 22:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 23:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 24:
               switch (lookahead.type)
               {
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 25); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::OPARN), "function declaration")  });
                }
                break;
            case 25:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    default:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ParamList_OPT>());
                            stack.emplace_back(getGoto<ASTNS::ParamList_OPT>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                }
                break;
            case 26:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 30); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::CPARN), "function declaration")  });
                }
                break;
            case 27:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 31); break;
                    default:
                        reduceSkip<ASTNS::ParamList_OPT>(stack);
                        break;
                }
                break;
            case 28:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::ParamList>(stack);
                        break;
                }
                break;
            case 29:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 32); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::IDENTIFIER), "parameter")  });
                }
                break;
            case 30:
               switch (lookahead.type)
               {
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 35); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 34); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", format("either % or %", "code block", stringifyTokenType(TokenType::SEMICOLON)), "function declaration")  });
                }
                break;
            case 31:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "another parameter", "parameter list")  });
                }
                break;
            case 32:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::TypeNV>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Param>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::Param>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 33:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a6 (popA<ASTNS::Block>(stack));
                            auto a5 (popT(stack));
                            auto a4 (popA<ASTNS::ParamList_OPT>(stack));
                            auto a3 (popT(stack));
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::TypeV>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5), std::move(a6)));
                            stack.emplace_back(getGoto<ASTNS::Function>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 34:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a6 (popT(stack));
                            auto a5 (popT(stack));
                            auto a4 (popA<ASTNS::ParamList_OPT>(stack));
                            auto a3 (popT(stack));
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::TypeV>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5), std::move(a6)));
                            stack.emplace_back(getGoto<ASTNS::Function>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 35:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CCURB:
                        shift(p, lasttok, lookahead, stack, steps, 39); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 35); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::RETURN:
                        shift(p, lasttok, lookahead, stack, steps, 49); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 46); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::VAR:
                        shift(p, lasttok, lookahead, stack, steps, 47); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", format("either % or %", "statement list", stringifyTokenType(TokenType::CCURB)), "code block")  });
                }
                break;
            case 36:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AnotherParam>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ParamList>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ParamList>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::ParamList>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 37:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AnotherParam>(stack);
                        break;
                }
                break;
            case 38:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CCURB:
                        shift(p, lasttok, lookahead, stack, steps, 81); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 35); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::RETURN:
                        shift(p, lasttok, lookahead, stack, steps, 49); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 46); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::VAR:
                        shift(p, lasttok, lookahead, stack, steps, 47); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::CCURB), "code block"), format("expected % for %", "another statement", "statement list")  });
                }
                break;
            case 39:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::Block>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 40:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::StmtList>(stack);
                        break;
                }
                break;
            case 41:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 42:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 43:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 44:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 45:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 46:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::EmptyStmt>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::EmptyStmt>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 47:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "non-void type specifier", "variable statement")  });
                }
                break;
            case 48:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 85); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::SEMICOLON), "expression statement")  });
                }
                break;
            case 49:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 87); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", format("either % or %", "expression", stringifyTokenType(TokenType::SEMICOLON)), "return statement")  });
                }
                break;
            case 50:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Expr>(stack);
                        break;
                }
                break;
            case 51:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AssignmentExpr>(stack);
                        break;
                    case TokenType::EQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 88); break;
                }
                break;
            case 52:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::TernaryExpr>(stack);
                        break;
                    case TokenType::DOUBLEPIPE:
                        shift(p, lasttok, lookahead, stack, steps, 90); break;
                    case TokenType::QUESTION:
                        shift(p, lasttok, lookahead, stack, steps, 89); break;
                }
                break;
            case 53:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BinOrExpr>(stack);
                        break;
                    case TokenType::DOUBLEAMPER:
                        shift(p, lasttok, lookahead, stack, steps, 91); break;
                }
                break;
            case 54:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                    default:
                        reduceSkip<ASTNS::BinAndExpr>(stack);
                        break;
                    case TokenType::DOUBLEEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 93); break;
                }
                break;
            case 55:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::CompEQExpr>(stack);
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                }
                break;
            case 56:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::CompLGTExpr>(stack);
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                }
                break;
            case 57:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BitXorExpr>(stack);
                        break;
                    case TokenType::PIPE:
                        shift(p, lasttok, lookahead, stack, steps, 99); break;
                }
                break;
            case 58:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                        shift(p, lasttok, lookahead, stack, steps, 100); break;
                    default:
                        reduceSkip<ASTNS::BitOrExpr>(stack);
                        break;
                }
                break;
            case 59:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BitAndExpr>(stack);
                        break;
                    case TokenType::DOUBLEGREATER:
                        shift(p, lasttok, lookahead, stack, steps, 101); break;
                    case TokenType::DOUBLELESS:
                        shift(p, lasttok, lookahead, stack, steps, 102); break;
                }
                break;
            case 60:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BitShiftExpr>(stack);
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 104); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 103); break;
                }
                break;
            case 61:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AdditionExpr>(stack);
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 107); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 106); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 105); break;
                }
                break;
            case 62:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::MultExpr>(stack);
                        break;
                }
                break;
            case 63:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "non-void type specifier", "type cast expression"), format("expected % for %", "expression", "primary expression")  });
                }
                break;
            case 64:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::CastExpr>(stack);
                        break;
                }
                break;
            case 65:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 111); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "unary expression", "unary expression")  });
                }
                break;
            case 66:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 111); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "unary expression", "unary expression")  });
                }
                break;
            case 67:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 111); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "unary expression", "unary expression")  });
                }
                break;
            case 68:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::UnaryExpr>(stack);
                        break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 114); break;
                }
                break;
            case 69:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::CallExpr>(stack);
                        break;
                }
                break;
            case 70:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 71:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 72:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 73:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 74:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 75:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 76:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 77:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 78:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 79:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 80:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 81:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::StmtList>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::Block>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 82:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::AnotherStmt>(stack));
                            auto a0 (popA<ASTNS::StmtList>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::StmtList>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::StmtList>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 83:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AnotherStmt>(stack);
                        break;
                }
                break;
            case 84:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 117); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "variable statement initialization list", "variable statement")  });
                }
                break;
            case 85:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::Expr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ExprStmt>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::ExprStmt>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 86:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 118); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::SEMICOLON), "return statement")  });
                }
                break;
            case 87:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::RetStmt>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::RetStmt>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 88:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "assignment expression", "assignment expression")  });
                }
                break;
            case 89:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "expression", "ternary expression")  });
                }
                break;
            case 90:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "binary and expression", "binary or expression")  });
                }
                break;
            case 91:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "equality expression", "binary and expression")  });
                }
                break;
            case 92:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "comparison expression", "equality expression")  });
                }
                break;
            case 93:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "comparison expression", "equality expression")  });
                }
                break;
            case 94:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "bitwise xor expression", "comparison expression")  });
                }
                break;
            case 95:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "bitwise xor expression", "comparison expression")  });
                }
                break;
            case 96:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "bitwise xor expression", "comparison expression")  });
                }
                break;
            case 97:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "bitwise xor expression", "comparison expression")  });
                }
                break;
            case 98:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "bitwise or expression", "bitwise xor expression")  });
                }
                break;
            case 99:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "bitwise and expression", "bitwise or expression")  });
                }
                break;
            case 100:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "bit shift expression", "bitwise and expression")  });
                }
                break;
            case 101:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "addition expression", "bit shift expression")  });
                }
                break;
            case 102:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "addition expression", "bit shift expression")  });
                }
                break;
            case 103:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "multiplication expression", "addition expression")  });
                }
                break;
            case 104:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "multiplication expression", "addition expression")  });
                }
                break;
            case 105:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 111); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "unary expression", "multiplication expression")  });
                }
                break;
            case 106:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 111); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "unary expression", "multiplication expression")  });
                }
                break;
            case 107:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 111); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "unary expression", "multiplication expression")  });
                }
                break;
            case 108:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 139); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::CPARN), "type cast expression")  });
                }
                break;
            case 109:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 140); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::CPARN), "primary expression")  });
                }
                break;
            case 110:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::UnaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 111:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "expression", "primary expression")  });
                }
                break;
            case 112:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::UnaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 113:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1)));
                            stack.emplace_back(getGoto<ASTNS::UnaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 114:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    default:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ArgList_OPT>());
                            stack.emplace_back(getGoto<ASTNS::ArgList_OPT>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                }
                break;
            case 115:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 146); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 145); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::SEMICOLON), "variable statement"), format("expected % for %", stringifyTokenType(TokenType::COMMA), "variable statement initialization list")  });
                }
                break;
            case 116:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::VarStmtItemList>(stack);
                        break;
                }
                break;
            case 117:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmtItem>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::VarStmtItem>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::EQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 147); break;
                }
                break;
            case 118:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Expr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::RetStmt>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::RetStmt>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 119:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AssignmentExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::TernaryExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::AssignmentExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::AssignmentExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 120:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                        shift(p, lasttok, lookahead, stack, steps, 148); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::COLON), "ternary expression")  });
                }
                break;
            case 121:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BinAndExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinOrExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BinOrExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::BinOrExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEAMPER:
                        shift(p, lasttok, lookahead, stack, steps, 91); break;
                }
                break;
            case 122:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                    default:
                        {
                            auto a2 (popA<ASTNS::CompEQExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinAndExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BinAndExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::BinAndExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 93); break;
                }
                break;
            case 123:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::CompLGTExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompEQExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompEQExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::CompEQExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                }
                break;
            case 124:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::CompLGTExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompEQExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompEQExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::CompEQExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                }
                break;
            case 125:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitXorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompLGTExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompLGTExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::CompLGTExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                }
                break;
            case 126:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitXorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompLGTExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompLGTExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::CompLGTExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                }
                break;
            case 127:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitXorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompLGTExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompLGTExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::CompLGTExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                }
                break;
            case 128:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitXorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompLGTExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompLGTExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::CompLGTExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                }
                break;
            case 129:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitOrExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitXorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitXorExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::BitXorExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::PIPE:
                        shift(p, lasttok, lookahead, stack, steps, 99); break;
                }
                break;
            case 130:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                        shift(p, lasttok, lookahead, stack, steps, 100); break;
                    default:
                        {
                            auto a2 (popA<ASTNS::BitAndExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitOrExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitOrExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::BitOrExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 131:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitShiftExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitAndExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitAndExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::BitAndExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEGREATER:
                        shift(p, lasttok, lookahead, stack, steps, 101); break;
                    case TokenType::DOUBLELESS:
                        shift(p, lasttok, lookahead, stack, steps, 102); break;
                }
                break;
            case 132:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AdditionExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitShiftExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitShiftExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::BitShiftExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 104); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 103); break;
                }
                break;
            case 133:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AdditionExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitShiftExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitShiftExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::BitShiftExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 104); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 103); break;
                }
                break;
            case 134:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::MultExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::AdditionExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::AdditionExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 107); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 106); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 105); break;
                }
                break;
            case 135:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::MultExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::AdditionExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::AdditionExpr>(stack.back().state), std::move(push));
                        }
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 107); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 106); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 105); break;
                }
                break;
            case 136:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::MultExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 137:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::MultExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 138:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::MultExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 139:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "type cast expression", "type cast expression")  });
                }
                break;
            case 140:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Expr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::PrimaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 141:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 150); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", stringifyTokenType(TokenType::CPARN), "function call expression")  });
                }
                break;
            case 142:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 151); break;
                    default:
                        reduceSkip<ASTNS::ArgList_OPT>(stack);
                        break;
                }
                break;
            case 143:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::ArgList>(stack);
                        break;
                }
                break;
            case 144:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popA<ASTNS::Expr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Arg>(std::move(a0)));
                            stack.emplace_back(getGoto<ASTNS::Arg>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 145:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::VarStmtItemList>(stack));
                            auto a1 (popA<ASTNS::TypeNV>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmt>(std::move(a0), std::move(a1), std::move(a2), std::move(a3)));
                            stack.emplace_back(getGoto<ASTNS::VarStmt>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 146:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 117); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "another variable statement initialization", "variable statement initialization list")  });
                }
                break;
            case 147:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "expression", "variable statement initialization")  });
                }
                break;
            case 148:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "ternary expression", "ternary expression")  });
                }
                break;
            case 149:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a3 (popA<ASTNS::CastExpr>(stack));
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::TypeNV>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CastExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3)));
                            stack.emplace_back(getGoto<ASTNS::CastExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 150:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::ArgList_OPT>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CallExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CallExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3)));
                            stack.emplace_back(getGoto<ASTNS::CallExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 151:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 78); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {  format("expected % for %", "another argument", "argument list")  });
                }
                break;
            case 152:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AnotherVarStmtItem>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::VarStmtItemList>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmtItemList>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::VarStmtItemList>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 153:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AnotherVarStmtItem>(stack);
                        break;
                }
                break;
            case 154:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::Expr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmtItem>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::VarStmtItem>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 155:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a4 (popA<ASTNS::TernaryExpr>(stack));
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::Expr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinOrExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::TernaryExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4)));
                            stack.emplace_back(getGoto<ASTNS::TernaryExpr>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 156:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AnotherArg>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ArgList>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ArgList>(std::move(a0), std::move(a1), std::move(a2)));
                            stack.emplace_back(getGoto<ASTNS::ArgList>(stack.back().state), std::move(push));
                        }
                        break;
                }
                break;
            case 157:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AnotherArg>(stack);
                        break;
                }
                break;
            default:
                reportAbortNoh(format("Parser reached invalid state: %", stack.back().state));
        }
    }
// This code was autogenerated - see the utils/ directory

    // PARSERLOOP END
    // }}}

    if (istrial)
        return true;

    if (errored)
    {
        p.errored = true;
        out = nullptr;
        return false;
    }

    stackitem topsi (std::move(stack.back()));
    if (topsi.istok)
        reportAbortNoh("topsi is tok when parser not errored");

    std::unique_ptr<ASTNS::AST> astu (std::move(topsi.ast));
    ASTNS::CUB *cub = dynamic_cast<ASTNS::CUB*>(astu.get());
    if (!cub)
        reportAbortNoh("cub is not a CUB despite parser not errored");

    astu.release();
    out = std::unique_ptr<ASTNS::CUB>(cub);
    return true;
}
