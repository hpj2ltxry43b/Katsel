#include "parse/parser.h"
#include "parsestack.h" // in a private header file
#include <vector>

// get goto {{{
// GETGOTO START

// The following code was autogenerated - see the utils/ directory
template <> size_t getGoto<ASTNS::Decls>(size_t state)
{
    switch (state)
    {
        case 0:
            return 1;
        default:
            reportAbortNoh("retrieve goto of nonterminal Decls in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Decl>(size_t state)
{
    switch (state)
    {
        case 0:
            return 2;
        case 1:
            return 5;
        default:
            reportAbortNoh("retrieve goto of nonterminal Decl in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Function>(size_t state)
{
    switch (state)
    {
        case 0:
        case 1:
            return 3;
        default:
            reportAbortNoh("retrieve goto of nonterminal Function in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Type>(size_t state)
{
    switch (state)
    {
        case 4:
            return 6;
        case 22:
            return 25;
        case 29:
            return 75;
        case 40:
            return 78;
        default:
            reportAbortNoh("retrieve goto of nonterminal Type in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Block>(size_t state)
{
    switch (state)
    {
        case 23:
            return 26;
        case 27:
        case 31:
            return 38;
        case 28:
            return 74;
        default:
            reportAbortNoh("retrieve goto of nonterminal Block in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ParamList>(size_t state)
{
    switch (state)
    {
        case 22:
            return 24;
        default:
            reportAbortNoh("retrieve goto of nonterminal ParamList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Stmts>(size_t state)
{
    switch (state)
    {
        case 27:
            return 31;
        default:
            reportAbortNoh("retrieve goto of nonterminal Stmts in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Stmt>(size_t state)
{
    switch (state)
    {
        case 27:
            return 33;
        case 31:
            return 77;
        default:
            reportAbortNoh("retrieve goto of nonterminal Stmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::EmptyStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 34;
        default:
            reportAbortNoh("retrieve goto of nonterminal EmptyStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 35;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ExprStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 36;
        default:
            reportAbortNoh("retrieve goto of nonterminal ExprStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::RetStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 37;
        default:
            reportAbortNoh("retrieve goto of nonterminal RetStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItems>(size_t state)
{
    switch (state)
    {
        case 78:
            return 107;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItems in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Expr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 41;
        case 42:
            return 80;
        case 73:
            return 105;
        case 82:
            return 112;
        case 104:
            return 133;
        case 137:
            return 142;
        case 140:
            return 144;
        default:
            reportAbortNoh("retrieve goto of nonterminal Expr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItem>(size_t state)
{
    switch (state)
    {
        case 78:
            return 108;
        case 136:
            return 141;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItem in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BuiltinType>(size_t state)
{
    switch (state)
    {
        case 4:
        case 22:
        case 29:
        case 40:
            return 7;
        default:
            reportAbortNoh("retrieve goto of nonterminal BuiltinType in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Args>(size_t state)
{
    switch (state)
    {
        case 104:
            return 131;
        default:
            reportAbortNoh("retrieve goto of nonterminal Args in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AssignmentExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 82:
        case 104:
        case 137:
        case 140:
            return 43;
        case 81:
            return 111;
        default:
            reportAbortNoh("retrieve goto of nonterminal AssignmentExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TernaryExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 104:
        case 137:
        case 140:
            return 44;
        case 138:
            return 143;
        default:
            reportAbortNoh("retrieve goto of nonterminal TernaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinorExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 104:
        case 137:
        case 138:
        case 140:
            return 45;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinandExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 104:
        case 137:
        case 138:
        case 140:
            return 46;
        case 83:
            return 113;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinandExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinnotExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 83:
        case 104:
        case 137:
        case 138:
        case 140:
            return 47;
        case 48:
            return 85;
        case 84:
            return 114;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinnotExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CompeqExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 104:
        case 137:
        case 138:
        case 140:
            return 49;
        default:
            reportAbortNoh("retrieve goto of nonterminal CompeqExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ComplgtExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 104:
        case 137:
        case 138:
        case 140:
            return 50;
        case 86:
            return 115;
        case 87:
            return 116;
        default:
            reportAbortNoh("retrieve goto of nonterminal ComplgtExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitxorExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 104:
        case 137:
        case 138:
        case 140:
            return 51;
        case 88:
            return 117;
        case 89:
            return 118;
        case 90:
            return 119;
        case 91:
            return 120;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitxorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitorExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 104:
        case 137:
        case 138:
        case 140:
            return 52;
        case 92:
            return 121;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitandExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 104:
        case 137:
        case 138:
        case 140:
            return 53;
        case 93:
            return 122;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitandExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitshiftExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 104:
        case 137:
        case 138:
        case 140:
            return 54;
        case 94:
            return 123;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitshiftExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AdditionExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 104:
        case 137:
        case 138:
        case 140:
            return 55;
        case 95:
            return 124;
        case 96:
            return 125;
        default:
            reportAbortNoh("retrieve goto of nonterminal AdditionExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MultExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 104:
        case 137:
        case 138:
        case 140:
            return 56;
        case 97:
            return 126;
        case 98:
            return 127;
        default:
            reportAbortNoh("retrieve goto of nonterminal MultExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::UnaryExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 104:
        case 137:
        case 138:
        case 140:
            return 57;
        case 58:
            return 102;
        case 59:
            return 103;
        case 99:
            return 128;
        case 100:
            return 129;
        case 101:
            return 130;
        default:
            reportAbortNoh("retrieve goto of nonterminal UnaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CallExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 58:
        case 59:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 104:
        case 137:
        case 138:
        case 140:
            return 60;
        default:
            reportAbortNoh("retrieve goto of nonterminal CallExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::PrimaryExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 58:
        case 59:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 104:
        case 137:
        case 138:
        case 140:
            return 61;
        default:
            reportAbortNoh("retrieve goto of nonterminal PrimaryExpr in invalid state");
    }
}
// This code was autogenerated - see the utils/ directory

// GETGOTO END
// }}}

static void shift(Parser &p, Token &last, Token &lookahead, std::vector<stackitem> &stack, int &steps, int const &newst)
{
    last = lookahead;
    stack.emplace_back(newst, last);
    lookahead = p.consume();
    ++steps;
}

static Token popT(std::vector<stackitem> &stack)
{
    stackitem si = std::move(stack.back());

    stack.pop_back();
    return si.tok;
}

template <typename A>
static std::unique_ptr<A> popA(std::vector<stackitem> &stack)
{
    stackitem si = std::move(stack.back());
    stack.pop_back();

    A* astraw = static_cast<A*>(si.ast.release());
    return std::unique_ptr<A>(astraw);
}

template <typename A>
static void reduceSkip(std::vector<stackitem> &stack)
{
    size_t newstate = getGoto<A>((stack.end() - 2)->state);
    stack.back().state = newstate;
}

bool _parse(Parser &p, std::vector<stackitem> &stack, bool istrial, std::unique_ptr<ASTNS::DeclB> &out, Token const &_lookahead)
{
    // parser loop {{{
    // PARSERLOOP START

// The following code was autogenerated - see the utils/ directory
#define ERRORSTART() \
    {\
        if (istrial) return false;
#define ERROREND() \
        if (!errorRecovery(p, stack, lookahead, e))\
            done = true;\
        e.report();\
        errored = true;\
    }\
    break;
#define DEFAULTINVALID2(justparsed, expected) \
    ERRORSTART()\
        Error e = p.invalidSyntax(justparsed, expected, lookahead, lasttok);\
    ERROREND()
#define DEFAULTINVALID3(justparsed, expected, whileparsing) \
    ERRORSTART()\
            Error e = p.invalidSyntaxWhile(justparsed, expected, whileparsing, lookahead, lasttok);\
    ERROREND()
#define DEFAULTINVALIDNOEXPECT(justparsed, whileparsing) \
    ERRORSTART()\
            Error e = p.invalidSyntaxNoExpect(justparsed, whileparsing, lookahead, lasttok);\
    ERROREND()
    bool done = false;
    bool errored = false;
    int steps = 0;
    Token lookahead (_lookahead); // for when you need to inject a new token
    Token lasttok = lookahead;
    while (!done)
    {
        if (istrial && steps > 5)
            return true;
        switch (stack.back().state)
        {
            case 0:
               switch (lookahead.type)
               {
                    case TokenType::FUN:
                        shift(p, lasttok, lookahead, stack, steps, 4); break;
                    default:
                    DEFAULTINVALID3("beginning", "declaration list", "compilation unit")
                }
                break;
            case 1:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                            done = true;
                        break;
                    case TokenType::FUN:
                        shift(p, lasttok, lookahead, stack, steps, 4); break;
                    default:
                    DEFAULTINVALID2("declaration list", concatMsg("either ", "declaration", " or ", stringifyTokenType(TokenType::EOF_)))
                }
                break;
            case 2:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        reduceSkip<ASTNS::Decls>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("declaration", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "declaration list")
                }
                break;
            case 3:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        reduceSkip<ASTNS::Decl>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("function declaration", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "declaration")
                }
                break;
            case 4:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 9); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 10); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 11); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 8); break;
                    case TokenType::VOID:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::FUN), "type specifier", "function declaration")
                }
                break;
            case 5:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        {
                            auto a1 (popA<ASTNS::Decl>(stack));
                            auto a0 (popA<ASTNS::Decls>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Decls>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Decls>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("declaration", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "declaration list")
                }
                break;
            case 6:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    default:
                    DEFAULTINVALID3("type specifier", stringifyTokenType(TokenType::IDENTIFIER), "function declaration")
                }
                break;
            case 7:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        reduceSkip<ASTNS::Type>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("builtin type specifier", stringifyTokenType(TokenType::IDENTIFIER), "type specifier")
                }
                break;
            case 8:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT8), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 9:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT16), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 10:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT32), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 11:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT64), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 12:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT8), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 13:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT16), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 14:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT32), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 15:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT64), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 16:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::FLOAT), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 17:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::BOOL), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 18:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLE), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 19:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::VOID), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 20:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CHAR), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 21:
               switch (lookahead.type)
               {
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), stringifyTokenType(TokenType::OPARN), "function declaration")
                }
                break;
            case 22:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 9); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 10); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 11); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 8); break;
                    case TokenType::VOID:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OPARN), concatMsg("either ", "parameter list", " or ", stringifyTokenType(TokenType::CPARN)), "function declaration")
                }
                break;
            case 23:
               switch (lookahead.type)
               {
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 27); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CPARN), "code block", "function declaration")
                }
                break;
            case 24:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 29); break;
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 28); break;
                    default:
                    DEFAULTINVALID2("parameter list", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)))
                }
                break;
            case 25:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 30); break;
                    default:
                    DEFAULTINVALID3("type specifier", stringifyTokenType(TokenType::IDENTIFIER), "parameter list")
                }
                break;
            case 26:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        {
                            auto a5 (popA<ASTNS::Block>(stack));
                            auto a4 (popT(stack));
                            auto a3 (popT(stack));
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Type>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5));
                            size_t newstate = getGoto<ASTNS::Function>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("code block", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "function declaration")
                }
                break;
            case 27:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CCURB:
                        shift(p, lasttok, lookahead, stack, steps, 32); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 27); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::RETURN:
                        shift(p, lasttok, lookahead, stack, steps, 42); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 39); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::VAR:
                        shift(p, lasttok, lookahead, stack, steps, 40); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OCURB), concatMsg("either ", "statement list", " or ", stringifyTokenType(TokenType::CCURB)), "code block")
                }
                break;
            case 28:
               switch (lookahead.type)
               {
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 27); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CPARN), "code block", "function declaration")
                }
                break;
            case 29:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 9); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 10); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 11); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 8); break;
                    case TokenType::VOID:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COMMA), "type specifier", "parameter list")
                }
                break;
            case 30:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::Type>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ParamList>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::ParamList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "parameter list")
                }
                break;
            case 31:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CCURB:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 27); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::RETURN:
                        shift(p, lasttok, lookahead, stack, steps, 42); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 39); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::VAR:
                        shift(p, lasttok, lookahead, stack, steps, 40); break;
                    default:
                    DEFAULTINVALID2("statement list", concatMsg("either ", "statement", " or ", stringifyTokenType(TokenType::CCURB)))
                }
                break;
            case 32:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::EOF_:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::FUN:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Block>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CCURB), concatMsg("either ", "declaration", " or ", "statement"), "code block")
                }
                break;
            case 33:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        reduceSkip<ASTNS::Stmts>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("statement", "statement", "statement list")
                }
                break;
            case 34:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("empty statement", "statement", "statement")
                }
                break;
            case 35:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("variable statement", "statement", "statement")
                }
                break;
            case 36:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("expression statement", "statement", "statement")
                }
                break;
            case 37:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("return statement", "statement", "statement")
                }
                break;
            case 38:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("code block", "statement", "statement")
                }
                break;
            case 39:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::EmptyStmt>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::EmptyStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "empty statement")
                }
                break;
            case 40:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 9); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 10); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 11); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 8); break;
                    case TokenType::VOID:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::VAR), "type specifier", "variable statement")
                }
                break;
            case 41:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 79); break;
                    default:
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::SEMICOLON), "expression statement")
                }
                break;
            case 42:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::RETURN), "expression", "return statement")
                }
                break;
            case 43:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::Expr>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("assignment expression", concatMsg(stringifyTokenType(TokenType::COLON), stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::CPARN), " or ", stringifyTokenType(TokenType::SEMICOLON)), "expression")
                }
                break;
            case 44:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::AssignmentExpr>(stack);
                        break;
                    case TokenType::EQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 81); break;
                    default:
                    DEFAULTINVALID3("ternary expression", concatMsg(stringifyTokenType(TokenType::COLON), stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::CPARN), stringifyTokenType(TokenType::EQUAL), " or ", stringifyTokenType(TokenType::SEMICOLON)), "assignment expression")
                }
                break;
            case 45:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::EQUAL:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::TernaryExpr>(stack);
                        break;
                    case TokenType::DOUBLEPIPE:
                        shift(p, lasttok, lookahead, stack, steps, 83); break;
                    case TokenType::QUESTION:
                        shift(p, lasttok, lookahead, stack, steps, 82); break;
                    default:
                    DEFAULTINVALID2("binary or expression", concatMsg("either ", stringifyTokenType(TokenType::DOUBLEPIPE), " or ", stringifyTokenType(TokenType::QUESTION)))
                }
                break;
            case 46:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::BinorExpr>(stack);
                        break;
                    case TokenType::DOUBLEAMPER:
                        shift(p, lasttok, lookahead, stack, steps, 84); break;
                    default:
                    DEFAULTINVALID2("binary and expression", stringifyTokenType(TokenType::DOUBLEAMPER))
                }
                break;
            case 47:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::BinandExpr>(stack);
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("binary not expression", "binary and expression")
                }
                break;
            case 48:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::BANG), "binary not expression", "binary not expression")
                }
                break;
            case 49:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 86); break;
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::BinnotExpr>(stack);
                        break;
                    case TokenType::DOUBLEEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 87); break;
                    default:
                    DEFAULTINVALID2("equality expression", concatMsg("either ", stringifyTokenType(TokenType::BANGEQUAL), " or ", stringifyTokenType(TokenType::DOUBLEEQUAL)))
                }
                break;
            case 50:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::CompeqExpr>(stack);
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 89); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 91); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 88); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 90); break;
                    default:
                    DEFAULTINVALID2("comparison expression", concatMsg(stringifyTokenType(TokenType::GREATER), stringifyTokenType(TokenType::GREATEREQUAL), stringifyTokenType(TokenType::LESS), " or ", stringifyTokenType(TokenType::LESSEQUAL)))
                }
                break;
            case 51:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::ComplgtExpr>(stack);
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                    default:
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 52:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::BitxorExpr>(stack);
                        break;
                    case TokenType::PIPE:
                        shift(p, lasttok, lookahead, stack, steps, 93); break;
                    default:
                    DEFAULTINVALID2("bitwise or expression", stringifyTokenType(TokenType::PIPE))
                }
                break;
            case 53:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::BitorExpr>(stack);
                        break;
                    default:
                    DEFAULTINVALID2("bitwise and expression", stringifyTokenType(TokenType::AMPER))
                }
                break;
            case 54:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::BitandExpr>(stack);
                        break;
                    case TokenType::DOUBLEGREATER:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                    case TokenType::DOUBLELESS:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                    default:
                    DEFAULTINVALID2("bit shift expression", concatMsg("either ", stringifyTokenType(TokenType::DOUBLEGREATER), " or ", stringifyTokenType(TokenType::DOUBLELESS)))
                }
                break;
            case 55:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::BitshiftExpr>(stack);
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                    default:
                    DEFAULTINVALID2("addition expression", concatMsg("either ", stringifyTokenType(TokenType::MINUS), " or ", stringifyTokenType(TokenType::PLUS)))
                }
                break;
            case 56:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::AdditionExpr>(stack);
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 101); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 100); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 99); break;
                    default:
                    DEFAULTINVALID2("multiplication expression", concatMsg(stringifyTokenType(TokenType::PERCENT), stringifyTokenType(TokenType::SLASH), " or ", stringifyTokenType(TokenType::STAR)))
                }
                break;
            case 57:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        reduceSkip<ASTNS::MultExpr>(stack);
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 58:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::TILDE), "unary expression", "unary expression")
                }
                break;
            case 59:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::MINUS), "unary expression", "unary expression")
                }
                break;
            case 60:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        reduceSkip<ASTNS::UnaryExpr>(stack);
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("function call expression", "unary expression")
                }
                break;
            case 61:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        reduceSkip<ASTNS::CallExpr>(stack);
                        break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 104); break;
                    default:
                    DEFAULTINVALID3("primary expression", stringifyTokenType(TokenType::OPARN), "function call expression")
                }
                break;
            case 62:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::TRUELIT), "primary expression")
                }
                break;
            case 63:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::FALSELIT), "primary expression")
                }
                break;
            case 64:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::FLOATLIT), "primary expression")
                }
                break;
            case 65:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::NULLPTRLIT), "primary expression")
                }
                break;
            case 66:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::DECINTLIT), "primary expression")
                }
                break;
            case 67:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::OCTINTLIT), "primary expression")
                }
                break;
            case 68:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::BININTLIT), "primary expression")
                }
                break;
            case 69:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::HEXINTLIT), "primary expression")
                }
                break;
            case 70:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CHARLIT), "primary expression")
                }
                break;
            case 71:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::STRINGLIT), "primary expression")
                }
                break;
            case 72:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::IDENTIFIER), "primary expression")
                }
                break;
            case 73:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OPARN), "expression", "primary expression")
                }
                break;
            case 74:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        {
                            auto a6 (popA<ASTNS::Block>(stack));
                            auto a5 (popT(stack));
                            auto a4 (popA<ASTNS::ParamList>(stack));
                            auto a3 (popT(stack));
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Type>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5), std::move(a6));
                            size_t newstate = getGoto<ASTNS::Function>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("code block", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "function declaration")
                }
                break;
            case 75:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 106); break;
                    default:
                    DEFAULTINVALID3("type specifier", stringifyTokenType(TokenType::IDENTIFIER), "parameter list")
                }
                break;
            case 76:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::EOF_:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::FUN:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Stmts>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Block>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CCURB), concatMsg("either ", "declaration", " or ", "statement"), "code block")
                }
                break;
            case 77:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            auto a1 (popA<ASTNS::Stmt>(stack));
                            auto a0 (popA<ASTNS::Stmts>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Stmts>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Stmts>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("statement", "statement", "statement list")
                }
                break;
            case 78:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 109); break;
                    default:
                    DEFAULTINVALID3("type specifier", "variable statement assignment list", "variable statement")
                }
                break;
            case 79:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::Expr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ExprStmt>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::ExprStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "expression statement")
                }
                break;
            case 80:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 110); break;
                    default:
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::SEMICOLON), "return statement")
                }
                break;
            case 81:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::EQUAL), "assignment expression", "assignment expression")
                }
                break;
            case 82:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::QUESTION), "expression", "ternary expression")
                }
                break;
            case 83:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEPIPE), "binary and expression", "binary or expression")
                }
                break;
            case 84:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEAMPER), "binary not expression", "binary and expression")
                }
                break;
            case 85:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a1 (popA<ASTNS::BinnotExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BinnotExpr>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::BinnotExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("binary not expression", "binary not expression")
                }
                break;
            case 86:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::BANGEQUAL), "comparison expression", "equality expression")
                }
                break;
            case 87:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEEQUAL), "comparison expression", "equality expression")
                }
                break;
            case 88:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::LESS), "bitwise xor expression", "comparison expression")
                }
                break;
            case 89:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::GREATER), "bitwise xor expression", "comparison expression")
                }
                break;
            case 90:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::LESSEQUAL), "bitwise xor expression", "comparison expression")
                }
                break;
            case 91:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::GREATEREQUAL), "bitwise xor expression", "comparison expression")
                }
                break;
            case 92:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CARET), "bitwise or expression", "bitwise xor expression")
                }
                break;
            case 93:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::PIPE), "bitwise and expression", "bitwise or expression")
                }
                break;
            case 94:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::AMPER), "bit shift expression", "bitwise and expression")
                }
                break;
            case 95:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEGREATER), "addition expression", "bit shift expression")
                }
                break;
            case 96:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLELESS), "addition expression", "bit shift expression")
                }
                break;
            case 97:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::PLUS), "multiplication expression", "addition expression")
                }
                break;
            case 98:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::MINUS), "multiplication expression", "addition expression")
                }
                break;
            case 99:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::STAR), "unary expression", "multiplication expression")
                }
                break;
            case 100:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SLASH), "unary expression", "multiplication expression")
                }
                break;
            case 101:
               switch (lookahead.type)
               {
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::PERCENT), "unary expression", "multiplication expression")
                }
                break;
            case 102:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::UnaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("unary expression", "unary expression")
                }
                break;
            case 103:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::UnaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("unary expression", "unary expression")
                }
                break;
            case 104:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 132); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OPARN), concatMsg("either ", "argument list", " or ", stringifyTokenType(TokenType::CPARN)), "function call expression")
                }
                break;
            case 105:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 134); break;
                    default:
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::CPARN), "primary expression")
                }
                break;
            case 106:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::Type>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ParamList>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ParamList>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::ParamList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "parameter list")
                }
                break;
            case 107:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 136); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 135); break;
                    default:
                    DEFAULTINVALID2("variable statement assignment list", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)))
                }
                break;
            case 108:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        reduceSkip<ASTNS::VarStmtItems>(stack);
                        break;
                    default:
                    DEFAULTINVALID3("variable statement assignment", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment list")
                }
                break;
            case 109:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmtItem>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::VarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::EQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 137); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), concatMsg(stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::EQUAL), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment")
                }
                break;
            case 110:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Expr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::RetStmt>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::RetStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "return statement")
                }
                break;
            case 111:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::AssignmentExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::TernaryExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::AssignmentExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::AssignmentExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("assignment expression", concatMsg(stringifyTokenType(TokenType::COLON), stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::CPARN), " or ", stringifyTokenType(TokenType::SEMICOLON)), "assignment expression")
                }
                break;
            case 112:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                        shift(p, lasttok, lookahead, stack, steps, 138); break;
                    default:
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::COLON), "ternary expression")
                }
                break;
            case 113:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BinandExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BinorExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BinorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEAMPER:
                        shift(p, lasttok, lookahead, stack, steps, 84); break;
                    default:
                    DEFAULTINVALID2("binary and expression", stringifyTokenType(TokenType::DOUBLEAMPER))
                }
                break;
            case 114:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BinnotExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinandExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BinandExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BinandExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("binary not expression", "binary and expression")
                }
                break;
            case 115:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::ComplgtExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompeqExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CompeqExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::CompeqExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 89); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 91); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 88); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 90); break;
                    default:
                    DEFAULTINVALID2("comparison expression", concatMsg(stringifyTokenType(TokenType::GREATER), stringifyTokenType(TokenType::GREATEREQUAL), stringifyTokenType(TokenType::LESS), " or ", stringifyTokenType(TokenType::LESSEQUAL)))
                }
                break;
            case 116:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::ComplgtExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompeqExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CompeqExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::CompeqExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 89); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 91); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 88); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 90); break;
                    default:
                    DEFAULTINVALID2("comparison expression", concatMsg(stringifyTokenType(TokenType::GREATER), stringifyTokenType(TokenType::GREATEREQUAL), stringifyTokenType(TokenType::LESS), " or ", stringifyTokenType(TokenType::LESSEQUAL)))
                }
                break;
            case 117:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                    default:
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 118:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                    default:
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 119:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                    default:
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 120:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                    default:
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 121:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BitorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitxorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitxorExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitxorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::PIPE:
                        shift(p, lasttok, lookahead, stack, steps, 93); break;
                    default:
                    DEFAULTINVALID2("bitwise or expression", stringifyTokenType(TokenType::PIPE))
                }
                break;
            case 122:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BitandExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitorExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID2("bitwise and expression", stringifyTokenType(TokenType::AMPER))
                }
                break;
            case 123:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::BitshiftExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitandExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitandExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitandExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEGREATER:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                    case TokenType::DOUBLELESS:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                    default:
                    DEFAULTINVALID2("bit shift expression", concatMsg("either ", stringifyTokenType(TokenType::DOUBLEGREATER), " or ", stringifyTokenType(TokenType::DOUBLELESS)))
                }
                break;
            case 124:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::AdditionExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitshiftExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitshiftExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitshiftExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                    default:
                    DEFAULTINVALID2("addition expression", concatMsg("either ", stringifyTokenType(TokenType::MINUS), " or ", stringifyTokenType(TokenType::PLUS)))
                }
                break;
            case 125:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::AdditionExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitshiftExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitshiftExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitshiftExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                    default:
                    DEFAULTINVALID2("addition expression", concatMsg("either ", stringifyTokenType(TokenType::MINUS), " or ", stringifyTokenType(TokenType::PLUS)))
                }
                break;
            case 126:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::MultExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::AdditionExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::AdditionExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 101); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 100); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 99); break;
                    default:
                    DEFAULTINVALID2("multiplication expression", concatMsg(stringifyTokenType(TokenType::PERCENT), stringifyTokenType(TokenType::SLASH), " or ", stringifyTokenType(TokenType::STAR)))
                }
                break;
            case 127:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::MultExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::AdditionExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::AdditionExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 101); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 100); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 99); break;
                    default:
                    DEFAULTINVALID2("multiplication expression", concatMsg(stringifyTokenType(TokenType::PERCENT), stringifyTokenType(TokenType::SLASH), " or ", stringifyTokenType(TokenType::STAR)))
                }
                break;
            case 128:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 129:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 130:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 131:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 140); break;
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 139); break;
                    default:
                    DEFAULTINVALID2("argument list", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)))
                }
                break;
            case 132:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::PrimaryExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CallExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::CallExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CPARN), "function call expression")
                }
                break;
            case 133:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            auto a0 (popA<ASTNS::Expr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Args>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Args>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("expression", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "argument list")
                }
                break;
            case 134:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Expr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CPARN), "primary expression")
                }
                break;
            case 135:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::VarStmtItems>(stack));
                            auto a1 (popA<ASTNS::Type>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmt>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::VarStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "variable statement")
                }
                break;
            case 136:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 109); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COMMA), "variable statement assignment", "variable statement assignment list")
                }
                break;
            case 137:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::EQUAL), "expression", "variable statement assignment")
                }
                break;
            case 138:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COLON), "ternary expression", "ternary expression")
                }
                break;
            case 139:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::Args>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::PrimaryExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CallExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::CallExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CPARN), "function call expression")
                }
                break;
            case 140:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 48); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 64); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 59); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 65); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 58); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    default:
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COMMA), "expression", "argument list")
                }
                break;
            case 141:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::VarStmtItem>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::VarStmtItems>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmtItems>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::VarStmtItems>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("variable statement assignment", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment list")
                }
                break;
            case 142:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            auto a2 (popA<ASTNS::Expr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmtItem>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::VarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("expression", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment")
                }
                break;
            case 143:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::EQUAL:
                    case TokenType::SEMICOLON:
                        {
                            auto a4 (popA<ASTNS::TernaryExpr>(stack));
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::Expr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::TernaryExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4));
                            size_t newstate = getGoto<ASTNS::TernaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALIDNOEXPECT("ternary expression", "ternary expression")
                }
                break;
            case 144:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            auto a2 (popA<ASTNS::Expr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::Args>(stack));
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Args>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Args>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                    DEFAULTINVALID3("expression", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "argument list")
                }
                break;
            default:
                Error(Error::MsgType::INTERR, lookahead, "Parser reached invalid state")
                    .underline(Error::Underline(lookahead, '!')
                        .error(concatMsg("Parser reached invalid state: ", stack.back().state)))
                    .reportAbort();
        }
    }
#undef DEFAULTINVALID2
#undef DEFAULTINVALID3
// This code was autogenerated - see the utils/ directory

    // PARSERLOOP END
    // }}}

    if (istrial)
        return true;

    if (errored)
        return false;

    stackitem topsi (std::move(stack.back()));
    if (topsi.istok)
        reportAbortNoh("topsi is tok when parser not errored");

    std::unique_ptr<ASTNS::AST> astu (std::move(topsi.ast));
    ASTNS::DeclB *decls = dynamic_cast<ASTNS::DeclB*>(astu.get());
    if (!decls)
        reportAbortNoh("decls is not a DeclB despite parser not errored");

    astu.release();
    out = std::unique_ptr<ASTNS::DeclB> (decls);
    return true;
}
