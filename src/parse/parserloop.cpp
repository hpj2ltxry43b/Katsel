#include "parse/parser.h"
#include "parsestack.h" // in a private header file
#include <vector>

// get goto {{{
// GETGOTO START

// The following code was autogenerated - see the utils/ directory
template <> size_t getGoto<ASTNS::CU>(size_t state)
{
    switch (state)
    {
        case 0:
            return 1;
        default:
            reportAbortNoh("retrieve goto of nonterminal CU in invalid state");
    }
}
template <> size_t getGoto<ASTNS::DeclList>(size_t state)
{
    switch (state)
    {
        case 0:
            return 2;
        case 3:
            return 7;
        default:
            reportAbortNoh("retrieve goto of nonterminal DeclList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Decl>(size_t state)
{
    switch (state)
    {
        case 0:
        case 3:
            return 3;
        default:
            reportAbortNoh("retrieve goto of nonterminal Decl in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Function>(size_t state)
{
    switch (state)
    {
        case 0:
        case 3:
            return 4;
        default:
            reportAbortNoh("retrieve goto of nonterminal Function in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MoreDecl>(size_t state)
{
    switch (state)
    {
        case 3:
            return 6;
        default:
            reportAbortNoh("retrieve goto of nonterminal MoreDecl in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TypeV>(size_t state)
{
    switch (state)
    {
        case 5:
            return 8;
        default:
            reportAbortNoh("retrieve goto of nonterminal TypeV in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Block>(size_t state)
{
    switch (state)
    {
        case 26:
            return 30;
        case 31:
        case 38:
            return 43;
        case 32:
            return 78;
        default:
            reportAbortNoh("retrieve goto of nonterminal Block in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ParamList>(size_t state)
{
    switch (state)
    {
        case 25:
            return 27;
        case 34:
            return 79;
        default:
            reportAbortNoh("retrieve goto of nonterminal ParamList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::StmtList>(size_t state)
{
    switch (state)
    {
        case 31:
            return 36;
        case 38:
            return 82;
        default:
            reportAbortNoh("retrieve goto of nonterminal StmtList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Stmt>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
            return 38;
        default:
            reportAbortNoh("retrieve goto of nonterminal Stmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MoreStmt>(size_t state)
{
    switch (state)
    {
        case 38:
            return 81;
        default:
            reportAbortNoh("retrieve goto of nonterminal MoreStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::EmptyStmt>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
            return 39;
        default:
            reportAbortNoh("retrieve goto of nonterminal EmptyStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmt>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
            return 40;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ExprStmt>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
            return 41;
        default:
            reportAbortNoh("retrieve goto of nonterminal ExprStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::RetStmt>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
            return 42;
        default:
            reportAbortNoh("retrieve goto of nonterminal RetStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TypeNV>(size_t state)
{
    switch (state)
    {
        case 5:
            return 9;
        case 25:
        case 34:
            return 29;
        case 45:
            return 83;
        default:
            reportAbortNoh("retrieve goto of nonterminal TypeNV in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItemList>(size_t state)
{
    switch (state)
    {
        case 83:
            return 112;
        case 143:
            return 149;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItemList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Expr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
            return 46;
        case 47:
            return 85;
        case 77:
            return 111;
        case 88:
            return 117;
        case 110:
        case 148:
            return 139;
        case 144:
            return 150;
        default:
            reportAbortNoh("retrieve goto of nonterminal Expr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItem>(size_t state)
{
    switch (state)
    {
        case 83:
        case 143:
            return 113;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItem in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MoreVarStmtItem>(size_t state)
{
    switch (state)
    {
        case 113:
            return 142;
        default:
            reportAbortNoh("retrieve goto of nonterminal MoreVarStmtItem in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BuiltinTypeNoVoid>(size_t state)
{
    switch (state)
    {
        case 5:
        case 25:
        case 34:
        case 45:
            return 11;
        default:
            reportAbortNoh("retrieve goto of nonterminal BuiltinTypeNoVoid in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ArgList>(size_t state)
{
    switch (state)
    {
        case 110:
            return 136;
        case 148:
            return 152;
        default:
            reportAbortNoh("retrieve goto of nonterminal ArgList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Arg>(size_t state)
{
    switch (state)
    {
        case 110:
        case 148:
            return 138;
        default:
            reportAbortNoh("retrieve goto of nonterminal Arg in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MoreArg>(size_t state)
{
    switch (state)
    {
        case 138:
            return 147;
        default:
            reportAbortNoh("retrieve goto of nonterminal MoreArg in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Param>(size_t state)
{
    switch (state)
    {
        case 25:
        case 34:
            return 28;
        default:
            reportAbortNoh("retrieve goto of nonterminal Param in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MoreParam>(size_t state)
{
    switch (state)
    {
        case 28:
            return 33;
        default:
            reportAbortNoh("retrieve goto of nonterminal MoreParam in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AssignmentExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 88:
        case 110:
        case 144:
        case 148:
            return 48;
        case 87:
            return 116;
        default:
            reportAbortNoh("retrieve goto of nonterminal AssignmentExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TernaryExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 110:
        case 144:
        case 148:
            return 49;
        case 145:
            return 151;
        default:
            reportAbortNoh("retrieve goto of nonterminal TernaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinorExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 110:
        case 144:
        case 145:
        case 148:
            return 50;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinandExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 110:
        case 144:
        case 145:
        case 148:
            return 51;
        case 89:
            return 118;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinandExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CompeqExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 110:
        case 144:
        case 145:
        case 148:
            return 52;
        case 90:
            return 119;
        default:
            reportAbortNoh("retrieve goto of nonterminal CompeqExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ComplgtExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 110:
        case 144:
        case 145:
        case 148:
            return 53;
        case 91:
            return 120;
        case 92:
            return 121;
        default:
            reportAbortNoh("retrieve goto of nonterminal ComplgtExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitxorExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 110:
        case 144:
        case 145:
        case 148:
            return 54;
        case 93:
            return 122;
        case 94:
            return 123;
        case 95:
            return 124;
        case 96:
            return 125;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitxorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitorExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 110:
        case 144:
        case 145:
        case 148:
            return 55;
        case 97:
            return 126;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitandExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 110:
        case 144:
        case 145:
        case 148:
            return 56;
        case 98:
            return 127;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitandExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitshiftExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 110:
        case 144:
        case 145:
        case 148:
            return 57;
        case 99:
            return 128;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitshiftExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AdditionExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 110:
        case 144:
        case 145:
        case 148:
            return 58;
        case 100:
            return 129;
        case 101:
            return 130;
        default:
            reportAbortNoh("retrieve goto of nonterminal AdditionExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MultExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 110:
        case 144:
        case 145:
        case 148:
            return 59;
        case 102:
            return 131;
        case 103:
            return 132;
        default:
            reportAbortNoh("retrieve goto of nonterminal MultExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::UnaryExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 110:
        case 144:
        case 145:
        case 148:
            return 60;
        case 61:
            return 107;
        case 62:
            return 108;
        case 63:
            return 109;
        case 104:
            return 133;
        case 105:
            return 134;
        case 106:
            return 135;
        default:
            reportAbortNoh("retrieve goto of nonterminal UnaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CallExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 61:
        case 62:
        case 63:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 110:
        case 144:
        case 145:
        case 148:
            return 64;
        default:
            reportAbortNoh("retrieve goto of nonterminal CallExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::PrimaryExpr>(size_t state)
{
    switch (state)
    {
        case 31:
        case 38:
        case 47:
        case 61:
        case 62:
        case 63:
        case 77:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 110:
        case 144:
        case 145:
        case 148:
            return 65;
        default:
            reportAbortNoh("retrieve goto of nonterminal PrimaryExpr in invalid state");
    }
}
// This code was autogenerated - see the utils/ directory

// GETGOTO END
// }}}

static void shift(Parser &p, Token &last, Token &lookahead, std::vector<stackitem> &stack, int &steps, int const &newst)
{
    last = lookahead;
    stack.emplace_back(newst, last);
    lookahead = p.consume();
    ++steps;
}

static Token popT(std::vector<stackitem> &stack)
{
    stackitem si = std::move(stack.back());

    stack.pop_back();
    return si.tok;
}

template <typename A>
static std::unique_ptr<A> popA(std::vector<stackitem> &stack)
{
    stackitem si = std::move(stack.back());
    stack.pop_back();

    A* astraw = static_cast<A*>(si.ast.release());
    return std::unique_ptr<A>(astraw);
}

template <typename A>
static void reduceSkip(std::vector<stackitem> &stack)
{
    size_t newstate = getGoto<A>((stack.end() - 2)->state);
    stack.back().state = newstate;
}

static void error(bool &done, bool &errored, errorstate const &ers, std::vector<std::string> const &expectations)
{
    errored = true;

    if (!errorRecovery(ers, expectations))
        done = true;
}

bool _parse(Parser &p, std::vector<stackitem> &stack, bool istrial, std::unique_ptr<ASTNS::CUB> &out, Token const &_lookahead)
{
    // parser loop {{{
    // PARSERLOOP START

// The following code was autogenerated - see the utils/ directory
    bool done = false;
    bool errored = false;
    int steps = 0;
    Token lookahead (_lookahead); // for when you need to inject a new token
    Token lasttok = lookahead;
    while (!done)
    {
        if (istrial && steps > 5)
            return true;
        switch (stack.back().state)
        {
            case 0:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CU>());
                            size_t newstate = getGoto<ASTNS::CU>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::FUN:
                        shift(p, lasttok, lookahead, stack, steps, 5); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "compilation unit", " for ", "")});
                }
                break;
            case 1:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                            done = true;
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 2:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            auto a0 (popA<ASTNS::DeclList>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CU>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::CU>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 3:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreDecl>());
                            size_t newstate = getGoto<ASTNS::MoreDecl>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::FUN:
                        shift(p, lasttok, lookahead, stack, steps, 5); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "more declarations", " for ", "declaration list")});
                }
                break;
            case 4:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Decl>(stack);
                        break;
                }
                break;
            case 5:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    case TokenType::VOID:
                        shift(p, lasttok, lookahead, stack, steps, 10); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "void-inclusive type specifier", " for ", "function declaration")});
                }
                break;
            case 6:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        {
                            auto a1 (popA<ASTNS::MoreDecl>(stack));
                            auto a0 (popA<ASTNS::Decl>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::DeclList>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::DeclList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 7:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                        reduceSkip<ASTNS::MoreDecl>(stack);
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 8:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 24); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::IDENTIFIER), " for ", "function declaration")});
                }
                break;
            case 9:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::TypeV>(stack);
                        break;
                }
                break;
            case 10:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::TypeV>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::TypeV>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 11:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::TypeNV>(stack);
                        break;
                }
                break;
            case 12:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 13:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 14:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 15:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 16:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 17:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 18:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 19:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 20:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 21:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 22:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 23:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BuiltinTypeNoVoid>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::BuiltinTypeNoVoid>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 24:
               switch (lookahead.type)
               {
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 25); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::OPARN), " for ", "function declaration")});
                }
                break;
            case 25:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 26); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", concatMsg("either ", stringifyTokenType(TokenType::CPARN), " or ", "parameter list"), " for ", "function declaration")});
                }
                break;
            case 26:
               switch (lookahead.type)
               {
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 31); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "code block", " for ", "function declaration")});
                }
                break;
            case 27:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 32); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::CPARN), " for ", "function declaration")});
                }
                break;
            case 28:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 34); break;
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreParam>());
                            size_t newstate = getGoto<ASTNS::MoreParam>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "more parameters", " for ", "parameter list")});
                }
                break;
            case 29:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 35); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::IDENTIFIER), " for ", "parameter")});
                }
                break;
            case 30:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a5 (popA<ASTNS::Block>(stack));
                            auto a4 (popT(stack));
                            auto a3 (popT(stack));
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::TypeV>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5)));
                            size_t newstate = getGoto<ASTNS::Function>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 31:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CCURB:
                        shift(p, lasttok, lookahead, stack, steps, 37); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 31); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::RETURN:
                        shift(p, lasttok, lookahead, stack, steps, 47); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 44); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::VAR:
                        shift(p, lasttok, lookahead, stack, steps, 45); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", concatMsg("either ", "statement list", " or ", stringifyTokenType(TokenType::CCURB)), " for ", "code block")});
                }
                break;
            case 32:
               switch (lookahead.type)
               {
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 31); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "code block", " for ", "function declaration")});
                }
                break;
            case 33:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            auto a1 (popA<ASTNS::MoreParam>(stack));
                            auto a0 (popA<ASTNS::Param>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ParamList>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::ParamList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 34:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "parameter list", " for ", "more parameters")});
                }
                break;
            case 35:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::TypeNV>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Param>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::Param>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 36:
               switch (lookahead.type)
               {
                    case TokenType::CCURB:
                        shift(p, lasttok, lookahead, stack, steps, 80); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::CCURB), " for ", "code block")});
                }
                break;
            case 37:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::Block>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 38:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CCURB:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreStmt>());
                            size_t newstate = getGoto<ASTNS::MoreStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OCURB:
                        shift(p, lasttok, lookahead, stack, steps, 31); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::RETURN:
                        shift(p, lasttok, lookahead, stack, steps, 47); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 44); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    case TokenType::VAR:
                        shift(p, lasttok, lookahead, stack, steps, 45); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "more statements", " for ", "statement list")});
                }
                break;
            case 39:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 40:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 41:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 42:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 43:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Stmt>(stack);
                        break;
                }
                break;
            case 44:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::EmptyStmt>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::EmptyStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 45:
               switch (lookahead.type)
               {
                    case TokenType::BOOL:
                        shift(p, lasttok, lookahead, stack, steps, 21); break;
                    case TokenType::CHAR:
                        shift(p, lasttok, lookahead, stack, steps, 23); break;
                    case TokenType::DOUBLE:
                        shift(p, lasttok, lookahead, stack, steps, 22); break;
                    case TokenType::FLOAT:
                        shift(p, lasttok, lookahead, stack, steps, 20); break;
                    case TokenType::SINT16:
                        shift(p, lasttok, lookahead, stack, steps, 17); break;
                    case TokenType::SINT32:
                        shift(p, lasttok, lookahead, stack, steps, 18); break;
                    case TokenType::SINT64:
                        shift(p, lasttok, lookahead, stack, steps, 19); break;
                    case TokenType::SINT8:
                        shift(p, lasttok, lookahead, stack, steps, 16); break;
                    case TokenType::UINT16:
                        shift(p, lasttok, lookahead, stack, steps, 13); break;
                    case TokenType::UINT32:
                        shift(p, lasttok, lookahead, stack, steps, 14); break;
                    case TokenType::UINT64:
                        shift(p, lasttok, lookahead, stack, steps, 15); break;
                    case TokenType::UINT8:
                        shift(p, lasttok, lookahead, stack, steps, 12); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "non-void type specifier", " for ", "variable statement")});
                }
                break;
            case 46:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 84); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::SEMICOLON), " for ", "expression statement")});
                }
                break;
            case 47:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 86); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", concatMsg("either ", "expression", " or ", stringifyTokenType(TokenType::SEMICOLON)), " for ", "return statement")});
                }
                break;
            case 48:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::Expr>(stack);
                        break;
                }
                break;
            case 49:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AssignmentExpr>(stack);
                        break;
                    case TokenType::EQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 87); break;
                }
                break;
            case 50:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::TernaryExpr>(stack);
                        break;
                    case TokenType::DOUBLEPIPE:
                        shift(p, lasttok, lookahead, stack, steps, 89); break;
                    case TokenType::QUESTION:
                        shift(p, lasttok, lookahead, stack, steps, 88); break;
                }
                break;
            case 51:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BinorExpr>(stack);
                        break;
                    case TokenType::DOUBLEAMPER:
                        shift(p, lasttok, lookahead, stack, steps, 90); break;
                }
                break;
            case 52:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 91); break;
                    default:
                        reduceSkip<ASTNS::BinandExpr>(stack);
                        break;
                    case TokenType::DOUBLEEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                }
                break;
            case 53:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::CompeqExpr>(stack);
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 93); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                }
                break;
            case 54:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::ComplgtExpr>(stack);
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                }
                break;
            case 55:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BitxorExpr>(stack);
                        break;
                    case TokenType::PIPE:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                }
                break;
            case 56:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                        shift(p, lasttok, lookahead, stack, steps, 99); break;
                    default:
                        reduceSkip<ASTNS::BitorExpr>(stack);
                        break;
                }
                break;
            case 57:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BitandExpr>(stack);
                        break;
                    case TokenType::DOUBLEGREATER:
                        shift(p, lasttok, lookahead, stack, steps, 100); break;
                    case TokenType::DOUBLELESS:
                        shift(p, lasttok, lookahead, stack, steps, 101); break;
                }
                break;
            case 58:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::BitshiftExpr>(stack);
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 103); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 102); break;
                }
                break;
            case 59:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::AdditionExpr>(stack);
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 106); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 105); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 104); break;
                }
                break;
            case 60:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::MultExpr>(stack);
                        break;
                }
                break;
            case 61:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "unary expression", " for ", "unary expression")});
                }
                break;
            case 62:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "unary expression", " for ", "unary expression")});
                }
                break;
            case 63:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "unary expression", " for ", "unary expression")});
                }
                break;
            case 64:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::UnaryExpr>(stack);
                        break;
                }
                break;
            case 65:
               switch (lookahead.type)
               {
                    default:
                        reduceSkip<ASTNS::CallExpr>(stack);
                        break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 110); break;
                }
                break;
            case 66:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 67:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 68:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 69:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 70:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 71:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 72:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 73:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 74:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 75:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 76:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 77:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "expression", " for ", "primary expression")});
                }
                break;
            case 78:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a6 (popA<ASTNS::Block>(stack));
                            auto a5 (popT(stack));
                            auto a4 (popA<ASTNS::ParamList>(stack));
                            auto a3 (popT(stack));
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::TypeV>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5), std::move(a6)));
                            size_t newstate = getGoto<ASTNS::Function>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 79:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            auto a1 (popA<ASTNS::ParamList>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreParam>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::MoreParam>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 80:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::StmtList>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::Block>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 81:
               switch (lookahead.type)
               {
                    case TokenType::CCURB:
                        {
                            auto a1 (popA<ASTNS::MoreStmt>(stack));
                            auto a0 (popA<ASTNS::Stmt>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::StmtList>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::StmtList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 82:
               switch (lookahead.type)
               {
                    case TokenType::CCURB:
                        reduceSkip<ASTNS::MoreStmt>(stack);
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 83:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 114); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "variable statement initialization list", " for ", "variable statement")});
                }
                break;
            case 84:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::Expr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ExprStmt>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::ExprStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 85:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 115); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::SEMICOLON), " for ", "return statement")});
                }
                break;
            case 86:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::RetStmt>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::RetStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 87:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "assignment expression", " for ", "assignment expression")});
                }
                break;
            case 88:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "expression", " for ", "ternary expression")});
                }
                break;
            case 89:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "binary and expression", " for ", "binary or expression")});
                }
                break;
            case 90:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "equality expression", " for ", "binary and expression")});
                }
                break;
            case 91:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "comparison expression", " for ", "equality expression")});
                }
                break;
            case 92:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "comparison expression", " for ", "equality expression")});
                }
                break;
            case 93:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "bitwise xor expression", " for ", "comparison expression")});
                }
                break;
            case 94:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "bitwise xor expression", " for ", "comparison expression")});
                }
                break;
            case 95:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "bitwise xor expression", " for ", "comparison expression")});
                }
                break;
            case 96:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "bitwise xor expression", " for ", "comparison expression")});
                }
                break;
            case 97:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "bitwise or expression", " for ", "bitwise xor expression")});
                }
                break;
            case 98:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "bitwise and expression", " for ", "bitwise or expression")});
                }
                break;
            case 99:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "bit shift expression", " for ", "bitwise and expression")});
                }
                break;
            case 100:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "addition expression", " for ", "bit shift expression")});
                }
                break;
            case 101:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "addition expression", " for ", "bit shift expression")});
                }
                break;
            case 102:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "multiplication expression", " for ", "addition expression")});
                }
                break;
            case 103:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "multiplication expression", " for ", "addition expression")});
                }
                break;
            case 104:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "unary expression", " for ", "multiplication expression")});
                }
                break;
            case 105:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "unary expression", " for ", "multiplication expression")});
                }
                break;
            case 106:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "unary expression", " for ", "multiplication expression")});
                }
                break;
            case 107:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::UnaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 108:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::UnaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 109:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a1 (popA<ASTNS::UnaryExpr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::UnaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 110:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 137); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", concatMsg("either ", "argument list", " or ", stringifyTokenType(TokenType::CPARN)), " for ", "function call expression")});
                }
                break;
            case 111:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 140); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::CPARN), " for ", "primary expression")});
                }
                break;
            case 112:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        shift(p, lasttok, lookahead, stack, steps, 141); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::SEMICOLON), " for ", "variable statement")});
                }
                break;
            case 113:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 143); break;
                    case TokenType::SEMICOLON:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreVarStmtItem>());
                            size_t newstate = getGoto<ASTNS::MoreVarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "more variable statement initializations", " for ", "variable statement initialization list")});
                }
                break;
            case 114:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmtItem>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::VarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::EQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 144); break;
                }
                break;
            case 115:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Expr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::RetStmt>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::RetStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 116:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AssignmentExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::TernaryExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::AssignmentExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::AssignmentExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 117:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                        shift(p, lasttok, lookahead, stack, steps, 145); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::COLON), " for ", "ternary expression")});
                }
                break;
            case 118:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BinandExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BinorExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::BinorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEAMPER:
                        shift(p, lasttok, lookahead, stack, steps, 90); break;
                }
                break;
            case 119:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 91); break;
                    default:
                        {
                            auto a2 (popA<ASTNS::CompeqExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinandExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BinandExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::BinandExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 92); break;
                }
                break;
            case 120:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::ComplgtExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompeqExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompeqExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::CompeqExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 93); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                }
                break;
            case 121:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::ComplgtExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::CompeqExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CompeqExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::CompeqExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::GREATER:
                        shift(p, lasttok, lookahead, stack, steps, 94); break;
                    case TokenType::GREATEREQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 96); break;
                    case TokenType::LESS:
                        shift(p, lasttok, lookahead, stack, steps, 93); break;
                    case TokenType::LESSEQUAL:
                        shift(p, lasttok, lookahead, stack, steps, 95); break;
                }
                break;
            case 122:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                }
                break;
            case 123:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                }
                break;
            case 124:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                }
                break;
            case 125:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitxorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::ComplgtExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::CARET:
                        shift(p, lasttok, lookahead, stack, steps, 97); break;
                }
                break;
            case 126:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitorExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitxorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitxorExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::BitxorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::PIPE:
                        shift(p, lasttok, lookahead, stack, steps, 98); break;
                }
                break;
            case 127:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                        shift(p, lasttok, lookahead, stack, steps, 99); break;
                    default:
                        {
                            auto a2 (popA<ASTNS::BitandExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitorExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::BitorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 128:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::BitshiftExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitandExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitandExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::BitandExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::DOUBLEGREATER:
                        shift(p, lasttok, lookahead, stack, steps, 100); break;
                    case TokenType::DOUBLELESS:
                        shift(p, lasttok, lookahead, stack, steps, 101); break;
                }
                break;
            case 129:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AdditionExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitshiftExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitshiftExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::BitshiftExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 103); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 102); break;
                }
                break;
            case 130:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::AdditionExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BitshiftExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::BitshiftExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::BitshiftExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 103); break;
                    case TokenType::PLUS:
                        shift(p, lasttok, lookahead, stack, steps, 102); break;
                }
                break;
            case 131:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::MultExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::AdditionExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::AdditionExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 106); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 105); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 104); break;
                }
                break;
            case 132:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::MultExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::AdditionExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::AdditionExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    case TokenType::PERCENT:
                        shift(p, lasttok, lookahead, stack, steps, 106); break;
                    case TokenType::SLASH:
                        shift(p, lasttok, lookahead, stack, steps, 105); break;
                    case TokenType::STAR:
                        shift(p, lasttok, lookahead, stack, steps, 104); break;
                }
                break;
            case 133:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 134:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 135:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::UnaryExpr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::MultExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 136:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        shift(p, lasttok, lookahead, stack, steps, 146); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", stringifyTokenType(TokenType::CPARN), " for ", "function call expression")});
                }
                break;
            case 137:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::PrimaryExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CallExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::CallExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 138:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                        shift(p, lasttok, lookahead, stack, steps, 148); break;
                    case TokenType::CPARN:
                        {
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreArg>());
                            size_t newstate = getGoto<ASTNS::MoreArg>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "more arguments", " for ", "argument list")});
                }
                break;
            case 139:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a0 (popA<ASTNS::Expr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::Arg>(std::move(a0)));
                            size_t newstate = getGoto<ASTNS::Arg>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 140:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popT(stack));
                            auto a1 (popA<ASTNS::Expr>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::PrimaryExpr>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 141:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::VarStmtItemList>(stack));
                            auto a1 (popA<ASTNS::TypeNV>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmt>(std::move(a0), std::move(a1), std::move(a2), std::move(a3)));
                            size_t newstate = getGoto<ASTNS::VarStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 142:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        {
                            auto a1 (popA<ASTNS::MoreVarStmtItem>(stack));
                            auto a0 (popA<ASTNS::VarStmtItem>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmtItemList>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::VarStmtItemList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 143:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 114); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "variable statement initialization list", " for ", "more variable statement initializations")});
                }
                break;
            case 144:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "expression", " for ", "variable statement initialization")});
                }
                break;
            case 145:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "ternary expression", " for ", "ternary expression")});
                }
                break;
            case 146:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::ArgList>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::PrimaryExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::CallExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3)));
                            size_t newstate = getGoto<ASTNS::CallExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 147:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            auto a1 (popA<ASTNS::MoreArg>(stack));
                            auto a0 (popA<ASTNS::Arg>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::ArgList>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::ArgList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 148:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                        shift(p, lasttok, lookahead, stack, steps, 63); break;
                    case TokenType::BININTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 72); break;
                    case TokenType::CHARLIT:
                        shift(p, lasttok, lookahead, stack, steps, 74); break;
                    case TokenType::DECINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 70); break;
                    case TokenType::FALSELIT:
                        shift(p, lasttok, lookahead, stack, steps, 67); break;
                    case TokenType::FLOATLIT:
                        shift(p, lasttok, lookahead, stack, steps, 68); break;
                    case TokenType::HEXINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 73); break;
                    case TokenType::IDENTIFIER:
                        shift(p, lasttok, lookahead, stack, steps, 76); break;
                    case TokenType::MINUS:
                        shift(p, lasttok, lookahead, stack, steps, 62); break;
                    case TokenType::NULLPTRLIT:
                        shift(p, lasttok, lookahead, stack, steps, 69); break;
                    case TokenType::OCTINTLIT:
                        shift(p, lasttok, lookahead, stack, steps, 71); break;
                    case TokenType::OPARN:
                        shift(p, lasttok, lookahead, stack, steps, 77); break;
                    case TokenType::STRINGLIT:
                        shift(p, lasttok, lookahead, stack, steps, 75); break;
                    case TokenType::TILDE:
                        shift(p, lasttok, lookahead, stack, steps, 61); break;
                    case TokenType::TRUELIT:
                        shift(p, lasttok, lookahead, stack, steps, 66); break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {concatMsg("expected ", "argument list", " for ", "more arguments")});
                }
                break;
            case 149:
               switch (lookahead.type)
               {
                    case TokenType::SEMICOLON:
                        {
                            auto a1 (popA<ASTNS::VarStmtItemList>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreVarStmtItem>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::MoreVarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            case 150:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a2 (popA<ASTNS::Expr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::VarStmtItem>(std::move(a0), std::move(a1), std::move(a2)));
                            size_t newstate = getGoto<ASTNS::VarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 151:
               switch (lookahead.type)
               {
                    default:
                        {
                            auto a4 (popA<ASTNS::TernaryExpr>(stack));
                            auto a3 (popT(stack));
                            auto a2 (popA<ASTNS::Expr>(stack));
                            auto a1 (popT(stack));
                            auto a0 (popA<ASTNS::BinorExpr>(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::TernaryExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4)));
                            size_t newstate = getGoto<ASTNS::TernaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                }
                break;
            case 152:
               switch (lookahead.type)
               {
                    case TokenType::CPARN:
                        {
                            auto a1 (popA<ASTNS::ArgList>(stack));
                            auto a0 (popT(stack));
                            std::unique_ptr<ASTNS::AST> push (std::make_unique<ASTNS::MoreArg>(std::move(a0), std::move(a1)));
                            size_t newstate = getGoto<ASTNS::MoreArg>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    default:
                        if (istrial) return false;
                        error(done, errored, errorstate(p, stack, lasttok, lookahead), std::vector<std::string> {});
                }
                break;
            default:
                reportAbortNoh(concatMsg("Parser reached invalid state: ", stack.back().state));
        }
    }
// This code was autogenerated - see the utils/ directory

    // PARSERLOOP END
    // }}}

    if (istrial)
        return true;

    if (errored)
        return false;

    stackitem topsi (std::move(stack.back()));
    if (topsi.istok)
        reportAbortNoh("topsi is tok when parser not errored");

    std::unique_ptr<ASTNS::AST> astu (std::move(topsi.ast));
    ASTNS::CUB *cub = dynamic_cast<ASTNS::CUB*>(astu.get());
    if (!cub)
        reportAbortNoh("cub is not a CUB despite parser not errored");

    astu.release();
    out = std::unique_ptr<ASTNS::CUB>(cub);
    return true;
}
