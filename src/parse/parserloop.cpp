#include "parse/parser.h"
#include "parsestack.h" // in a private header file
#include <vector>

// get goto {{{
// GETGOTO START

// The following code was autogenerated - see the utils/ directory
template <> size_t getGoto<ASTNS::Decls>(size_t state)
{
    switch (state)
    {
        case 0:
            return 1;
        default:
            reportAbortNoh("retrieve goto of nonterminal Decls in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Decl>(size_t state)
{
    switch (state)
    {
        case 0:
            return 2;
        case 1:
            return 5;
        default:
            reportAbortNoh("retrieve goto of nonterminal Decl in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Function>(size_t state)
{
    switch (state)
    {
        case 0:
        case 1:
            return 3;
        default:
            reportAbortNoh("retrieve goto of nonterminal Function in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Type>(size_t state)
{
    switch (state)
    {
        case 4:
            return 6;
        case 22:
            return 25;
        case 29:
            return 75;
        case 40:
            return 78;
        default:
            reportAbortNoh("retrieve goto of nonterminal Type in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Block>(size_t state)
{
    switch (state)
    {
        case 23:
            return 26;
        case 27:
        case 31:
            return 38;
        case 28:
            return 74;
        default:
            reportAbortNoh("retrieve goto of nonterminal Block in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ParamList>(size_t state)
{
    switch (state)
    {
        case 22:
            return 24;
        default:
            reportAbortNoh("retrieve goto of nonterminal ParamList in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Stmts>(size_t state)
{
    switch (state)
    {
        case 27:
            return 31;
        default:
            reportAbortNoh("retrieve goto of nonterminal Stmts in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Stmt>(size_t state)
{
    switch (state)
    {
        case 27:
            return 33;
        case 31:
            return 77;
        default:
            reportAbortNoh("retrieve goto of nonterminal Stmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::EmptyStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 34;
        default:
            reportAbortNoh("retrieve goto of nonterminal EmptyStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 35;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ExprStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 36;
        default:
            reportAbortNoh("retrieve goto of nonterminal ExprStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::RetStmt>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 37;
        default:
            reportAbortNoh("retrieve goto of nonterminal RetStmt in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItems>(size_t state)
{
    switch (state)
    {
        case 78:
            return 107;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItems in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Expr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
            return 41;
        case 42:
            return 80;
        case 73:
            return 105;
        case 82:
            return 112;
        case 104:
            return 133;
        case 137:
            return 142;
        case 140:
            return 144;
        default:
            reportAbortNoh("retrieve goto of nonterminal Expr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::VarStmtItem>(size_t state)
{
    switch (state)
    {
        case 78:
            return 108;
        case 136:
            return 141;
        default:
            reportAbortNoh("retrieve goto of nonterminal VarStmtItem in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BuiltinType>(size_t state)
{
    switch (state)
    {
        case 4:
        case 22:
        case 29:
        case 40:
            return 7;
        default:
            reportAbortNoh("retrieve goto of nonterminal BuiltinType in invalid state");
    }
}
template <> size_t getGoto<ASTNS::Args>(size_t state)
{
    switch (state)
    {
        case 104:
            return 131;
        default:
            reportAbortNoh("retrieve goto of nonterminal Args in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AssignmentExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 82:
        case 104:
        case 137:
        case 140:
            return 43;
        case 81:
            return 111;
        default:
            reportAbortNoh("retrieve goto of nonterminal AssignmentExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::TernaryExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 104:
        case 137:
        case 140:
            return 44;
        case 138:
            return 143;
        default:
            reportAbortNoh("retrieve goto of nonterminal TernaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinorExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 104:
        case 137:
        case 138:
        case 140:
            return 45;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinandExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 104:
        case 137:
        case 138:
        case 140:
            return 46;
        case 83:
            return 113;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinandExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BinnotExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 73:
        case 81:
        case 82:
        case 83:
        case 104:
        case 137:
        case 138:
        case 140:
            return 47;
        case 48:
            return 85;
        case 84:
            return 114;
        default:
            reportAbortNoh("retrieve goto of nonterminal BinnotExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CompeqExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 104:
        case 137:
        case 138:
        case 140:
            return 49;
        default:
            reportAbortNoh("retrieve goto of nonterminal CompeqExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::ComplgtExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 104:
        case 137:
        case 138:
        case 140:
            return 50;
        case 86:
            return 115;
        case 87:
            return 116;
        default:
            reportAbortNoh("retrieve goto of nonterminal ComplgtExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitxorExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 104:
        case 137:
        case 138:
        case 140:
            return 51;
        case 88:
            return 117;
        case 89:
            return 118;
        case 90:
            return 119;
        case 91:
            return 120;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitxorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitorExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 104:
        case 137:
        case 138:
        case 140:
            return 52;
        case 92:
            return 121;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitorExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitandExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 104:
        case 137:
        case 138:
        case 140:
            return 53;
        case 93:
            return 122;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitandExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::BitshiftExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 104:
        case 137:
        case 138:
        case 140:
            return 54;
        case 94:
            return 123;
        default:
            reportAbortNoh("retrieve goto of nonterminal BitshiftExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::AdditionExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 104:
        case 137:
        case 138:
        case 140:
            return 55;
        case 95:
            return 124;
        case 96:
            return 125;
        default:
            reportAbortNoh("retrieve goto of nonterminal AdditionExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::MultExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 104:
        case 137:
        case 138:
        case 140:
            return 56;
        case 97:
            return 126;
        case 98:
            return 127;
        default:
            reportAbortNoh("retrieve goto of nonterminal MultExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::UnaryExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 104:
        case 137:
        case 138:
        case 140:
            return 57;
        case 58:
            return 102;
        case 59:
            return 103;
        case 99:
            return 128;
        case 100:
            return 129;
        case 101:
            return 130;
        default:
            reportAbortNoh("retrieve goto of nonterminal UnaryExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::CallExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 58:
        case 59:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 104:
        case 137:
        case 138:
        case 140:
            return 60;
        default:
            reportAbortNoh("retrieve goto of nonterminal CallExpr in invalid state");
    }
}
template <> size_t getGoto<ASTNS::PrimaryExpr>(size_t state)
{
    switch (state)
    {
        case 27:
        case 31:
        case 42:
        case 48:
        case 58:
        case 59:
        case 73:
        case 81:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 104:
        case 137:
        case 138:
        case 140:
            return 61;
        default:
            reportAbortNoh("retrieve goto of nonterminal PrimaryExpr in invalid state");
    }
}
// This code was autogenerated - see the utils/ directory

// GETGOTO END
// }}}

bool _parse(Parser &p, std::vector<stackitem> &stack, bool istrial, std::unique_ptr<ASTNS::DeclB> &out, Token const &_lookahead)
{
    // parser loop {{{
    // PARSERLOOP START

// The following code was autogenerated - see the utils/ directory
#define SHIFT(newstate) \
    lasttok = lookahead;\
    stack.emplace_back(newstate, lasttok);\
    lookahead = p.consume();\
    ++steps;
#define REDUCET(n) \
    stackitem si ## n = std::move(stack.back()); stack.pop_back();\
    Token a ## n (si ## n.tok);
#define REDUCEA(n, base) \
    stackitem si ## n = std::move(stack.back()); stack.pop_back();\
    std::unique_ptr<ASTNS::base> a ## n (std::unique_ptr<ASTNS::base>(static_cast<ASTNS::base*>(si ## n .ast.release())));
#define SHIFTON(ty, n) \
    case ty: \
        {SHIFT(n)} break;
#define DEFAULTINVALID2(justparsed, expected) \
    default: \
        {\
            if (istrial) return false;\
            Error e = p.invalidSyntax(justparsed, expected, lookahead, lasttok);\
            if (!errorRecovery(p, stack, lookahead, e))\
                done = true;\
            e.report();\
            errored = true;\
        }\
        break;
#define DEFAULTINVALID3(justparsed, expected, whileparsing) \
    default: \
        {\
            if (istrial) return false;\
            Error e = p.invalidSyntaxWhile(justparsed, expected, whileparsing, lookahead, lasttok);\
            if (!errorRecovery(p, stack, lookahead, e))\
                done = true;\
            e.report();\
            errored = true;\
        }\
        break;
#define DEFAULTINVALIDNOEXPECT(justparsed, whileparsing) \
    default: \
        {\
            if (istrial) return false;\
            Error e = p.invalidSyntaxNoExpect(justparsed, whileparsing, lookahead, lasttok);\
            if (!errorRecovery(p, stack, lookahead, e))\
                done = true;\
            e.report();\
            errored = true;\
        }\
        break;
#define REDUCESKIP(cl) \
    {\
        stackitem popped (std::move(stack.back())); stack.pop_back();\
        size_t newstate = getGoto<ASTNS::cl>(stack.back().state);\
        stack.emplace_back(newstate, std::move(popped.ast));\
    }
    bool done = false;
    bool errored = false;
    int steps = 0;
    Token lookahead (_lookahead); // for when you need to inject a new token
    Token lasttok = lookahead;
    while (!done)
    {
        if (istrial && steps > 5)
            return true;
        switch (stack.back().state)
        {
            case 0:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::FUN, 4)
                    DEFAULTINVALID3("beginning", "declaration list", "compilation unit")
                }
                break;
            case 1:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                            done = true;
                        break;
                    SHIFTON(TokenType::FUN, 4)
                    DEFAULTINVALID2("declaration list", concatMsg("either ", "declaration", " or ", stringifyTokenType(TokenType::EOF_)))
                }
                break;
            case 2:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        REDUCESKIP(Decls);
                        break;
                    DEFAULTINVALID3("declaration", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "declaration list")
                }
                break;
            case 3:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        REDUCESKIP(Decl);
                        break;
                    DEFAULTINVALID3("function declaration", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "declaration")
                }
                break;
            case 4:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 17)
                    SHIFTON(TokenType::CHAR, 20)
                    SHIFTON(TokenType::DOUBLE, 18)
                    SHIFTON(TokenType::FLOAT, 16)
                    SHIFTON(TokenType::SINT16, 13)
                    SHIFTON(TokenType::SINT32, 14)
                    SHIFTON(TokenType::SINT64, 15)
                    SHIFTON(TokenType::SINT8, 12)
                    SHIFTON(TokenType::UINT16, 9)
                    SHIFTON(TokenType::UINT32, 10)
                    SHIFTON(TokenType::UINT64, 11)
                    SHIFTON(TokenType::UINT8, 8)
                    SHIFTON(TokenType::VOID, 19)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::FUN), "type specifier", "function declaration")
                }
                break;
            case 5:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        {
                            REDUCEA(1, DeclB)
                            REDUCEA(0, DeclB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Decls>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Decls>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("declaration", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "declaration list")
                }
                break;
            case 6:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 21)
                    DEFAULTINVALID3("type specifier", stringifyTokenType(TokenType::IDENTIFIER), "function declaration")
                }
                break;
            case 7:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        REDUCESKIP(Type);
                        break;
                    DEFAULTINVALID3("builtin type specifier", stringifyTokenType(TokenType::IDENTIFIER), "type specifier")
                }
                break;
            case 8:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT8), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 9:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT16), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 10:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT32), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 11:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::UINT64), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 12:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT8), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 13:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT16), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 14:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT32), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 15:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SINT64), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 16:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::FLOAT), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 17:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::BOOL), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 18:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLE), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 19:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::VOID), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 20:
               switch (lookahead.type)
               {
                    case TokenType::IDENTIFIER:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BuiltinType>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::BuiltinType>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CHAR), stringifyTokenType(TokenType::IDENTIFIER), "builtin type specifier")
                }
                break;
            case 21:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::OPARN, 22)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), stringifyTokenType(TokenType::OPARN), "function declaration")
                }
                break;
            case 22:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 17)
                    SHIFTON(TokenType::CHAR, 20)
                    SHIFTON(TokenType::CPARN, 23)
                    SHIFTON(TokenType::DOUBLE, 18)
                    SHIFTON(TokenType::FLOAT, 16)
                    SHIFTON(TokenType::SINT16, 13)
                    SHIFTON(TokenType::SINT32, 14)
                    SHIFTON(TokenType::SINT64, 15)
                    SHIFTON(TokenType::SINT8, 12)
                    SHIFTON(TokenType::UINT16, 9)
                    SHIFTON(TokenType::UINT32, 10)
                    SHIFTON(TokenType::UINT64, 11)
                    SHIFTON(TokenType::UINT8, 8)
                    SHIFTON(TokenType::VOID, 19)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OPARN), concatMsg("either ", "parameter list", " or ", stringifyTokenType(TokenType::CPARN)), "function declaration")
                }
                break;
            case 23:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::OCURB, 27)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CPARN), "code block", "function declaration")
                }
                break;
            case 24:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COMMA, 29)
                    SHIFTON(TokenType::CPARN, 28)
                    DEFAULTINVALID2("parameter list", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)))
                }
                break;
            case 25:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 30)
                    DEFAULTINVALID3("type specifier", stringifyTokenType(TokenType::IDENTIFIER), "parameter list")
                }
                break;
            case 26:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        {
                            REDUCEA(5, StmtB)
                            REDUCET(4)
                            REDUCET(3)
                            REDUCET(2)
                            REDUCEA(1, TypeB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5));
                            size_t newstate = getGoto<ASTNS::Function>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("code block", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "function declaration")
                }
                break;
            case 27:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CCURB, 32)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OCURB, 27)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::RETURN, 42)
                    SHIFTON(TokenType::SEMICOLON, 39)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    SHIFTON(TokenType::VAR, 40)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OCURB), concatMsg("either ", "statement list", " or ", stringifyTokenType(TokenType::CCURB)), "code block")
                }
                break;
            case 28:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::OCURB, 27)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CPARN), "code block", "function declaration")
                }
                break;
            case 29:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 17)
                    SHIFTON(TokenType::CHAR, 20)
                    SHIFTON(TokenType::DOUBLE, 18)
                    SHIFTON(TokenType::FLOAT, 16)
                    SHIFTON(TokenType::SINT16, 13)
                    SHIFTON(TokenType::SINT32, 14)
                    SHIFTON(TokenType::SINT64, 15)
                    SHIFTON(TokenType::SINT8, 12)
                    SHIFTON(TokenType::UINT16, 9)
                    SHIFTON(TokenType::UINT32, 10)
                    SHIFTON(TokenType::UINT64, 11)
                    SHIFTON(TokenType::UINT8, 8)
                    SHIFTON(TokenType::VOID, 19)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COMMA), "type specifier", "parameter list")
                }
                break;
            case 30:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            REDUCET(1)
                            REDUCEA(0, TypeB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ParamList>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::ParamList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "parameter list")
                }
                break;
            case 31:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CCURB, 76)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OCURB, 27)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::RETURN, 42)
                    SHIFTON(TokenType::SEMICOLON, 39)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    SHIFTON(TokenType::VAR, 40)
                    DEFAULTINVALID2("statement list", concatMsg("either ", "statement", " or ", stringifyTokenType(TokenType::CCURB)))
                }
                break;
            case 32:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::EOF_:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::FUN:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Block>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CCURB), concatMsg("either ", "declaration", " or ", "statement"), "code block")
                }
                break;
            case 33:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmts);
                        break;
                    DEFAULTINVALID3("statement", "statement", "statement list")
                }
                break;
            case 34:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("empty statement", "statement", "statement")
                }
                break;
            case 35:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("variable statement", "statement", "statement")
                }
                break;
            case 36:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("expression statement", "statement", "statement")
                }
                break;
            case 37:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("return statement", "statement", "statement")
                }
                break;
            case 38:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        REDUCESKIP(Stmt);
                        break;
                    DEFAULTINVALID3("code block", "statement", "statement")
                }
                break;
            case 39:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::EmptyStmt>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::EmptyStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "empty statement")
                }
                break;
            case 40:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BOOL, 17)
                    SHIFTON(TokenType::CHAR, 20)
                    SHIFTON(TokenType::DOUBLE, 18)
                    SHIFTON(TokenType::FLOAT, 16)
                    SHIFTON(TokenType::SINT16, 13)
                    SHIFTON(TokenType::SINT32, 14)
                    SHIFTON(TokenType::SINT64, 15)
                    SHIFTON(TokenType::SINT8, 12)
                    SHIFTON(TokenType::UINT16, 9)
                    SHIFTON(TokenType::UINT32, 10)
                    SHIFTON(TokenType::UINT64, 11)
                    SHIFTON(TokenType::UINT8, 8)
                    SHIFTON(TokenType::VOID, 19)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::VAR), "type specifier", "variable statement")
                }
                break;
            case 41:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::SEMICOLON, 79)
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::SEMICOLON), "expression statement")
                }
                break;
            case 42:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::RETURN), "expression", "return statement")
                }
                break;
            case 43:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(Expr);
                        break;
                    DEFAULTINVALID3("assignment expression", concatMsg(stringifyTokenType(TokenType::COLON), stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::CPARN), " or ", stringifyTokenType(TokenType::SEMICOLON)), "expression")
                }
                break;
            case 44:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(AssignmentExpr);
                        break;
                    SHIFTON(TokenType::EQUAL, 81)
                    DEFAULTINVALID3("ternary expression", concatMsg(stringifyTokenType(TokenType::COLON), stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::CPARN), stringifyTokenType(TokenType::EQUAL), " or ", stringifyTokenType(TokenType::SEMICOLON)), "assignment expression")
                }
                break;
            case 45:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::EQUAL:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(TernaryExpr);
                        break;
                    SHIFTON(TokenType::DOUBLEPIPE, 83)
                    SHIFTON(TokenType::QUESTION, 82)
                    DEFAULTINVALID2("binary or expression", concatMsg("either ", stringifyTokenType(TokenType::DOUBLEPIPE), " or ", stringifyTokenType(TokenType::QUESTION)))
                }
                break;
            case 46:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(BinorExpr);
                        break;
                    SHIFTON(TokenType::DOUBLEAMPER, 84)
                    DEFAULTINVALID2("binary and expression", stringifyTokenType(TokenType::DOUBLEAMPER))
                }
                break;
            case 47:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(BinandExpr);
                        break;
                    DEFAULTINVALIDNOEXPECT("binary not expression", "binary and expression")
                }
                break;
            case 48:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::BANG), "binary not expression", "binary not expression")
                }
                break;
            case 49:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANGEQUAL, 86)
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(BinnotExpr);
                        break;
                    SHIFTON(TokenType::DOUBLEEQUAL, 87)
                    DEFAULTINVALID2("equality expression", concatMsg("either ", stringifyTokenType(TokenType::BANGEQUAL), " or ", stringifyTokenType(TokenType::DOUBLEEQUAL)))
                }
                break;
            case 50:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(CompeqExpr);
                        break;
                    SHIFTON(TokenType::GREATER, 89)
                    SHIFTON(TokenType::GREATEREQUAL, 91)
                    SHIFTON(TokenType::LESS, 88)
                    SHIFTON(TokenType::LESSEQUAL, 90)
                    DEFAULTINVALID2("comparison expression", concatMsg(stringifyTokenType(TokenType::GREATER), stringifyTokenType(TokenType::GREATEREQUAL), stringifyTokenType(TokenType::LESS), " or ", stringifyTokenType(TokenType::LESSEQUAL)))
                }
                break;
            case 51:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(ComplgtExpr);
                        break;
                    SHIFTON(TokenType::CARET, 92)
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 52:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(BitxorExpr);
                        break;
                    SHIFTON(TokenType::PIPE, 93)
                    DEFAULTINVALID2("bitwise or expression", stringifyTokenType(TokenType::PIPE))
                }
                break;
            case 53:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::AMPER, 94)
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(BitorExpr);
                        break;
                    DEFAULTINVALID2("bitwise and expression", stringifyTokenType(TokenType::AMPER))
                }
                break;
            case 54:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(BitandExpr);
                        break;
                    SHIFTON(TokenType::DOUBLEGREATER, 95)
                    SHIFTON(TokenType::DOUBLELESS, 96)
                    DEFAULTINVALID2("bit shift expression", concatMsg("either ", stringifyTokenType(TokenType::DOUBLEGREATER), " or ", stringifyTokenType(TokenType::DOUBLELESS)))
                }
                break;
            case 55:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(BitshiftExpr);
                        break;
                    SHIFTON(TokenType::MINUS, 98)
                    SHIFTON(TokenType::PLUS, 97)
                    DEFAULTINVALID2("addition expression", concatMsg("either ", stringifyTokenType(TokenType::MINUS), " or ", stringifyTokenType(TokenType::PLUS)))
                }
                break;
            case 56:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(AdditionExpr);
                        break;
                    SHIFTON(TokenType::PERCENT, 101)
                    SHIFTON(TokenType::SLASH, 100)
                    SHIFTON(TokenType::STAR, 99)
                    DEFAULTINVALID2("multiplication expression", concatMsg(stringifyTokenType(TokenType::PERCENT), stringifyTokenType(TokenType::SLASH), " or ", stringifyTokenType(TokenType::STAR)))
                }
                break;
            case 57:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        REDUCESKIP(MultExpr);
                        break;
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 58:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::TILDE), "unary expression", "unary expression")
                }
                break;
            case 59:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::MINUS), "unary expression", "unary expression")
                }
                break;
            case 60:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        REDUCESKIP(UnaryExpr);
                        break;
                    DEFAULTINVALIDNOEXPECT("function call expression", "unary expression")
                }
                break;
            case 61:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        REDUCESKIP(CallExpr);
                        break;
                    SHIFTON(TokenType::OPARN, 104)
                    DEFAULTINVALID3("primary expression", stringifyTokenType(TokenType::OPARN), "function call expression")
                }
                break;
            case 62:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::TRUELIT), "primary expression")
                }
                break;
            case 63:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::FALSELIT), "primary expression")
                }
                break;
            case 64:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::FLOATLIT), "primary expression")
                }
                break;
            case 65:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::NULLPTRLIT), "primary expression")
                }
                break;
            case 66:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::DECINTLIT), "primary expression")
                }
                break;
            case 67:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::OCTINTLIT), "primary expression")
                }
                break;
            case 68:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::BININTLIT), "primary expression")
                }
                break;
            case 69:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::HEXINTLIT), "primary expression")
                }
                break;
            case 70:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CHARLIT), "primary expression")
                }
                break;
            case 71:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::STRINGLIT), "primary expression")
                }
                break;
            case 72:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::IDENTIFIER), "primary expression")
                }
                break;
            case 73:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OPARN), "expression", "primary expression")
                }
                break;
            case 74:
               switch (lookahead.type)
               {
                    case TokenType::EOF_:
                    case TokenType::FUN:
                        {
                            REDUCEA(6, StmtB)
                            REDUCET(5)
                            REDUCEA(4, PListB)
                            REDUCET(3)
                            REDUCET(2)
                            REDUCEA(1, TypeB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Function>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4), std::move(a5), std::move(a6));
                            size_t newstate = getGoto<ASTNS::Function>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("code block", concatMsg("either ", stringifyTokenType(TokenType::EOF_), " or ", stringifyTokenType(TokenType::FUN)), "function declaration")
                }
                break;
            case 75:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 106)
                    DEFAULTINVALID3("type specifier", stringifyTokenType(TokenType::IDENTIFIER), "parameter list")
                }
                break;
            case 76:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::EOF_:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::FUN:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(2)
                            REDUCEA(1, StmtB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Block>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Block>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CCURB), concatMsg("either ", "declaration", " or ", "statement"), "code block")
                }
                break;
            case 77:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCEA(1, StmtB)
                            REDUCEA(0, StmtB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Stmts>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::Stmts>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("statement", "statement", "statement list")
                }
                break;
            case 78:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 109)
                    DEFAULTINVALID3("type specifier", "variable statement assignment list", "variable statement")
                }
                break;
            case 79:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ExprStmt>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::ExprStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "expression statement")
                }
                break;
            case 80:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::SEMICOLON, 110)
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::SEMICOLON), "return statement")
                }
                break;
            case 81:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::EQUAL), "assignment expression", "assignment expression")
                }
                break;
            case 82:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::QUESTION), "expression", "ternary expression")
                }
                break;
            case 83:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEPIPE), "binary and expression", "binary or expression")
                }
                break;
            case 84:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEAMPER), "binary not expression", "binary and expression")
                }
                break;
            case 85:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(1, ExprB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BinnotExpr>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::BinnotExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("binary not expression", "binary not expression")
                }
                break;
            case 86:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::BANGEQUAL), "comparison expression", "equality expression")
                }
                break;
            case 87:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEEQUAL), "comparison expression", "equality expression")
                }
                break;
            case 88:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::LESS), "bitwise xor expression", "comparison expression")
                }
                break;
            case 89:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::GREATER), "bitwise xor expression", "comparison expression")
                }
                break;
            case 90:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::LESSEQUAL), "bitwise xor expression", "comparison expression")
                }
                break;
            case 91:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::GREATEREQUAL), "bitwise xor expression", "comparison expression")
                }
                break;
            case 92:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::CARET), "bitwise or expression", "bitwise xor expression")
                }
                break;
            case 93:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::PIPE), "bitwise and expression", "bitwise or expression")
                }
                break;
            case 94:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::AMPER), "bit shift expression", "bitwise and expression")
                }
                break;
            case 95:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLEGREATER), "addition expression", "bit shift expression")
                }
                break;
            case 96:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::DOUBLELESS), "addition expression", "bit shift expression")
                }
                break;
            case 97:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::PLUS), "multiplication expression", "addition expression")
                }
                break;
            case 98:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::MINUS), "multiplication expression", "addition expression")
                }
                break;
            case 99:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::STAR), "unary expression", "multiplication expression")
                }
                break;
            case 100:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SLASH), "unary expression", "multiplication expression")
                }
                break;
            case 101:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::PERCENT), "unary expression", "multiplication expression")
                }
                break;
            case 102:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(1, ExprB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::UnaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("unary expression", "unary expression")
                }
                break;
            case 103:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(1, ExprB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::UnaryExpr>(std::move(a0), std::move(a1));
                            size_t newstate = getGoto<ASTNS::UnaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("unary expression", "unary expression")
                }
                break;
            case 104:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::CPARN, 132)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::OPARN), concatMsg("either ", "argument list", " or ", stringifyTokenType(TokenType::CPARN)), "function call expression")
                }
                break;
            case 105:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::CPARN, 134)
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::CPARN), "primary expression")
                }
                break;
            case 106:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            REDUCET(3)
                            REDUCEA(2, TypeB)
                            REDUCET(1)
                            REDUCEA(0, PListB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ParamList>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::ParamList>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "parameter list")
                }
                break;
            case 107:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COMMA, 136)
                    SHIFTON(TokenType::SEMICOLON, 135)
                    DEFAULTINVALID2("variable statement assignment list", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)))
                }
                break;
            case 108:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        REDUCESKIP(VarStmtItems);
                        break;
                    DEFAULTINVALID3("variable statement assignment", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment list")
                }
                break;
            case 109:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmtItem>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::VarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::EQUAL, 137)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::IDENTIFIER), concatMsg(stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::EQUAL), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment")
                }
                break;
            case 110:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(2)
                            REDUCEA(1, ExprB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::RetStmt>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::RetStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "return statement")
                }
                break;
            case 111:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::AssignmentExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::AssignmentExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("assignment expression", concatMsg(stringifyTokenType(TokenType::COLON), stringifyTokenType(TokenType::COMMA), stringifyTokenType(TokenType::CPARN), " or ", stringifyTokenType(TokenType::SEMICOLON)), "assignment expression")
                }
                break;
            case 112:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COLON, 138)
                    DEFAULTINVALID3("expression", stringifyTokenType(TokenType::COLON), "ternary expression")
                }
                break;
            case 113:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BinorExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BinorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::DOUBLEAMPER, 84)
                    DEFAULTINVALID2("binary and expression", stringifyTokenType(TokenType::DOUBLEAMPER))
                }
                break;
            case 114:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BinandExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BinandExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("binary not expression", "binary and expression")
                }
                break;
            case 115:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CompeqExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::CompeqExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::GREATER, 89)
                    SHIFTON(TokenType::GREATEREQUAL, 91)
                    SHIFTON(TokenType::LESS, 88)
                    SHIFTON(TokenType::LESSEQUAL, 90)
                    DEFAULTINVALID2("comparison expression", concatMsg(stringifyTokenType(TokenType::GREATER), stringifyTokenType(TokenType::GREATEREQUAL), stringifyTokenType(TokenType::LESS), " or ", stringifyTokenType(TokenType::LESSEQUAL)))
                }
                break;
            case 116:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CompeqExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::CompeqExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::GREATER, 89)
                    SHIFTON(TokenType::GREATEREQUAL, 91)
                    SHIFTON(TokenType::LESS, 88)
                    SHIFTON(TokenType::LESSEQUAL, 90)
                    DEFAULTINVALID2("comparison expression", concatMsg(stringifyTokenType(TokenType::GREATER), stringifyTokenType(TokenType::GREATEREQUAL), stringifyTokenType(TokenType::LESS), " or ", stringifyTokenType(TokenType::LESSEQUAL)))
                }
                break;
            case 117:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 92)
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 118:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 92)
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 119:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 92)
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 120:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::ComplgtExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::ComplgtExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::CARET, 92)
                    DEFAULTINVALID2("bitwise xor expression", stringifyTokenType(TokenType::CARET))
                }
                break;
            case 121:
               switch (lookahead.type)
               {
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitxorExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitxorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::PIPE, 93)
                    DEFAULTINVALID2("bitwise or expression", stringifyTokenType(TokenType::PIPE))
                }
                break;
            case 122:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::AMPER, 94)
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitorExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitorExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID2("bitwise and expression", stringifyTokenType(TokenType::AMPER))
                }
                break;
            case 123:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitandExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitandExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::DOUBLEGREATER, 95)
                    SHIFTON(TokenType::DOUBLELESS, 96)
                    DEFAULTINVALID2("bit shift expression", concatMsg("either ", stringifyTokenType(TokenType::DOUBLEGREATER), " or ", stringifyTokenType(TokenType::DOUBLELESS)))
                }
                break;
            case 124:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitshiftExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitshiftExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::MINUS, 98)
                    SHIFTON(TokenType::PLUS, 97)
                    DEFAULTINVALID2("addition expression", concatMsg("either ", stringifyTokenType(TokenType::MINUS), " or ", stringifyTokenType(TokenType::PLUS)))
                }
                break;
            case 125:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::PIPE:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::BitshiftExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::BitshiftExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::MINUS, 98)
                    SHIFTON(TokenType::PLUS, 97)
                    DEFAULTINVALID2("addition expression", concatMsg("either ", stringifyTokenType(TokenType::MINUS), " or ", stringifyTokenType(TokenType::PLUS)))
                }
                break;
            case 126:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::AdditionExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::PERCENT, 101)
                    SHIFTON(TokenType::SLASH, 100)
                    SHIFTON(TokenType::STAR, 99)
                    DEFAULTINVALID2("multiplication expression", concatMsg(stringifyTokenType(TokenType::PERCENT), stringifyTokenType(TokenType::SLASH), " or ", stringifyTokenType(TokenType::STAR)))
                }
                break;
            case 127:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::AdditionExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::AdditionExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    SHIFTON(TokenType::PERCENT, 101)
                    SHIFTON(TokenType::SLASH, 100)
                    SHIFTON(TokenType::STAR, 99)
                    DEFAULTINVALID2("multiplication expression", concatMsg(stringifyTokenType(TokenType::PERCENT), stringifyTokenType(TokenType::SLASH), " or ", stringifyTokenType(TokenType::STAR)))
                }
                break;
            case 128:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 129:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 130:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::MultExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::MultExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("unary expression", "multiplication expression")
                }
                break;
            case 131:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::COMMA, 140)
                    SHIFTON(TokenType::CPARN, 139)
                    DEFAULTINVALID2("argument list", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)))
                }
                break;
            case 132:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(2)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CallExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::CallExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CPARN), "function call expression")
                }
                break;
            case 133:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Args>(std::move(a0));
                            size_t newstate = getGoto<ASTNS::Args>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("expression", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "argument list")
                }
                break;
            case 134:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::OPARN:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(2)
                            REDUCEA(1, ExprB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::PrimaryExpr>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::PrimaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CPARN), "primary expression")
                }
                break;
            case 135:
               switch (lookahead.type)
               {
                    case TokenType::BANG:
                    case TokenType::BININTLIT:
                    case TokenType::CCURB:
                    case TokenType::CHARLIT:
                    case TokenType::DECINTLIT:
                    case TokenType::FALSELIT:
                    case TokenType::FLOATLIT:
                    case TokenType::HEXINTLIT:
                    case TokenType::IDENTIFIER:
                    case TokenType::MINUS:
                    case TokenType::NULLPTRLIT:
                    case TokenType::OCTINTLIT:
                    case TokenType::OCURB:
                    case TokenType::OPARN:
                    case TokenType::RETURN:
                    case TokenType::SEMICOLON:
                    case TokenType::STRINGLIT:
                    case TokenType::TILDE:
                    case TokenType::TRUELIT:
                    case TokenType::VAR:
                        {
                            REDUCET(3)
                            REDUCEA(2, VStmtIB)
                            REDUCEA(1, TypeB)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmt>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::VarStmt>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3(stringifyTokenType(TokenType::SEMICOLON), "statement", "variable statement")
                }
                break;
            case 136:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::IDENTIFIER, 109)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COMMA), "variable statement assignment", "variable statement assignment list")
                }
                break;
            case 137:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::EQUAL), "expression", "variable statement assignment")
                }
                break;
            case 138:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COLON), "ternary expression", "ternary expression")
                }
                break;
            case 139:
               switch (lookahead.type)
               {
                    case TokenType::AMPER:
                    case TokenType::BANGEQUAL:
                    case TokenType::CARET:
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::DOUBLEAMPER:
                    case TokenType::DOUBLEEQUAL:
                    case TokenType::DOUBLEGREATER:
                    case TokenType::DOUBLELESS:
                    case TokenType::DOUBLEPIPE:
                    case TokenType::EQUAL:
                    case TokenType::GREATER:
                    case TokenType::GREATEREQUAL:
                    case TokenType::LESS:
                    case TokenType::LESSEQUAL:
                    case TokenType::MINUS:
                    case TokenType::PERCENT:
                    case TokenType::PIPE:
                    case TokenType::PLUS:
                    case TokenType::QUESTION:
                    case TokenType::SEMICOLON:
                    case TokenType::SLASH:
                    case TokenType::STAR:
                        {
                            REDUCET(3)
                            REDUCEA(2, ArgsB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::CallExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3));
                            size_t newstate = getGoto<ASTNS::CallExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT(stringifyTokenType(TokenType::CPARN), "function call expression")
                }
                break;
            case 140:
               switch (lookahead.type)
               {
                    SHIFTON(TokenType::BANG, 48)
                    SHIFTON(TokenType::BININTLIT, 68)
                    SHIFTON(TokenType::CHARLIT, 70)
                    SHIFTON(TokenType::DECINTLIT, 66)
                    SHIFTON(TokenType::FALSELIT, 63)
                    SHIFTON(TokenType::FLOATLIT, 64)
                    SHIFTON(TokenType::HEXINTLIT, 69)
                    SHIFTON(TokenType::IDENTIFIER, 72)
                    SHIFTON(TokenType::MINUS, 59)
                    SHIFTON(TokenType::NULLPTRLIT, 65)
                    SHIFTON(TokenType::OCTINTLIT, 67)
                    SHIFTON(TokenType::OPARN, 73)
                    SHIFTON(TokenType::STRINGLIT, 71)
                    SHIFTON(TokenType::TILDE, 58)
                    SHIFTON(TokenType::TRUELIT, 62)
                    DEFAULTINVALID3(stringifyTokenType(TokenType::COMMA), "expression", "argument list")
                }
                break;
            case 141:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, VStmtIB)
                            REDUCET(1)
                            REDUCEA(0, VStmtIB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmtItems>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::VarStmtItems>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("variable statement assignment", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment list")
                }
                break;
            case 142:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCET(0)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::VarStmtItem>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::VarStmtItem>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("expression", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::SEMICOLON)), "variable statement assignment")
                }
                break;
            case 143:
               switch (lookahead.type)
               {
                    case TokenType::COLON:
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                    case TokenType::EQUAL:
                    case TokenType::SEMICOLON:
                        {
                            REDUCEA(4, ExprB)
                            REDUCET(3)
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ExprB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::TernaryExpr>(std::move(a0), std::move(a1), std::move(a2), std::move(a3), std::move(a4));
                            size_t newstate = getGoto<ASTNS::TernaryExpr>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALIDNOEXPECT("ternary expression", "ternary expression")
                }
                break;
            case 144:
               switch (lookahead.type)
               {
                    case TokenType::COMMA:
                    case TokenType::CPARN:
                        {
                            REDUCEA(2, ExprB)
                            REDUCET(1)
                            REDUCEA(0, ArgsB)
                            std::unique_ptr<ASTNS::AST> push = std::make_unique<ASTNS::Args>(std::move(a0), std::move(a1), std::move(a2));
                            size_t newstate = getGoto<ASTNS::Args>(stack.back().state);
                            stack.emplace_back(newstate, std::move(push));
                        }
                        break;
                    DEFAULTINVALID3("expression", concatMsg("either ", stringifyTokenType(TokenType::COMMA), " or ", stringifyTokenType(TokenType::CPARN)), "argument list")
                }
                break;
            default:
                Error(Error::MsgType::INTERR, lookahead, "Parser reached invalid state")
                    .underline(Error::Underline(lookahead, '!')
                        .error(concatMsg("Parser reached invalid state: ", stack.back().state)))
                    .reportAbort();
        }
    }
#undef SHIFT
#undef REDUCET
#undef REDUCEA
#undef REDUCESKIP
#undef SHIFTON
#undef DEFAULTINVALID2
#undef DEFAULTINVALID3
// This code was autogenerated - see the utils/ directory

    // PARSERLOOP END
    // }}}

    if (istrial)
        return true;

    if (errored)
        return false;

    stackitem topsi (std::move(stack.back()));
    if (topsi.istok)
        reportAbortNoh("topsi is tok when parser not errored");

    std::unique_ptr<ASTNS::AST> astu (std::move(topsi.ast));
    ASTNS::DeclB *decls = dynamic_cast<ASTNS::DeclB*>(astu.get());
    if (!decls)
        reportAbortNoh("decls is not a DeclB despite parser not errored");

    astu.release();
    out = std::unique_ptr<ASTNS::DeclB> (decls);
    return true;
}
