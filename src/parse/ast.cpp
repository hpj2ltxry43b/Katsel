// ASTCPP START

// The following code was autogenerated - see the utils/ directory
#include "parse/ast.h"
ASTNS::Additionexpr::Additionexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Additionexpr::Form::ATA) {}
void ASTNS::Additionexpr::accept(ASTVisitor *v) { v->visitAdditionexpr(this); }
ASTNS::Args::Args(std::unique_ptr<AST> args, Token comma, std::unique_ptr<AST> expr): args(std::move(args)), comma(comma), expr(std::move(expr)), form(ASTNS::Args::Form::ATA) {}
ASTNS::Args::Args(std::unique_ptr<AST> expr): expr(std::move(expr)), form(ASTNS::Args::Form::A) {}
void ASTNS::Args::accept(ASTVisitor *v) { v->visitArgs(this); }
ASTNS::Assignmentexpr::Assignmentexpr(std::unique_ptr<AST> target, Token equal, std::unique_ptr<AST> value): target(std::move(target)), equal(equal), value(std::move(value)), form(ASTNS::Assignmentexpr::Form::ATA) {}
void ASTNS::Assignmentexpr::accept(ASTVisitor *v) { v->visitAssignmentexpr(this); }
ASTNS::Binandexpr::Binandexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Binandexpr::Form::ATA) {}
void ASTNS::Binandexpr::accept(ASTVisitor *v) { v->visitBinandexpr(this); }
ASTNS::Binnotexpr::Binnotexpr(Token op, std::unique_ptr<AST> operand): op(op), operand(std::move(operand)), form(ASTNS::Binnotexpr::Form::TA) {}
void ASTNS::Binnotexpr::accept(ASTVisitor *v) { v->visitBinnotexpr(this); }
ASTNS::Binorexpr::Binorexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Binorexpr::Form::ATA) {}
void ASTNS::Binorexpr::accept(ASTVisitor *v) { v->visitBinorexpr(this); }
ASTNS::Bitandexpr::Bitandexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Bitandexpr::Form::ATA) {}
void ASTNS::Bitandexpr::accept(ASTVisitor *v) { v->visitBitandexpr(this); }
ASTNS::Bitorexpr::Bitorexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Bitorexpr::Form::ATA) {}
void ASTNS::Bitorexpr::accept(ASTVisitor *v) { v->visitBitorexpr(this); }
ASTNS::Bitshiftexpr::Bitshiftexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Bitshiftexpr::Form::ATA) {}
void ASTNS::Bitshiftexpr::accept(ASTVisitor *v) { v->visitBitshiftexpr(this); }
ASTNS::Bitxorexpr::Bitxorexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Bitxorexpr::Form::ATA) {}
void ASTNS::Bitxorexpr::accept(ASTVisitor *v) { v->visitBitxorexpr(this); }
ASTNS::Block::Block(Token ocurb, std::unique_ptr<AST> stmts, Token ccurb): ocurb(ocurb), stmts(std::move(stmts)), ccurb(ccurb), form(ASTNS::Block::Form::TAT) {}
ASTNS::Block::Block(Token ocurb, Token ccurb): ocurb(ocurb), ccurb(ccurb), form(ASTNS::Block::Form::TT) {}
void ASTNS::Block::accept(ASTVisitor *v) { v->visitBlock(this); }
ASTNS::Callexpr::Callexpr(std::unique_ptr<AST> callee, Token oparn, std::unique_ptr<AST> args, Token cparn): callee(std::move(callee)), oparn(oparn), args(std::move(args)), cparn(cparn), form(ASTNS::Callexpr::Form::ATAT) {}
ASTNS::Callexpr::Callexpr(std::unique_ptr<AST> callee, Token oparn, Token cparn): callee(std::move(callee)), oparn(oparn), cparn(cparn), form(ASTNS::Callexpr::Form::ATT) {}
void ASTNS::Callexpr::accept(ASTVisitor *v) { v->visitCallexpr(this); }
ASTNS::Compeqexpr::Compeqexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Compeqexpr::Form::ATA) {}
void ASTNS::Compeqexpr::accept(ASTVisitor *v) { v->visitCompeqexpr(this); }
ASTNS::Complgtexpr::Complgtexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Complgtexpr::Form::ATA) {}
void ASTNS::Complgtexpr::accept(ASTVisitor *v) { v->visitComplgtexpr(this); }
void ASTNS::Decl::accept(ASTVisitor *v) { v->visitDecl(this); }
ASTNS::Decls::Decls(std::unique_ptr<AST> decls, std::unique_ptr<AST> decl): decls(std::move(decls)), decl(std::move(decl)), form(ASTNS::Decls::Form::AA) {}
ASTNS::Decls::Decls(std::unique_ptr<AST> decl): decl(std::move(decl)), form(ASTNS::Decls::Form::A) {}
void ASTNS::Decls::accept(ASTVisitor *v) { v->visitDecls(this); }
ASTNS::Emptystmt::Emptystmt(Token semi): semi(semi), form(ASTNS::Emptystmt::Form::T) {}
void ASTNS::Emptystmt::accept(ASTVisitor *v) { v->visitEmptystmt(this); }
void ASTNS::Expression::accept(ASTVisitor *v) { v->visitExpression(this); }
ASTNS::Exprstmt::Exprstmt(std::unique_ptr<AST> expr, Token semi): expr(std::move(expr)), semi(semi), form(ASTNS::Exprstmt::Form::AT) {}
void ASTNS::Exprstmt::accept(ASTVisitor *v) { v->visitExprstmt(this); }
ASTNS::Function::Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, Token cparn, std::unique_ptr<AST> body): fun(fun), retty(std::move(retty)), name(name), oparn(oparn), cparn(cparn), body(std::move(body)), form(ASTNS::Function::Form::TATTTA) {}
ASTNS::Function::Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, std::unique_ptr<AST> paramlist, Token cparn, std::unique_ptr<AST> body): fun(fun), retty(std::move(retty)), name(name), oparn(oparn), paramlist(std::move(paramlist)), cparn(cparn), body(std::move(body)), form(ASTNS::Function::Form::TATTATA) {}
void ASTNS::Function::accept(ASTVisitor *v) { v->visitFunction(this); }
ASTNS::Multexpr::Multexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::Multexpr::Form::ATA) {}
void ASTNS::Multexpr::accept(ASTVisitor *v) { v->visitMultexpr(this); }
ASTNS::Paramlist::Paramlist(std::unique_ptr<AST> plist, Token comma, std::unique_ptr<AST> type, Token name): plist(std::move(plist)), comma(comma), type(std::move(type)), name(name), form(ASTNS::Paramlist::Form::ATAT) {}
ASTNS::Paramlist::Paramlist(std::unique_ptr<AST> type, Token name): type(std::move(type)), name(name), form(ASTNS::Paramlist::Form::AT) {}
void ASTNS::Paramlist::accept(ASTVisitor *v) { v->visitParamlist(this); }
ASTNS::Primaryexpr::Primaryexpr(Token value): value(value), form(ASTNS::Primaryexpr::Form::T) {}
ASTNS::Primaryexpr::Primaryexpr(Token oparn, std::unique_ptr<AST> expr, Token cparn): oparn(oparn), expr(std::move(expr)), cparn(cparn), form(ASTNS::Primaryexpr::Form::TAT) {}
void ASTNS::Primaryexpr::accept(ASTVisitor *v) { v->visitPrimaryexpr(this); }
ASTNS::Retstmt::Retstmt(Token ret, std::unique_ptr<AST> expr, Token semi): ret(ret), expr(std::move(expr)), semi(semi), form(ASTNS::Retstmt::Form::TAT) {}
void ASTNS::Retstmt::accept(ASTVisitor *v) { v->visitRetstmt(this); }
void ASTNS::Stmt::accept(ASTVisitor *v) { v->visitStmt(this); }
ASTNS::Stmts::Stmts(std::unique_ptr<AST> stmts, std::unique_ptr<AST> stmt): stmts(std::move(stmts)), stmt(std::move(stmt)), form(ASTNS::Stmts::Form::AA) {}
void ASTNS::Stmts::accept(ASTVisitor *v) { v->visitStmts(this); }
ASTNS::Ternaryexpr::Ternaryexpr(std::unique_ptr<AST> cond, Token quest, std::unique_ptr<AST> trues, Token colon, std::unique_ptr<AST> falses): cond(std::move(cond)), quest(quest), trues(std::move(trues)), colon(colon), falses(std::move(falses)), form(ASTNS::Ternaryexpr::Form::ATATA) {}
void ASTNS::Ternaryexpr::accept(ASTVisitor *v) { v->visitTernaryexpr(this); }
ASTNS::Type::Type(Token type): type(type), form(ASTNS::Type::Form::T) {}
void ASTNS::Type::accept(ASTVisitor *v) { v->visitType(this); }
ASTNS::Unaryexpr::Unaryexpr(Token op, std::unique_ptr<AST> operand): op(op), operand(std::move(operand)), form(ASTNS::Unaryexpr::Form::TA) {}
void ASTNS::Unaryexpr::accept(ASTVisitor *v) { v->visitUnaryexpr(this); }
ASTNS::Varstmt::Varstmt(Token var, std::unique_ptr<AST> type, std::unique_ptr<AST> assignments, Token semi): var(var), type(std::move(type)), assignments(std::move(assignments)), semi(semi), form(ASTNS::Varstmt::Form::TAAT) {}
void ASTNS::Varstmt::accept(ASTVisitor *v) { v->visitVarstmt(this); }
ASTNS::Varstmtitem::Varstmtitem(Token name, Token equal, std::unique_ptr<AST> expr): name(name), equal(equal), expr(std::move(expr)), form(ASTNS::Varstmtitem::Form::TTA) {}
ASTNS::Varstmtitem::Varstmtitem(Token name): name(name), form(ASTNS::Varstmtitem::Form::T) {}
void ASTNS::Varstmtitem::accept(ASTVisitor *v) { v->visitVarstmtitem(this); }
ASTNS::Varstmtitems::Varstmtitems(std::unique_ptr<AST> items, Token comma, std::unique_ptr<AST> item): items(std::move(items)), comma(comma), item(std::move(item)), form(ASTNS::Varstmtitems::Form::ATA) {}
ASTNS::Varstmtitems::Varstmtitems(std::unique_ptr<AST> item): item(std::move(item)), form(ASTNS::Varstmtitems::Form::A) {}
void ASTNS::Varstmtitems::accept(ASTVisitor *v) { v->visitVarstmtitems(this); }
// This code was autogenerated - see the utils/ directory

// ASTCPP END
