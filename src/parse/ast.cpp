// ASTCPP START

// The following code was autogenerated - see the utils/ directory
#include "parse/ast.h"
ASTNS::AdditionExpr::AdditionExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::AdditionExpr::Form::ATA) {}
void ASTNS::AdditionExpr::accept(ASTVisitor *v) { v->visitAdditionExpr(this); }
ASTNS::Args::Args(std::unique_ptr<AST> args, Token comma, std::unique_ptr<AST> expr): args(std::move(args)), comma(comma), expr(std::move(expr)), form(ASTNS::Args::Form::ATA) {}
ASTNS::Args::Args(std::unique_ptr<AST> expr): expr(std::move(expr)), form(ASTNS::Args::Form::A) {}
void ASTNS::Args::accept(ASTVisitor *v) { v->visitArgs(this); }
ASTNS::AssignmentExpr::AssignmentExpr(std::unique_ptr<AST> target, Token equal, std::unique_ptr<AST> value): target(std::move(target)), equal(equal), value(std::move(value)), form(ASTNS::AssignmentExpr::Form::ATA) {}
void ASTNS::AssignmentExpr::accept(ASTVisitor *v) { v->visitAssignmentExpr(this); }
ASTNS::BinandExpr::BinandExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::BinandExpr::Form::ATA) {}
void ASTNS::BinandExpr::accept(ASTVisitor *v) { v->visitBinandExpr(this); }
ASTNS::BinnotExpr::BinnotExpr(Token op, std::unique_ptr<AST> operand): op(op), operand(std::move(operand)), form(ASTNS::BinnotExpr::Form::TA) {}
void ASTNS::BinnotExpr::accept(ASTVisitor *v) { v->visitBinnotExpr(this); }
ASTNS::BinorExpr::BinorExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::BinorExpr::Form::ATA) {}
void ASTNS::BinorExpr::accept(ASTVisitor *v) { v->visitBinorExpr(this); }
ASTNS::BitandExpr::BitandExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::BitandExpr::Form::ATA) {}
void ASTNS::BitandExpr::accept(ASTVisitor *v) { v->visitBitandExpr(this); }
ASTNS::BitorExpr::BitorExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::BitorExpr::Form::ATA) {}
void ASTNS::BitorExpr::accept(ASTVisitor *v) { v->visitBitorExpr(this); }
ASTNS::BitshiftExpr::BitshiftExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::BitshiftExpr::Form::ATA) {}
void ASTNS::BitshiftExpr::accept(ASTVisitor *v) { v->visitBitshiftExpr(this); }
ASTNS::BitxorExpr::BitxorExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::BitxorExpr::Form::ATA) {}
void ASTNS::BitxorExpr::accept(ASTVisitor *v) { v->visitBitxorExpr(this); }
ASTNS::Block::Block(Token ocurb, std::unique_ptr<AST> stmts, Token ccurb): ocurb(ocurb), stmts(std::move(stmts)), ccurb(ccurb), form(ASTNS::Block::Form::TAT) {}
ASTNS::Block::Block(Token ocurb, Token ccurb): ocurb(ocurb), ccurb(ccurb), form(ASTNS::Block::Form::TT) {}
void ASTNS::Block::accept(ASTVisitor *v) { v->visitBlock(this); }
ASTNS::CallExpr::CallExpr(std::unique_ptr<AST> callee, Token oparn, std::unique_ptr<AST> args, Token cparn): callee(std::move(callee)), oparn(oparn), args(std::move(args)), cparn(cparn), form(ASTNS::CallExpr::Form::ATAT) {}
ASTNS::CallExpr::CallExpr(std::unique_ptr<AST> callee, Token oparn, Token cparn): callee(std::move(callee)), oparn(oparn), cparn(cparn), form(ASTNS::CallExpr::Form::ATT) {}
void ASTNS::CallExpr::accept(ASTVisitor *v) { v->visitCallExpr(this); }
ASTNS::CompeqExpr::CompeqExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::CompeqExpr::Form::ATA) {}
void ASTNS::CompeqExpr::accept(ASTVisitor *v) { v->visitCompeqExpr(this); }
ASTNS::ComplgtExpr::ComplgtExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::ComplgtExpr::Form::ATA) {}
void ASTNS::ComplgtExpr::accept(ASTVisitor *v) { v->visitComplgtExpr(this); }
void ASTNS::Decl::accept(ASTVisitor *v) { v->visitDecl(this); }
ASTNS::Decls::Decls(std::unique_ptr<AST> decls, std::unique_ptr<AST> decl): decls(std::move(decls)), decl(std::move(decl)), form(ASTNS::Decls::Form::AA) {}
void ASTNS::Decls::accept(ASTVisitor *v) { v->visitDecls(this); }
ASTNS::EmptyStmt::EmptyStmt(Token semi): semi(semi), form(ASTNS::EmptyStmt::Form::T) {}
void ASTNS::EmptyStmt::accept(ASTVisitor *v) { v->visitEmptyStmt(this); }
ASTNS::ExprStmt::ExprStmt(std::unique_ptr<AST> expr, Token semi): expr(std::move(expr)), semi(semi), form(ASTNS::ExprStmt::Form::AT) {}
void ASTNS::ExprStmt::accept(ASTVisitor *v) { v->visitExprStmt(this); }
void ASTNS::Expression::accept(ASTVisitor *v) { v->visitExpression(this); }
ASTNS::Function::Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, Token cparn, std::unique_ptr<AST> body): fun(fun), retty(std::move(retty)), name(name), oparn(oparn), cparn(cparn), body(std::move(body)), form(ASTNS::Function::Form::TATTTA) {}
ASTNS::Function::Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, std::unique_ptr<AST> paramlist, Token cparn, std::unique_ptr<AST> body): fun(fun), retty(std::move(retty)), name(name), oparn(oparn), paramlist(std::move(paramlist)), cparn(cparn), body(std::move(body)), form(ASTNS::Function::Form::TATTATA) {}
void ASTNS::Function::accept(ASTVisitor *v) { v->visitFunction(this); }
ASTNS::MultExpr::MultExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs): lhs(std::move(lhs)), op(op), rhs(std::move(rhs)), form(ASTNS::MultExpr::Form::ATA) {}
void ASTNS::MultExpr::accept(ASTVisitor *v) { v->visitMultExpr(this); }
ASTNS::ParamList::ParamList(std::unique_ptr<AST> plist, Token comma, std::unique_ptr<AST> type, Token name): plist(std::move(plist)), comma(comma), type(std::move(type)), name(name), form(ASTNS::ParamList::Form::ATAT) {}
ASTNS::ParamList::ParamList(std::unique_ptr<AST> type, Token name): type(std::move(type)), name(name), form(ASTNS::ParamList::Form::AT) {}
void ASTNS::ParamList::accept(ASTVisitor *v) { v->visitParamList(this); }
ASTNS::PrimaryExpr::PrimaryExpr(Token value): value(value), form(ASTNS::PrimaryExpr::Form::T) {}
ASTNS::PrimaryExpr::PrimaryExpr(Token oparn, std::unique_ptr<AST> expr, Token cparn): oparn(oparn), expr(std::move(expr)), cparn(cparn), form(ASTNS::PrimaryExpr::Form::TAT) {}
void ASTNS::PrimaryExpr::accept(ASTVisitor *v) { v->visitPrimaryExpr(this); }
ASTNS::RetStmt::RetStmt(Token ret, std::unique_ptr<AST> expr, Token semi): ret(ret), expr(std::move(expr)), semi(semi), form(ASTNS::RetStmt::Form::TAT) {}
void ASTNS::RetStmt::accept(ASTVisitor *v) { v->visitRetStmt(this); }
void ASTNS::Stmt::accept(ASTVisitor *v) { v->visitStmt(this); }
ASTNS::Stmts::Stmts(std::unique_ptr<AST> stmts, std::unique_ptr<AST> stmt): stmts(std::move(stmts)), stmt(std::move(stmt)), form(ASTNS::Stmts::Form::AA) {}
void ASTNS::Stmts::accept(ASTVisitor *v) { v->visitStmts(this); }
ASTNS::TernaryExpr::TernaryExpr(std::unique_ptr<AST> cond, Token quest, std::unique_ptr<AST> trues, Token colon, std::unique_ptr<AST> falses): cond(std::move(cond)), quest(quest), trues(std::move(trues)), colon(colon), falses(std::move(falses)), form(ASTNS::TernaryExpr::Form::ATATA) {}
void ASTNS::TernaryExpr::accept(ASTVisitor *v) { v->visitTernaryExpr(this); }
ASTNS::Type::Type(Token type): type(type), form(ASTNS::Type::Form::T) {}
void ASTNS::Type::accept(ASTVisitor *v) { v->visitType(this); }
ASTNS::UnaryExpr::UnaryExpr(Token op, std::unique_ptr<AST> operand): op(op), operand(std::move(operand)), form(ASTNS::UnaryExpr::Form::TA) {}
void ASTNS::UnaryExpr::accept(ASTVisitor *v) { v->visitUnaryExpr(this); }
ASTNS::VarStmt::VarStmt(Token var, std::unique_ptr<AST> type, std::unique_ptr<AST> assignments, Token semi): var(var), type(std::move(type)), assignments(std::move(assignments)), semi(semi), form(ASTNS::VarStmt::Form::TAAT) {}
void ASTNS::VarStmt::accept(ASTVisitor *v) { v->visitVarStmt(this); }
ASTNS::VarStmtItem::VarStmtItem(Token name, Token equal, std::unique_ptr<AST> expr): name(name), equal(equal), expr(std::move(expr)), form(ASTNS::VarStmtItem::Form::TTA) {}
ASTNS::VarStmtItem::VarStmtItem(Token name): name(name), form(ASTNS::VarStmtItem::Form::T) {}
void ASTNS::VarStmtItem::accept(ASTVisitor *v) { v->visitVarStmtItem(this); }
ASTNS::VarStmtItems::VarStmtItems(std::unique_ptr<AST> items, Token comma, std::unique_ptr<AST> item): items(std::move(items)), comma(comma), item(std::move(item)), form(ASTNS::VarStmtItems::Form::ATA) {}
void ASTNS::VarStmtItems::accept(ASTVisitor *v) { v->visitVarStmtItems(this); }
// This code was autogenerated - see the utils/ directory

// ASTCPP END
