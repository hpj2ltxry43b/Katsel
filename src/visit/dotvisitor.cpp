#include "visit/dotvisitor.h"

#include <iostream>
#include <sstream>

// DOTVISITOR START

// The following code was autogenerated - see the utils/ directory
void DotVisitor::visitAdditionexpr(ASTNS::Additionexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Additionexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Additionexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitArgs(ASTNS::Args *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Args::Form::ARGS_COMMA_EXPR:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Args (ARGS_COMMA_EXPR)</td></tr><tr>";
            std::cout << "<td port=\"args\">args</td>";
            std::cout << "<td port=\"comma\">comma</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->args.stringify());
                    connect(thisid, "args", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->expr.stringify());
                    connect(thisid, "expr", tokennodeid);
            }
            break;
        case ASTNS::Args::Form::EXPR:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Args (EXPR)</td></tr><tr>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->expr.stringify());
                    connect(thisid, "expr", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitAssignmentexpr(ASTNS::Assignmentexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Assignmentexpr::Form::TARGET_EQUAL_VALUE:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Assignmentexpr (TARGET_EQUAL_VALUE)</td></tr><tr>";
            std::cout << "<td port=\"target\">target</td>";
            std::cout << "<td port=\"equal\">equal</td>";
            std::cout << "<td port=\"value\">value</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->target.stringify());
                    connect(thisid, "target", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->equal.stringify());
                    connect(thisid, "equal", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->value.stringify());
                    connect(thisid, "value", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBinandexpr(ASTNS::Binandexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Binandexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Binandexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBinnotexpr(ASTNS::Binnotexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Binnotexpr::Form::OP_OPERAND:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Binnotexpr (OP_OPERAND)</td></tr><tr>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"operand\">operand</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->operand.stringify());
                    connect(thisid, "operand", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBinorexpr(ASTNS::Binorexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Binorexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Binorexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitandexpr(ASTNS::Bitandexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitandexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitandexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitorexpr(ASTNS::Bitorexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitorexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitorexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitshiftexpr(ASTNS::Bitshiftexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitshiftexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitshiftexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitxorexpr(ASTNS::Bitxorexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitxorexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitxorexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBlock(ASTNS::Block *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Block::Form::OCURB_STMTS_CCURB:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Block (OCURB_STMTS_CCURB)</td></tr><tr>";
            std::cout << "<td port=\"ocurb\">ocurb</td>";
            std::cout << "<td port=\"stmts\">stmts</td>";
            std::cout << "<td port=\"ccurb\">ccurb</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ocurb.stringify());
                    connect(thisid, "ocurb", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->stmts.stringify());
                    connect(thisid, "stmts", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->ccurb.stringify());
                    connect(thisid, "ccurb", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitCall(ASTNS::Call *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Call::Form::CALLEE_OPARN_ARGS_CPARN:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">Call (CALLEE_OPARN_ARGS_CPARN)</td></tr><tr>";
            std::cout << "<td port=\"callee\">callee</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"args\">args</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->callee.stringify());
                    connect(thisid, "callee", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->args.stringify());
                    connect(thisid, "args", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
        case ASTNS::Call::Form::CALLEE_OPARN_CPARN:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Call (CALLEE_OPARN_CPARN)</td></tr><tr>";
            std::cout << "<td port=\"callee\">callee</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->callee.stringify());
                    connect(thisid, "callee", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitCompeqexpr(ASTNS::Compeqexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Compeqexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Compeqexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitComplgtexpr(ASTNS::Complgtexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Complgtexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Complgtexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitDecl(ASTNS::Decl *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitDeclarations(ASTNS::Declarations *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Declarations::Form::DECLS_DECL:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Declarations (DECLS_DECL)</td></tr><tr>";
            std::cout << "<td port=\"decls\">decls</td>";
            std::cout << "<td port=\"decl\">decl</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->decls)
                    {
                        a->decls->accept(this);
                        connect(thisid, "decls", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decls", nullptrnodeid);
                    }
            }
            {
                    if (a->decl)
                    {
                        a->decl->accept(this);
                        connect(thisid, "decl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decl", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::Declarations::Form::DECL:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Declarations (DECL)</td></tr><tr>";
            std::cout << "<td port=\"decl\">decl</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->decl)
                    {
                        a->decl->accept(this);
                        connect(thisid, "decl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decl", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitExpression(ASTNS::Expression *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitExprstmt(ASTNS::Exprstmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Exprstmt::Form::EXPR_SEMI:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Exprstmt (EXPR_SEMI)</td></tr><tr>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "<td port=\"semi\">semi</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->expr.stringify());
                    connect(thisid, "expr", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi.stringify());
                    connect(thisid, "semi", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitFunction(ASTNS::Function *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Function::Form::RETTY_NAME_OPARN_CPARN_BODY:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"5\">Function (RETTY_NAME_OPARN_CPARN_BODY)</td></tr><tr>";
            std::cout << "<td port=\"retty\">retty</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "<td port=\"body\">body</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->retty)
                    {
                        a->retty->accept(this);
                        connect(thisid, "retty", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "retty", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->body)
                    {
                        a->body->accept(this);
                        connect(thisid, "body", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "body", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::Function::Form::RETTY_NAME_OPARN_PARAMLIST_CPARN_BODY:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"6\">Function (RETTY_NAME_OPARN_PARAMLIST_CPARN_BODY)</td></tr><tr>";
            std::cout << "<td port=\"retty\">retty</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"paramlist\">paramlist</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "<td port=\"body\">body</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->retty)
                    {
                        a->retty->accept(this);
                        connect(thisid, "retty", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "retty", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->paramlist)
                    {
                        a->paramlist->accept(this);
                        connect(thisid, "paramlist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramlist", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->body)
                    {
                        a->body->accept(this);
                        connect(thisid, "body", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "body", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitMultexpr(ASTNS::Multexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Multexpr::Form::LHS_OP_RHS:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Multexpr (LHS_OP_RHS)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->lhs.stringify());
                    connect(thisid, "lhs", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->rhs.stringify());
                    connect(thisid, "rhs", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitParamlist(ASTNS::Paramlist *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Paramlist::Form::PLIST_COMMA_TYPE_NAME:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">Paramlist (PLIST_COMMA_TYPE_NAME)</td></tr><tr>";
            std::cout << "<td port=\"plist\">plist</td>";
            std::cout << "<td port=\"comma\">comma</td>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->plist.stringify());
                    connect(thisid, "plist", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->type.stringify());
                    connect(thisid, "type", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            break;
        case ASTNS::Paramlist::Form::TYPE_NAME:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Paramlist (TYPE_NAME)</td></tr><tr>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->type.stringify());
                    connect(thisid, "type", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitPrimary(ASTNS::Primary *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Primary::Form::VALUE:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Primary (VALUE)</td></tr><tr>";
            std::cout << "<td port=\"value\">value</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->value.stringify());
                    connect(thisid, "value", tokennodeid);
            }
            break;
        case ASTNS::Primary::Form::OPARN_EXPR_CPARN:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Primary (OPARN_EXPR_CPARN)</td></tr><tr>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->expr.stringify());
                    connect(thisid, "expr", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitRetstmt(ASTNS::Retstmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Retstmt::Form::RET_EXPR:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Retstmt (RET_EXPR)</td></tr><tr>";
            std::cout << "<td port=\"ret\">ret</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ret.stringify());
                    connect(thisid, "ret", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->expr.stringify());
                    connect(thisid, "expr", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitStmt(ASTNS::Stmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitStmts(ASTNS::Stmts *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Stmts::Form::STMTS_STMT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Stmts (STMTS_STMT)</td></tr><tr>";
            std::cout << "<td port=\"stmts\">stmts</td>";
            std::cout << "<td port=\"stmt\">stmt</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->stmts)
                    {
                        a->stmts->accept(this);
                        connect(thisid, "stmts", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmts", nullptrnodeid);
                    }
            }
            {
                    if (a->stmt)
                    {
                        a->stmt->accept(this);
                        connect(thisid, "stmt", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmt", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitTernaryexpr(ASTNS::Ternaryexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Ternaryexpr::Form::COND_QUEST_TRUES_COLON_FALSES:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"5\">Ternaryexpr (COND_QUEST_TRUES_COLON_FALSES)</td></tr><tr>";
            std::cout << "<td port=\"cond\">cond</td>";
            std::cout << "<td port=\"quest\">quest</td>";
            std::cout << "<td port=\"trues\">trues</td>";
            std::cout << "<td port=\"colon\">colon</td>";
            std::cout << "<td port=\"falses\">falses</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->cond.stringify());
                    connect(thisid, "cond", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->quest.stringify());
                    connect(thisid, "quest", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->trues.stringify());
                    connect(thisid, "trues", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->colon.stringify());
                    connect(thisid, "colon", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->falses.stringify());
                    connect(thisid, "falses", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitType(ASTNS::Type *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Type::Form::TYPE:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Type (TYPE)</td></tr><tr>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->type.stringify());
                    connect(thisid, "type", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitUnary(ASTNS::Unary *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Unary::Form::OP_OPERAND:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Unary (OP_OPERAND)</td></tr><tr>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"operand\">operand</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->operand.stringify());
                    connect(thisid, "operand", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitVarstmt(ASTNS::Varstmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Varstmt::Form::VAR_TYPE_ASSIGNMENTS_SEMI:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">Varstmt (VAR_TYPE_ASSIGNMENTS_SEMI)</td></tr><tr>";
            std::cout << "<td port=\"var\">var</td>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "<td port=\"assignments\">assignments</td>";
            std::cout << "<td port=\"semi\">semi</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->var.stringify());
                    connect(thisid, "var", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->type.stringify());
                    connect(thisid, "type", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->assignments.stringify());
                    connect(thisid, "assignments", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi.stringify());
                    connect(thisid, "semi", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitVarstmtfinisher(ASTNS::Varstmtfinisher *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Varstmtfinisher::Form::ASSIGNMENTS_COMMA_NAME_EQUAL_EXPR:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"5\">Varstmtfinisher (ASSIGNMENTS_COMMA_NAME_EQUAL_EXPR)</td></tr><tr>";
            std::cout << "<td port=\"assignments\">assignments</td>";
            std::cout << "<td port=\"comma\">comma</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "<td port=\"equal\">equal</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->assignments.stringify());
                    connect(thisid, "assignments", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->equal.stringify());
                    connect(thisid, "equal", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::Varstmtfinisher::Form::NAME_EQUAL_EXPR:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Varstmtfinisher (NAME_EQUAL_EXPR)</td></tr><tr>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "<td port=\"equal\">equal</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->equal.stringify());
                    connect(thisid, "equal", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
// This code was autogenerated - see the utils/ directory

// DOTVISITOR END
void DotVisitor::dotVisit(ASTNS::AST *ast)
{
    std::cout << "strict digraph {\n";
    std::cout << "node [shape=plain]\n";
    ast->accept(this);
    std::cout << "}\n";
}
std::string DotVisitor::curid()
{
    std::stringstream ss;
    ss << "struct" << _curid;
    ++_curid;
    return ss.str();
}
std::string DotVisitor::makeTextNode(std::string type, std::string text)
{
    std::string thisid = curid();
#define FINDREP(x, r) {\
    size_t it;\
    while ((it = text.find(x)) != std::string::npos)\
        text.replace(it, it + 1, r);\
    }

    FINDREP("&", "\x07amp;")
    FINDREP("<", "\x07lt;")
    FINDREP(">", "\x07rt;")
    FINDREP("\x07", "&")

#undef FINDREP
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td>" << type << "</td></tr><tr><td>" << text << "</td></tr></table>>]\n";
    return thisid;
}
void DotVisitor::connect(std::string startid, std::string fieldname, std::string connectto)
{
    std::cout << startid << ":" << fieldname << " -> " << connectto << ":__heading\n";
}
