#include "visit/dotvisitor.h"

#include <iostream>
#include <sstream>

// DOTVISITOR START

// The following code was autogenerated - see the utils/ directory
void DotVisitor::visitAdditionexpr(ASTNS::Additionexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Additionexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Additionexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitArgs(ASTNS::Args *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Args::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Args (ATA)</td></tr><tr>";
            std::cout << "<td port=\"args\">args</td>";
            std::cout << "<td port=\"comma\">comma</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->args)
                    {
                        a->args->accept(this);
                        connect(thisid, "args", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "args", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::Args::Form::A:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Args (A)</td></tr><tr>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitAssignmentexpr(ASTNS::Assignmentexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Assignmentexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Assignmentexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"target\">target</td>";
            std::cout << "<td port=\"equal\">equal</td>";
            std::cout << "<td port=\"value\">value</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->target)
                    {
                        a->target->accept(this);
                        connect(thisid, "target", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "target", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->equal.stringify());
                    connect(thisid, "equal", tokennodeid);
            }
            {
                    if (a->value)
                    {
                        a->value->accept(this);
                        connect(thisid, "value", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "value", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBinandexpr(ASTNS::Binandexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Binandexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Binandexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBinnotexpr(ASTNS::Binnotexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Binnotexpr::Form::TA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Binnotexpr (TA)</td></tr><tr>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"operand\">operand</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->operand)
                    {
                        a->operand->accept(this);
                        connect(thisid, "operand", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "operand", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBinorexpr(ASTNS::Binorexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Binorexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Binorexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitandexpr(ASTNS::Bitandexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitandexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitandexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitorexpr(ASTNS::Bitorexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitorexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitorexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitshiftexpr(ASTNS::Bitshiftexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitshiftexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitshiftexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBitxorexpr(ASTNS::Bitxorexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Bitxorexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Bitxorexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitBlock(ASTNS::Block *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Block::Form::TAT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Block (TAT)</td></tr><tr>";
            std::cout << "<td port=\"ocurb\">ocurb</td>";
            std::cout << "<td port=\"stmts\">stmts</td>";
            std::cout << "<td port=\"ccurb\">ccurb</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ocurb.stringify());
                    connect(thisid, "ocurb", tokennodeid);
            }
            {
                    if (a->stmts)
                    {
                        a->stmts->accept(this);
                        connect(thisid, "stmts", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmts", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->ccurb.stringify());
                    connect(thisid, "ccurb", tokennodeid);
            }
            break;
        case ASTNS::Block::Form::TT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Block (TT)</td></tr><tr>";
            std::cout << "<td port=\"ocurb\">ocurb</td>";
            std::cout << "<td port=\"ccurb\">ccurb</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ocurb.stringify());
                    connect(thisid, "ocurb", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->ccurb.stringify());
                    connect(thisid, "ccurb", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitCallexpr(ASTNS::Callexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Callexpr::Form::ATAT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">Callexpr (ATAT)</td></tr><tr>";
            std::cout << "<td port=\"callee\">callee</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"args\">args</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->callee)
                    {
                        a->callee->accept(this);
                        connect(thisid, "callee", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "callee", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->args)
                    {
                        a->args->accept(this);
                        connect(thisid, "args", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "args", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
        case ASTNS::Callexpr::Form::ATT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Callexpr (ATT)</td></tr><tr>";
            std::cout << "<td port=\"callee\">callee</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->callee)
                    {
                        a->callee->accept(this);
                        connect(thisid, "callee", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "callee", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitCompeqexpr(ASTNS::Compeqexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Compeqexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Compeqexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitComplgtexpr(ASTNS::Complgtexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Complgtexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Complgtexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitDecl(ASTNS::Decl *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitDecls(ASTNS::Decls *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Decls::Form::AA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Decls (AA)</td></tr><tr>";
            std::cout << "<td port=\"decls\">decls</td>";
            std::cout << "<td port=\"decl\">decl</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->decls)
                    {
                        a->decls->accept(this);
                        connect(thisid, "decls", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decls", nullptrnodeid);
                    }
            }
            {
                    if (a->decl)
                    {
                        a->decl->accept(this);
                        connect(thisid, "decl", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "decl", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitEmptystmt(ASTNS::Emptystmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Emptystmt::Form::T:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Emptystmt (T)</td></tr><tr>";
            std::cout << "<td port=\"semi\">semi</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi.stringify());
                    connect(thisid, "semi", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitExpression(ASTNS::Expression *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitExprstmt(ASTNS::Exprstmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Exprstmt::Form::AT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Exprstmt (AT)</td></tr><tr>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "<td port=\"semi\">semi</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi.stringify());
                    connect(thisid, "semi", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitFunction(ASTNS::Function *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Function::Form::TATTTA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"6\">Function (TATTTA)</td></tr><tr>";
            std::cout << "<td port=\"fun\">fun</td>";
            std::cout << "<td port=\"retty\">retty</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "<td port=\"body\">body</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->fun.stringify());
                    connect(thisid, "fun", tokennodeid);
            }
            {
                    if (a->retty)
                    {
                        a->retty->accept(this);
                        connect(thisid, "retty", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "retty", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->body)
                    {
                        a->body->accept(this);
                        connect(thisid, "body", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "body", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::Function::Form::TATTATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"7\">Function (TATTATA)</td></tr><tr>";
            std::cout << "<td port=\"fun\">fun</td>";
            std::cout << "<td port=\"retty\">retty</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"paramlist\">paramlist</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "<td port=\"body\">body</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->fun.stringify());
                    connect(thisid, "fun", tokennodeid);
            }
            {
                    if (a->retty)
                    {
                        a->retty->accept(this);
                        connect(thisid, "retty", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "retty", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->paramlist)
                    {
                        a->paramlist->accept(this);
                        connect(thisid, "paramlist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "paramlist", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            {
                    if (a->body)
                    {
                        a->body->accept(this);
                        connect(thisid, "body", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "body", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitMultexpr(ASTNS::Multexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Multexpr::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Multexpr (ATA)</td></tr><tr>";
            std::cout << "<td port=\"lhs\">lhs</td>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"rhs\">rhs</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->lhs)
                    {
                        a->lhs->accept(this);
                        connect(thisid, "lhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "lhs", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->rhs)
                    {
                        a->rhs->accept(this);
                        connect(thisid, "rhs", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "rhs", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitParamlist(ASTNS::Paramlist *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Paramlist::Form::ATAT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">Paramlist (ATAT)</td></tr><tr>";
            std::cout << "<td port=\"plist\">plist</td>";
            std::cout << "<td port=\"comma\">comma</td>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->plist)
                    {
                        a->plist->accept(this);
                        connect(thisid, "plist", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "plist", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    if (a->type)
                    {
                        a->type->accept(this);
                        connect(thisid, "type", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "type", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            break;
        case ASTNS::Paramlist::Form::AT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Paramlist (AT)</td></tr><tr>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->type)
                    {
                        a->type->accept(this);
                        connect(thisid, "type", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "type", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitPrimaryexpr(ASTNS::Primaryexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Primaryexpr::Form::T:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Primaryexpr (T)</td></tr><tr>";
            std::cout << "<td port=\"value\">value</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->value.stringify());
                    connect(thisid, "value", tokennodeid);
            }
            break;
        case ASTNS::Primaryexpr::Form::TAT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Primaryexpr (TAT)</td></tr><tr>";
            std::cout << "<td port=\"oparn\">oparn</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "<td port=\"cparn\">cparn</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
                    connect(thisid, "oparn", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
                    connect(thisid, "cparn", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitRetstmt(ASTNS::Retstmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Retstmt::Form::TAT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Retstmt (TAT)</td></tr><tr>";
            std::cout << "<td port=\"ret\">ret</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "<td port=\"semi\">semi</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->ret.stringify());
                    connect(thisid, "ret", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi.stringify());
                    connect(thisid, "semi", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitStmt(ASTNS::Stmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitStmts(ASTNS::Stmts *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Stmts::Form::AA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Stmts (AA)</td></tr><tr>";
            std::cout << "<td port=\"stmts\">stmts</td>";
            std::cout << "<td port=\"stmt\">stmt</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->stmts)
                    {
                        a->stmts->accept(this);
                        connect(thisid, "stmts", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmts", nullptrnodeid);
                    }
            }
            {
                    if (a->stmt)
                    {
                        a->stmt->accept(this);
                        connect(thisid, "stmt", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "stmt", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitTernaryexpr(ASTNS::Ternaryexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Ternaryexpr::Form::ATATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"5\">Ternaryexpr (ATATA)</td></tr><tr>";
            std::cout << "<td port=\"cond\">cond</td>";
            std::cout << "<td port=\"quest\">quest</td>";
            std::cout << "<td port=\"trues\">trues</td>";
            std::cout << "<td port=\"colon\">colon</td>";
            std::cout << "<td port=\"falses\">falses</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->cond)
                    {
                        a->cond->accept(this);
                        connect(thisid, "cond", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "cond", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->quest.stringify());
                    connect(thisid, "quest", tokennodeid);
            }
            {
                    if (a->trues)
                    {
                        a->trues->accept(this);
                        connect(thisid, "trues", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "trues", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->colon.stringify());
                    connect(thisid, "colon", tokennodeid);
            }
            {
                    if (a->falses)
                    {
                        a->falses->accept(this);
                        connect(thisid, "falses", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "falses", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitType(ASTNS::Type *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Type::Form::T:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Type (T)</td></tr><tr>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->type.stringify());
                    connect(thisid, "type", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitUnaryexpr(ASTNS::Unaryexpr *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Unaryexpr::Form::TA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Unaryexpr (TA)</td></tr><tr>";
            std::cout << "<td port=\"op\">op</td>";
            std::cout << "<td port=\"operand\">operand</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
                    connect(thisid, "op", tokennodeid);
            }
            {
                    if (a->operand)
                    {
                        a->operand->accept(this);
                        connect(thisid, "operand", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "operand", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitVarstmt(ASTNS::Varstmt *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Varstmt::Form::TAAT:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">Varstmt (TAAT)</td></tr><tr>";
            std::cout << "<td port=\"var\">var</td>";
            std::cout << "<td port=\"type\">type</td>";
            std::cout << "<td port=\"assignments\">assignments</td>";
            std::cout << "<td port=\"semi\">semi</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->var.stringify());
                    connect(thisid, "var", tokennodeid);
            }
            {
                    if (a->type)
                    {
                        a->type->accept(this);
                        connect(thisid, "type", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "type", nullptrnodeid);
                    }
            }
            {
                    if (a->assignments)
                    {
                        a->assignments->accept(this);
                        connect(thisid, "assignments", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "assignments", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->semi.stringify());
                    connect(thisid, "semi", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitVarstmtitem(ASTNS::Varstmtitem *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Varstmtitem::Form::TTA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Varstmtitem (TTA)</td></tr><tr>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "<td port=\"equal\">equal</td>";
            std::cout << "<td port=\"expr\">expr</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->equal.stringify());
                    connect(thisid, "equal", tokennodeid);
            }
            {
                    if (a->expr)
                    {
                        a->expr->accept(this);
                        connect(thisid, "expr", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "expr", nullptrnodeid);
                    }
            }
            break;
        case ASTNS::Varstmtitem::Form::T:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">Varstmtitem (T)</td></tr><tr>";
            std::cout << "<td port=\"name\">name</td>";
            std::cout << "</tr></table>>]\n";
            {
                    std::string tokennodeid = makeTextNode("Token", a->name.stringify());
                    connect(thisid, "name", tokennodeid);
            }
            break;
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitVarstmtitems(ASTNS::Varstmtitems *a)
{
    std::string thisid = curid();
    switch (a->form)
    {
        case ASTNS::Varstmtitems::Form::ATA:
            std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Varstmtitems (ATA)</td></tr><tr>";
            std::cout << "<td port=\"items\">items</td>";
            std::cout << "<td port=\"comma\">comma</td>";
            std::cout << "<td port=\"item\">item</td>";
            std::cout << "</tr></table>>]\n";
            {
                    if (a->items)
                    {
                        a->items->accept(this);
                        connect(thisid, "items", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "items", nullptrnodeid);
                    }
            }
            {
                    std::string tokennodeid = makeTextNode("Token", a->comma.stringify());
                    connect(thisid, "comma", tokennodeid);
            }
            {
                    if (a->item)
                    {
                        a->item->accept(this);
                        connect(thisid, "item", lastid);
                    }
                    else
                    {
                        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
                        connect(thisid, "item", nullptrnodeid);
                    }
            }
            break;
    }
    lastid = std::move(thisid);
}
// This code was autogenerated - see the utils/ directory

// DOTVISITOR END
void DotVisitor::dotVisit(ASTNS::AST *ast)
{
    std::cout << "strict digraph {\n";
    std::cout << "node [shape=plain]\n";
    ast->accept(this);
    std::cout << "}\n";
}
std::string DotVisitor::curid()
{
    std::stringstream ss;
    ss << "struct" << _curid;
    ++_curid;
    return ss.str();
}
std::string DotVisitor::makeTextNode(std::string type, std::string text)
{
    std::string thisid = curid();
#define FINDREP(x, r) {\
    size_t it;\
    while ((it = text.find(x)) != std::string::npos)\
        text.replace(it, it + 1, r);\
    }

    FINDREP("&", "\x07amp;")
    FINDREP("<", "\x07lt;")
    FINDREP(">", "\x07rt;")
    FINDREP("\x07", "&")

#undef FINDREP
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td>" << type << "</td></tr><tr><td>" << text << "</td></tr></table>>]\n";
    return thisid;
}
void DotVisitor::connect(std::string startid, std::string fieldname, std::string connectto)
{
    std::cout << startid << ":" << fieldname << " -> " << connectto << ":__heading\n";
}
