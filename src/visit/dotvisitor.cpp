#include "visit/dotvisitor.h"

#include <iostream>
#include <sstream>

// DOTVISITOR START

// The following code was autogenerated - see the utils/ directory
void DotVisitor::visitAdd(ASTNS::Add *a)
{
    std::string thisid = curid();
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Add</td></tr><tr>";
    std::cout << "<td port=\"lhs\">lhs</td>";
    std::cout << "<td port=\"op\">op</td>";
    std::cout << "<td port=\"rhs\">rhs</td>";
    std::cout << "</tr></table>>]\n";
    {
    if (a->lhs)
    {
        a->lhs->accept(this);
        connect(thisid, "lhs", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "lhs", nullptrnodeid);
    }
    }
    {
    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
    connect(thisid, "op", tokennodeid);
    }
    {
    if (a->rhs)
    {
        a->rhs->accept(this);
        connect(thisid, "rhs", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "rhs", nullptrnodeid);
    }
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitMult(ASTNS::Mult *a)
{
    std::string thisid = curid();
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"3\">Mult</td></tr><tr>";
    std::cout << "<td port=\"lhs\">lhs</td>";
    std::cout << "<td port=\"op\">op</td>";
    std::cout << "<td port=\"rhs\">rhs</td>";
    std::cout << "</tr></table>>]\n";
    {
    if (a->lhs)
    {
        a->lhs->accept(this);
        connect(thisid, "lhs", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "lhs", nullptrnodeid);
    }
    }
    {
    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
    connect(thisid, "op", tokennodeid);
    }
    {
    if (a->rhs)
    {
        a->rhs->accept(this);
        connect(thisid, "rhs", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "rhs", nullptrnodeid);
    }
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitNew_expr(ASTNS::New_expr *a)
{
    std::string thisid = curid();
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">New_expr</td></tr><tr>";
    std::cout << "<td port=\"expr\">expr</td>";
    std::cout << "</tr></table>>]\n";
    {
    if (a->expr)
    {
        a->expr->accept(this);
        connect(thisid, "expr", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "expr", nullptrnodeid);
    }
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitNew_stmt(ASTNS::New_stmt *a)
{
    std::string thisid = curid();
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"1\">New_stmt</td></tr><tr>";
    std::cout << "<td port=\"expr\">expr</td>";
    std::cout << "</tr></table>>]\n";
    {
    if (a->expr)
    {
        a->expr->accept(this);
        connect(thisid, "expr", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "expr", nullptrnodeid);
    }
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitPrimary(ASTNS::Primary *a)
{
    std::string thisid = curid();
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"4\">Primary</td></tr><tr>";
    std::cout << "<td port=\"value\">value</td>";
    std::cout << "<td port=\"oparn\">oparn</td>";
    std::cout << "<td port=\"expr\">expr</td>";
    std::cout << "<td port=\"cparn\">cparn</td>";
    std::cout << "</tr></table>>]\n";
    {
    std::string tokennodeid = makeTextNode("Token", a->value.stringify());
    connect(thisid, "value", tokennodeid);
    }
    {
    std::string tokennodeid = makeTextNode("Token", a->oparn.stringify());
    connect(thisid, "oparn", tokennodeid);
    }
    {
    if (a->expr)
    {
        a->expr->accept(this);
        connect(thisid, "expr", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "expr", nullptrnodeid);
    }
    }
    {
    std::string tokennodeid = makeTextNode("Token", a->cparn.stringify());
    connect(thisid, "cparn", tokennodeid);
    }
    lastid = std::move(thisid);
}
void DotVisitor::visitUnary(ASTNS::Unary *a)
{
    std::string thisid = curid();
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td port=\"__heading\" colspan=\"2\">Unary</td></tr><tr>";
    std::cout << "<td port=\"op\">op</td>";
    std::cout << "<td port=\"operand\">operand</td>";
    std::cout << "</tr></table>>]\n";
    {
    std::string tokennodeid = makeTextNode("Token", a->op.stringify());
    connect(thisid, "op", tokennodeid);
    }
    {
    if (a->operand)
    {
        a->operand->accept(this);
        connect(thisid, "operand", lastid);
    }
    else
    {
        std::string nullptrnodeid = makeTextNode("nullptr_t", "nullptr");
        connect(thisid, "operand", nullptrnodeid);
    }
    }
    lastid = std::move(thisid);
}
// This code was autogenerated - see the utils/ directory

// DOTVISITOR END
std::string DotVisitor::curid()
{
    std::stringstream ss;
    ss << "struct" << _curid;
    ++_curid;
    return ss.str();
}
std::string DotVisitor::makeTextNode(std::string type, std::string text)
{
    std::string thisid = curid();
#define FINDREP(x, r) {\
    size_t it;\
    while ((it = text.find(x)) != std::string::npos)\
        text.replace(it, it + 1, r);\
    }

    FINDREP("&", "\x07amp;")
    FINDREP("<", "\x07lt;")
    FINDREP(">", "\x07rt;")
    FINDREP("\x07", "&")

#undef FINDREP
    std::cout << thisid << " [label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td>" << type << "</td></tr><tr><td>" << text << "</td></tr></table>>]\n";
    return thisid;
}
void DotVisitor::connect(std::string startid, std::string fieldname, std::string connectto)
{
    std::cout << startid << ":" << fieldname << " -> " << connectto << ":__heading\n";
}
