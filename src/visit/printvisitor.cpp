#include "visit/printvisitor.h"

#include <iostream>
#include <string>

// PRINTVISITOR START

// The following code was autogenerated - see the utils/ directory
void PrintVisitor::visitAdd(ASTNS::Add *a)
{
    pai("Add\n");
    ++indent;
    pai("lhs =");
    if (a->lhs)
    {
        ++indent;
        pai("\n");
        a->lhs->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    pai("op =");
    pai(" [");
    pai(std::string(a->op.start, a->op.end));
    pai("]\n");
    pai("rhs =");
    if (a->rhs)
    {
        ++indent;
        pai("\n");
        a->rhs->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    --indent;
}
void PrintVisitor::visitMult(ASTNS::Mult *a)
{
    pai("Mult\n");
    ++indent;
    pai("lhs =");
    if (a->lhs)
    {
        ++indent;
        pai("\n");
        a->lhs->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    pai("op =");
    pai(" [");
    pai(std::string(a->op.start, a->op.end));
    pai("]\n");
    pai("rhs =");
    if (a->rhs)
    {
        ++indent;
        pai("\n");
        a->rhs->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    --indent;
}
void PrintVisitor::visitNew_expr(ASTNS::New_expr *a)
{
    pai("New_expr\n");
    ++indent;
    pai("expr =");
    if (a->expr)
    {
        ++indent;
        pai("\n");
        a->expr->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    --indent;
}
void PrintVisitor::visitNew_stmt(ASTNS::New_stmt *a)
{
    pai("New_stmt\n");
    ++indent;
    pai("expr =");
    if (a->expr)
    {
        ++indent;
        pai("\n");
        a->expr->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    --indent;
}
void PrintVisitor::visitPrimary(ASTNS::Primary *a)
{
    pai("Primary\n");
    ++indent;
    pai("value =");
    pai(" [");
    pai(std::string(a->value.start, a->value.end));
    pai("]\n");
    pai("oparn =");
    pai(" [");
    pai(std::string(a->oparn.start, a->oparn.end));
    pai("]\n");
    pai("expr =");
    if (a->expr)
    {
        ++indent;
        pai("\n");
        a->expr->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    pai("cparn =");
    pai(" [");
    pai(std::string(a->cparn.start, a->cparn.end));
    pai("]\n");
    --indent;
}
void PrintVisitor::visitUnary(ASTNS::Unary *a)
{
    pai("Unary\n");
    ++indent;
    pai("op =");
    pai(" [");
    pai(std::string(a->op.start, a->op.end));
    pai("]\n");
    pai("operand =");
    if (a->operand)
    {
        ++indent;
        pai("\n");
        a->operand->accept(this);
        --indent;
    }
    else
    {
        pai(" nullptr\n");
    }
    --indent;
}
// This code was autogenerated - see the utils/ directory

// PRINTVISITOR END

void PrintVisitor::pai(std::string &s)
{
    for (auto i = s.begin(); i != s.end(); ++i)
    {
        if (pindent)
            for (int j = 0; j < indent; ++j)
                std::cout << "  ";

        pindent = false;
        std::cout << *i;

        if (*i == '\n')
            pindent = true;
    }

    std::cout << std::flush;
}
void PrintVisitor::pai(std::string &&s)
{
    pai(s);
}
