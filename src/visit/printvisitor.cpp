#include "visit/printvisitor.h"

#include <iostream>
#include <string>

// PRINTVISITOR START

// The following code was autogenerated - see the utils/ directory
void PrintVisitor::visitAdd(ASTNS::Add *a)
{
    pai("Add\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Add::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitMult(ASTNS::Mult *a)
{
    pai("Mult\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Mult::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitNew_expr(ASTNS::New_expr *a)
{
    pai("New_expr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::New_expr::Form::A:
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitNew_stmt(ASTNS::New_stmt *a)
{
    pai("New_stmt\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::New_stmt::Form::A:
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitPrimary(ASTNS::Primary *a)
{
    pai("Primary\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Primary::Form::T:
            pai("value =");
            pai(" [");
            pai(std::string(a->value.start, a->value.end));
            pai("]\n");
            break;
        case ASTNS::Primary::Form::TAT:
            pai("oparn =");
            pai(" [");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("]\n");
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("cparn =");
            pai(" [");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitUnary(ASTNS::Unary *a)
{
    pai("Unary\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Unary::Form::TA:
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("operand =");
            if (a->operand)
            {
                ++indent;
                pai("\n");
                a->operand->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
// This code was autogenerated - see the utils/ directory

// PRINTVISITOR END

void PrintVisitor::pai(std::string &s)
{
    for (auto i = s.begin(); i != s.end(); ++i)
    {
        if (pindent)
            for (int j = 0; j < indent; ++j)
                std::cout << "  ";

        pindent = false;
        std::cout << *i;

        if (*i == '\n')
            pindent = true;
    }

    std::cout << std::flush;
}
void PrintVisitor::pai(std::string &&s)
{
    pai(s);
}
