#include "visit/printvisitor.h"

#include <iostream>
#include <string>

// PRINTVISITOR START

// The following code was autogenerated - see the utils/ directory
void PrintVisitor::visitAdditionExpr(ASTNS::AdditionExpr *a)
{
    pai("AdditionExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::AdditionExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitArgs(ASTNS::Args *a)
{
    pai("Args\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Args::Form::ATA:
            pai("args =");
            if (a->args)
            {
                ++indent;
                pai("\n");
                a->args->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("comma =");
            pai(" [");
            pai(std::string(a->comma.start, a->comma.end));
            pai("]\n");
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
        case ASTNS::Args::Form::A:
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitAssignmentExpr(ASTNS::AssignmentExpr *a)
{
    pai("AssignmentExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::AssignmentExpr::Form::ATA:
            pai("target =");
            if (a->target)
            {
                ++indent;
                pai("\n");
                a->target->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("equal =");
            pai(" [");
            pai(std::string(a->equal.start, a->equal.end));
            pai("]\n");
            pai("value =");
            if (a->value)
            {
                ++indent;
                pai("\n");
                a->value->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBinandExpr(ASTNS::BinandExpr *a)
{
    pai("BinandExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::BinandExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBinnotExpr(ASTNS::BinnotExpr *a)
{
    pai("BinnotExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::BinnotExpr::Form::TA:
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("operand =");
            if (a->operand)
            {
                ++indent;
                pai("\n");
                a->operand->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBinorExpr(ASTNS::BinorExpr *a)
{
    pai("BinorExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::BinorExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBitandExpr(ASTNS::BitandExpr *a)
{
    pai("BitandExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::BitandExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBitorExpr(ASTNS::BitorExpr *a)
{
    pai("BitorExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::BitorExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBitshiftExpr(ASTNS::BitshiftExpr *a)
{
    pai("BitshiftExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::BitshiftExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBitxorExpr(ASTNS::BitxorExpr *a)
{
    pai("BitxorExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::BitxorExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitBlock(ASTNS::Block *a)
{
    pai("Block\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Block::Form::TAT:
            pai("ocurb =");
            pai(" [");
            pai(std::string(a->ocurb.start, a->ocurb.end));
            pai("]\n");
            pai("stmts =");
            if (a->stmts)
            {
                ++indent;
                pai("\n");
                a->stmts->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("ccurb =");
            pai(" [");
            pai(std::string(a->ccurb.start, a->ccurb.end));
            pai("]\n");
            break;
        case ASTNS::Block::Form::TT:
            pai("ocurb =");
            pai(" [");
            pai(std::string(a->ocurb.start, a->ocurb.end));
            pai("]\n");
            pai("ccurb =");
            pai(" [");
            pai(std::string(a->ccurb.start, a->ccurb.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitCallExpr(ASTNS::CallExpr *a)
{
    pai("CallExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::CallExpr::Form::ATAT:
            pai("callee =");
            if (a->callee)
            {
                ++indent;
                pai("\n");
                a->callee->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("oparn =");
            pai(" [");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("]\n");
            pai("args =");
            if (a->args)
            {
                ++indent;
                pai("\n");
                a->args->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("cparn =");
            pai(" [");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("]\n");
            break;
        case ASTNS::CallExpr::Form::ATT:
            pai("callee =");
            if (a->callee)
            {
                ++indent;
                pai("\n");
                a->callee->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("oparn =");
            pai(" [");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("]\n");
            pai("cparn =");
            pai(" [");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitCompeqExpr(ASTNS::CompeqExpr *a)
{
    pai("CompeqExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::CompeqExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitComplgtExpr(ASTNS::ComplgtExpr *a)
{
    pai("ComplgtExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::ComplgtExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitDecl(ASTNS::Decl *a)
{
    pai("Decl\n");
    ++indent;
    switch (a->form)
    {
    }
    --indent;
}
void PrintVisitor::visitDecls(ASTNS::Decls *a)
{
    pai("Decls\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Decls::Form::AA:
            pai("decls =");
            if (a->decls)
            {
                ++indent;
                pai("\n");
                a->decls->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("decl =");
            if (a->decl)
            {
                ++indent;
                pai("\n");
                a->decl->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitEmptyStmt(ASTNS::EmptyStmt *a)
{
    pai("EmptyStmt\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::EmptyStmt::Form::T:
            pai("semi =");
            pai(" [");
            pai(std::string(a->semi.start, a->semi.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitExprStmt(ASTNS::ExprStmt *a)
{
    pai("ExprStmt\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::ExprStmt::Form::AT:
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("semi =");
            pai(" [");
            pai(std::string(a->semi.start, a->semi.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitExpression(ASTNS::Expression *a)
{
    pai("Expression\n");
    ++indent;
    switch (a->form)
    {
    }
    --indent;
}
void PrintVisitor::visitFunction(ASTNS::Function *a)
{
    pai("Function\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Function::Form::TATTTA:
            pai("fun =");
            pai(" [");
            pai(std::string(a->fun.start, a->fun.end));
            pai("]\n");
            pai("retty =");
            if (a->retty)
            {
                ++indent;
                pai("\n");
                a->retty->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("name =");
            pai(" [");
            pai(std::string(a->name.start, a->name.end));
            pai("]\n");
            pai("oparn =");
            pai(" [");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("]\n");
            pai("cparn =");
            pai(" [");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("]\n");
            pai("body =");
            if (a->body)
            {
                ++indent;
                pai("\n");
                a->body->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
        case ASTNS::Function::Form::TATTATA:
            pai("fun =");
            pai(" [");
            pai(std::string(a->fun.start, a->fun.end));
            pai("]\n");
            pai("retty =");
            if (a->retty)
            {
                ++indent;
                pai("\n");
                a->retty->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("name =");
            pai(" [");
            pai(std::string(a->name.start, a->name.end));
            pai("]\n");
            pai("oparn =");
            pai(" [");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("]\n");
            pai("paramlist =");
            if (a->paramlist)
            {
                ++indent;
                pai("\n");
                a->paramlist->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("cparn =");
            pai(" [");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("]\n");
            pai("body =");
            if (a->body)
            {
                ++indent;
                pai("\n");
                a->body->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitMultExpr(ASTNS::MultExpr *a)
{
    pai("MultExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::MultExpr::Form::ATA:
            pai("lhs =");
            if (a->lhs)
            {
                ++indent;
                pai("\n");
                a->lhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("rhs =");
            if (a->rhs)
            {
                ++indent;
                pai("\n");
                a->rhs->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitParamList(ASTNS::ParamList *a)
{
    pai("ParamList\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::ParamList::Form::ATAT:
            pai("plist =");
            if (a->plist)
            {
                ++indent;
                pai("\n");
                a->plist->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("comma =");
            pai(" [");
            pai(std::string(a->comma.start, a->comma.end));
            pai("]\n");
            pai("type =");
            if (a->type)
            {
                ++indent;
                pai("\n");
                a->type->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("name =");
            pai(" [");
            pai(std::string(a->name.start, a->name.end));
            pai("]\n");
            break;
        case ASTNS::ParamList::Form::AT:
            pai("type =");
            if (a->type)
            {
                ++indent;
                pai("\n");
                a->type->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("name =");
            pai(" [");
            pai(std::string(a->name.start, a->name.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitPrimaryExpr(ASTNS::PrimaryExpr *a)
{
    pai("PrimaryExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::PrimaryExpr::Form::T:
            pai("value =");
            pai(" [");
            pai(std::string(a->value.start, a->value.end));
            pai("]\n");
            break;
        case ASTNS::PrimaryExpr::Form::TAT:
            pai("oparn =");
            pai(" [");
            pai(std::string(a->oparn.start, a->oparn.end));
            pai("]\n");
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("cparn =");
            pai(" [");
            pai(std::string(a->cparn.start, a->cparn.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitRetStmt(ASTNS::RetStmt *a)
{
    pai("RetStmt\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::RetStmt::Form::TAT:
            pai("ret =");
            pai(" [");
            pai(std::string(a->ret.start, a->ret.end));
            pai("]\n");
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("semi =");
            pai(" [");
            pai(std::string(a->semi.start, a->semi.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitStmt(ASTNS::Stmt *a)
{
    pai("Stmt\n");
    ++indent;
    switch (a->form)
    {
    }
    --indent;
}
void PrintVisitor::visitStmts(ASTNS::Stmts *a)
{
    pai("Stmts\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Stmts::Form::AA:
            pai("stmts =");
            if (a->stmts)
            {
                ++indent;
                pai("\n");
                a->stmts->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("stmt =");
            if (a->stmt)
            {
                ++indent;
                pai("\n");
                a->stmt->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitTernaryExpr(ASTNS::TernaryExpr *a)
{
    pai("TernaryExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::TernaryExpr::Form::ATATA:
            pai("cond =");
            if (a->cond)
            {
                ++indent;
                pai("\n");
                a->cond->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("quest =");
            pai(" [");
            pai(std::string(a->quest.start, a->quest.end));
            pai("]\n");
            pai("trues =");
            if (a->trues)
            {
                ++indent;
                pai("\n");
                a->trues->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("colon =");
            pai(" [");
            pai(std::string(a->colon.start, a->colon.end));
            pai("]\n");
            pai("falses =");
            if (a->falses)
            {
                ++indent;
                pai("\n");
                a->falses->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitType(ASTNS::Type *a)
{
    pai("Type\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::Type::Form::T:
            pai("type =");
            pai(" [");
            pai(std::string(a->type.start, a->type.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitUnaryExpr(ASTNS::UnaryExpr *a)
{
    pai("UnaryExpr\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::UnaryExpr::Form::TA:
            pai("op =");
            pai(" [");
            pai(std::string(a->op.start, a->op.end));
            pai("]\n");
            pai("operand =");
            if (a->operand)
            {
                ++indent;
                pai("\n");
                a->operand->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
void PrintVisitor::visitVarStmt(ASTNS::VarStmt *a)
{
    pai("VarStmt\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::VarStmt::Form::TAAT:
            pai("var =");
            pai(" [");
            pai(std::string(a->var.start, a->var.end));
            pai("]\n");
            pai("type =");
            if (a->type)
            {
                ++indent;
                pai("\n");
                a->type->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("assignments =");
            if (a->assignments)
            {
                ++indent;
                pai("\n");
                a->assignments->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("semi =");
            pai(" [");
            pai(std::string(a->semi.start, a->semi.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitVarStmtItem(ASTNS::VarStmtItem *a)
{
    pai("VarStmtItem\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::VarStmtItem::Form::TTA:
            pai("name =");
            pai(" [");
            pai(std::string(a->name.start, a->name.end));
            pai("]\n");
            pai("equal =");
            pai(" [");
            pai(std::string(a->equal.start, a->equal.end));
            pai("]\n");
            pai("expr =");
            if (a->expr)
            {
                ++indent;
                pai("\n");
                a->expr->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
        case ASTNS::VarStmtItem::Form::T:
            pai("name =");
            pai(" [");
            pai(std::string(a->name.start, a->name.end));
            pai("]\n");
            break;
    }
    --indent;
}
void PrintVisitor::visitVarStmtItems(ASTNS::VarStmtItems *a)
{
    pai("VarStmtItems\n");
    ++indent;
    switch (a->form)
    {
        case ASTNS::VarStmtItems::Form::ATA:
            pai("items =");
            if (a->items)
            {
                ++indent;
                pai("\n");
                a->items->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            pai("comma =");
            pai(" [");
            pai(std::string(a->comma.start, a->comma.end));
            pai("]\n");
            pai("item =");
            if (a->item)
            {
                ++indent;
                pai("\n");
                a->item->accept(this);
                --indent;
            }
            else
            {
                pai(" nullptr\n");
            }
            break;
    }
    --indent;
}
// This code was autogenerated - see the utils/ directory

// PRINTVISITOR END

void PrintVisitor::pai(std::string &s)
{
    for (auto i = s.begin(); i != s.end(); ++i)
    {
        if (pindent)
            for (int j = 0; j < indent; ++j)
                std::cout << "  ";

        pindent = false;
        std::cout << *i;

        if (*i == '\n')
            pindent = true;
    }

    std::cout << std::flush;
}
void PrintVisitor::pai(std::string &&s)
{
    pai(s);
}
