#include "message/errmsgs.h"
#include "message/errors.h"

// ERRCPP START

// The following code was autogenerated - see the utils/ directory
// E0001 - unexpected-char
// | The lexer found an unexpected character that could not begin
// | a token.
void E0001(Token const &tok)
{
    Error(Error::MsgType::ERROR, tok, "unexpected-char")
        .underline(Error::Underline(tok, '^')
            .error("unexpected character")
        )
    ;
}
// E0002 - unterm-charlit
// | The lexer found an unterminated character literal. A common
// | cause of this is character literals that are more than one
// | character long.
void E0002(Token const &tok)
{
    Error(Error::MsgType::ERROR, tok, "unterm-charlit")
        .underline(Error::Underline(tok, '^')
            .error("unterminated character literal")
        )
    ;
}
// E0003 - unterm-strlit
// | The lexer found a newline in a string literal, thereby
// | making it unterminated. Newlines that need to appear inside
// | the string literal must be escaped by putting `\n`.
void E0003(Token const &tok)
{
    Error(Error::MsgType::ERROR, tok, "unterm-strlit")
        .underline(Error::Underline(tok, '^')
            .error("unterminated string literal")
        )
    ;
}
// E0004 - invalid-intlit-base
// | The lexer found an integer literal that has an invalid base.
void E0004(Token const &tok)
{
    Error(Error::MsgType::ERROR, tok, "invalid-intlit-base")
        .underline(Error::Underline(tok, '^')
            .error("invalid integer literal base")
        )
    ;
}
// E0005 - nondecimal-floatlit
// | The lexer found a non-decimal floating point literal.
void E0005(Token const &tok)
{
    Error(Error::MsgType::ERROR, tok, "nondecimal-floatlit")
        .underline(Error::Underline(tok, '^')
            .error("invalid integer literal base")
        )
    ;
}
// This code was autogenerated - see the utils/ directory

// ERRCPP END
