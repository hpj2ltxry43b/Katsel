// grammar will expand as more features are implemented
program -> decl* EOF;

decl -> function; // soon will add classes here

function -> type IDENTIFIER OPARN arglist? CPARN block;

block -> OCURB statement* CCURB; 
type -> INT | FLOAT | BOOL | DOUBLE;
arglist -> type IDENTIFIER (COMMA type IDENTIFIER)*;

statement -> exprstmt SEMICOLON |
            block;

exprstmt -> expression;

// expresion
// this grammar is heavily based off of the grammar for the Lox Language in the book "Crafting Interpreters" by Bob Nystrom
// this grammar also closely follows the precedences of the operators in Python
expression -> ternaryexpr;
ternaryexpr -> binorexpr (QUESTION binorexpr COLON ternaryexpr)?;
binorexpr -> binandexpr (DOUBLEPIPE binandexpr)*;
binandexpr -> binnotexpr (DOUBLEAMPER binnotexpr)*;
binnotexpr -> BANG binnotexpr | compeqexpr;
compeqexpr -> complgtexpr ((DOUBLEEQUAL | BANGEQUAL) complgtexpr)*;
complgtexpr -> bitxorexpr ((LESS | GREATER | LESSEQUAL | GREATEREQUAL) bitxorexpr)*;
bitxorexpr -> bitorexpr (CARET bitorexpr)*;
bitorexpr -> bitandexpr (PIPE bitandexpr)*;
bitandexpr -> bitshiftexpr (AMPER bitshiftexpr)*;
bitshiftexpr -> additionexpr ((DOUBLEGREATER | DOUBLELESS) additionexpr)*;
additionexpr -> multexpr ((PLUS | MINUS) multexpr)*;
multexpr -> unary ((STAR | SLASH | PERCENT) unary)*;
unary -> (TILDE | MINUS) unary | primary;
primary -> TRUELIT | FALSELIT |
        FLOATLIT |
        NULLLIT |
        DECINTLIT | OCTINTLIT | BININTLIT | HEXINTLIT |
        CHARLIT | STRINGLIT |
        IDENTIFIER |
        OPARN expression CPARN;

