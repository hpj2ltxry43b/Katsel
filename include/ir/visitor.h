#pragma once

#include "ir/instruction.h"

namespace IR {
    class InstructionVisitor {
    public:
        virtual ~InstructionVisitor() {}

        // PURE INSTR VISIT START
// The following code was autogenerated - see the utils/ directory
virtual void visitStore(NNPtr<IR::Instrs::Store> i) = 0;
virtual void visitPhi(NNPtr<IR::Instrs::Phi> i) = 0;
virtual void visitRegister(NNPtr<IR::Instrs::Register> i) = 0;
virtual void visitOr(NNPtr<IR::Instrs::Or> i) = 0;
virtual void visitAnd(NNPtr<IR::Instrs::And> i) = 0;
virtual void visitNot(NNPtr<IR::Instrs::Not> i) = 0;
virtual void visitICmpNE(NNPtr<IR::Instrs::ICmpNE> i) = 0;
virtual void visitICmpEQ(NNPtr<IR::Instrs::ICmpEQ> i) = 0;
virtual void visitICmpLT(NNPtr<IR::Instrs::ICmpLT> i) = 0;
virtual void visitICmpGT(NNPtr<IR::Instrs::ICmpGT> i) = 0;
virtual void visitICmpLE(NNPtr<IR::Instrs::ICmpLE> i) = 0;
virtual void visitICmpGE(NNPtr<IR::Instrs::ICmpGE> i) = 0;
virtual void visitIAdd(NNPtr<IR::Instrs::IAdd> i) = 0;
virtual void visitISub(NNPtr<IR::Instrs::ISub> i) = 0;
virtual void visitIMult(NNPtr<IR::Instrs::IMult> i) = 0;
virtual void visitIDiv(NNPtr<IR::Instrs::IDiv> i) = 0;
virtual void visitIMod(NNPtr<IR::Instrs::IMod> i) = 0;
virtual void visitINeg(NNPtr<IR::Instrs::INeg> i) = 0;
virtual void visitFCmpNE(NNPtr<IR::Instrs::FCmpNE> i) = 0;
virtual void visitFCmpEQ(NNPtr<IR::Instrs::FCmpEQ> i) = 0;
virtual void visitFCmpLT(NNPtr<IR::Instrs::FCmpLT> i) = 0;
virtual void visitFCmpGT(NNPtr<IR::Instrs::FCmpGT> i) = 0;
virtual void visitFCmpLE(NNPtr<IR::Instrs::FCmpLE> i) = 0;
virtual void visitFCmpGE(NNPtr<IR::Instrs::FCmpGE> i) = 0;
virtual void visitFAdd(NNPtr<IR::Instrs::FAdd> i) = 0;
virtual void visitFSub(NNPtr<IR::Instrs::FSub> i) = 0;
virtual void visitFMult(NNPtr<IR::Instrs::FMult> i) = 0;
virtual void visitFDiv(NNPtr<IR::Instrs::FDiv> i) = 0;
virtual void visitFMod(NNPtr<IR::Instrs::FMod> i) = 0;
virtual void visitFNeg(NNPtr<IR::Instrs::FNeg> i) = 0;
virtual void visitBitXor(NNPtr<IR::Instrs::BitXor> i) = 0;
virtual void visitBitOr(NNPtr<IR::Instrs::BitOr> i) = 0;
virtual void visitBitAnd(NNPtr<IR::Instrs::BitAnd> i) = 0;
virtual void visitBitNot(NNPtr<IR::Instrs::BitNot> i) = 0;
virtual void visitShiftR(NNPtr<IR::Instrs::ShiftR> i) = 0;
virtual void visitShiftL(NNPtr<IR::Instrs::ShiftL> i) = 0;
virtual void visitNoOpCast(NNPtr<IR::Instrs::NoOpCast> i) = 0;
virtual void visitIntToInt(NNPtr<IR::Instrs::IntToInt> i) = 0;
virtual void visitIntToFloat(NNPtr<IR::Instrs::IntToFloat> i) = 0;
virtual void visitFloatToFloat(NNPtr<IR::Instrs::FloatToFloat> i) = 0;
virtual void visitFloatToInt(NNPtr<IR::Instrs::FloatToInt> i) = 0;
virtual void visitCall(NNPtr<IR::Instrs::Call> i) = 0;
virtual void visitAddrof(NNPtr<IR::Instrs::Addrof> i) = 0;
virtual void visitDerefPtr(NNPtr<IR::Instrs::DerefPtr> i) = 0;
virtual void visitPtrArith(NNPtr<IR::Instrs::PtrArith> i) = 0;
// This code was autogenerated - see the utils/ directory
        // PURE INSTR VISIT END
    };

    class BrVisitor {
    public:
        virtual ~BrVisitor() {}

        // PURE BRANCH VISIT START
// The following code was autogenerated - see the utils/ directory
virtual void visitReturn(NNPtr<IR::Instrs::Return> i) = 0;
virtual void visitGotoBr(NNPtr<IR::Instrs::GotoBr> i) = 0;
virtual void visitCondBr(NNPtr<IR::Instrs::CondBr> i) = 0;
// This code was autogenerated - see the utils/ directory
        // PURE BRANCH VISIT END
    };
}
