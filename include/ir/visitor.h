#pragma once

#include "ir/instructionfwd.h"

namespace IR {
    class InstructionVisitor {
    public:
        virtual ~InstructionVisitor() {}

        // PURE INSTR VISIT START
// The following code was autogenerated - see the utils/ directory
virtual void visit_store(IR::Instrs::Store &i) = 0;
virtual void visit_phi(IR::Instrs::Phi &i) = 0;
virtual void visit_register(IR::Instrs::Register &i) = 0;
virtual void visit_or(IR::Instrs::Or &i) = 0;
virtual void visit_and(IR::Instrs::And &i) = 0;
virtual void visit_not(IR::Instrs::Not &i) = 0;
virtual void visit_icmp_ne(IR::Instrs::ICmpNE &i) = 0;
virtual void visit_icmp_eq(IR::Instrs::ICmpEQ &i) = 0;
virtual void visit_icmp_lt(IR::Instrs::ICmpLT &i) = 0;
virtual void visit_icmp_gt(IR::Instrs::ICmpGT &i) = 0;
virtual void visit_icmp_le(IR::Instrs::ICmpLE &i) = 0;
virtual void visit_icmp_ge(IR::Instrs::ICmpGE &i) = 0;
virtual void visit_iadd(IR::Instrs::IAdd &i) = 0;
virtual void visit_isub(IR::Instrs::ISub &i) = 0;
virtual void visit_imult(IR::Instrs::IMult &i) = 0;
virtual void visit_idiv(IR::Instrs::IDiv &i) = 0;
virtual void visit_imod(IR::Instrs::IMod &i) = 0;
virtual void visit_ineg(IR::Instrs::INeg &i) = 0;
virtual void visit_fcmp_ne(IR::Instrs::FCmpNE &i) = 0;
virtual void visit_fcmp_eq(IR::Instrs::FCmpEQ &i) = 0;
virtual void visit_fcmp_lt(IR::Instrs::FCmpLT &i) = 0;
virtual void visit_fcmp_gt(IR::Instrs::FCmpGT &i) = 0;
virtual void visit_fcmp_le(IR::Instrs::FCmpLE &i) = 0;
virtual void visit_fcmp_ge(IR::Instrs::FCmpGE &i) = 0;
virtual void visit_fadd(IR::Instrs::FAdd &i) = 0;
virtual void visit_fsub(IR::Instrs::FSub &i) = 0;
virtual void visit_fmult(IR::Instrs::FMult &i) = 0;
virtual void visit_fdiv(IR::Instrs::FDiv &i) = 0;
virtual void visit_fmod(IR::Instrs::FMod &i) = 0;
virtual void visit_fneg(IR::Instrs::FNeg &i) = 0;
virtual void visit_bit_xor(IR::Instrs::BitXor &i) = 0;
virtual void visit_bit_or(IR::Instrs::BitOr &i) = 0;
virtual void visit_bit_and(IR::Instrs::BitAnd &i) = 0;
virtual void visit_bit_not(IR::Instrs::BitNot &i) = 0;
virtual void visit_shift_r(IR::Instrs::ShiftR &i) = 0;
virtual void visit_shift_l(IR::Instrs::ShiftL &i) = 0;
virtual void visit_no_op_cast(IR::Instrs::NoOpCast &i) = 0;
virtual void visit_int_to_int(IR::Instrs::IntToInt &i) = 0;
virtual void visit_int_to_float(IR::Instrs::IntToFloat &i) = 0;
virtual void visit_float_to_float(IR::Instrs::FloatToFloat &i) = 0;
virtual void visit_float_to_int(IR::Instrs::FloatToInt &i) = 0;
virtual void visit_call(IR::Instrs::Call &i) = 0;
virtual void visit_addrof(IR::Instrs::Addrof &i) = 0;
virtual void visit_deref_ptr(IR::Instrs::DerefPtr &i) = 0;
virtual void visit_ptr_arith(IR::Instrs::PtrArith &i) = 0;
// This code was autogenerated - see the utils/ directory
        // PURE INSTR VISIT END
    };

    class BrVisitor {
    public:
        virtual ~BrVisitor() {}

        // PURE BRANCH VISIT START
// The following code was autogenerated - see the utils/ directory
virtual void visit_return(IR::Instrs::Return &i) = 0;
virtual void visit_goto_br(IR::Instrs::GotoBr &i) = 0;
virtual void visit_cond_br(IR::Instrs::CondBr &i) = 0;
// This code was autogenerated - see the utils/ directory
        // PURE BRANCH VISIT END
    };
}
