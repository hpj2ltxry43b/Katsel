#pragma once

#include "ir/instruction.h"

namespace IR
{
    class InstructionVisitor
    {
    public:
        virtual ~InstructionVisitor() {}

        // PURE INSTR VISIT START

// The following code was autogenerated - see the utils/ directory
virtual void visitStore(IR::Instrs::Store *i) = 0;
virtual void visitPhi(IR::Instrs::Phi *i) = 0;
virtual void visitOr(IR::Instrs::Or *i) = 0;
virtual void visitAnd(IR::Instrs::And *i) = 0;
virtual void visitShortOr(IR::Instrs::ShortOr *i) = 0;
virtual void visitShortAnd(IR::Instrs::ShortAnd *i) = 0;
virtual void visitNot(IR::Instrs::Not *i) = 0;
virtual void visitICmpNE(IR::Instrs::ICmpNE *i) = 0;
virtual void visitICmpEQ(IR::Instrs::ICmpEQ *i) = 0;
virtual void visitICmpLT(IR::Instrs::ICmpLT *i) = 0;
virtual void visitICmpGT(IR::Instrs::ICmpGT *i) = 0;
virtual void visitICmpLE(IR::Instrs::ICmpLE *i) = 0;
virtual void visitICmpGE(IR::Instrs::ICmpGE *i) = 0;
virtual void visitIAdd(IR::Instrs::IAdd *i) = 0;
virtual void visitISub(IR::Instrs::ISub *i) = 0;
virtual void visitIMult(IR::Instrs::IMult *i) = 0;
virtual void visitIDiv(IR::Instrs::IDiv *i) = 0;
virtual void visitIMod(IR::Instrs::IMod *i) = 0;
virtual void visitINeg(IR::Instrs::INeg *i) = 0;
virtual void visitFCmpNE(IR::Instrs::FCmpNE *i) = 0;
virtual void visitFCmpEQ(IR::Instrs::FCmpEQ *i) = 0;
virtual void visitFCmpLT(IR::Instrs::FCmpLT *i) = 0;
virtual void visitFCmpGT(IR::Instrs::FCmpGT *i) = 0;
virtual void visitFCmpLE(IR::Instrs::FCmpLE *i) = 0;
virtual void visitFCmpGE(IR::Instrs::FCmpGE *i) = 0;
virtual void visitFAdd(IR::Instrs::FAdd *i) = 0;
virtual void visitFSub(IR::Instrs::FSub *i) = 0;
virtual void visitFMult(IR::Instrs::FMult *i) = 0;
virtual void visitFDiv(IR::Instrs::FDiv *i) = 0;
virtual void visitFMod(IR::Instrs::FMod *i) = 0;
virtual void visitFNeg(IR::Instrs::FNeg *i) = 0;
virtual void visitBitXor(IR::Instrs::BitXor *i) = 0;
virtual void visitBitOr(IR::Instrs::BitOr *i) = 0;
virtual void visitBitAnd(IR::Instrs::BitAnd *i) = 0;
virtual void visitBitNot(IR::Instrs::BitNot *i) = 0;
virtual void visitShiftR(IR::Instrs::ShiftR *i) = 0;
virtual void visitShiftL(IR::Instrs::ShiftL *i) = 0;
virtual void visitNoOpCast(IR::Instrs::NoOpCast *i) = 0;
virtual void visitIntToInt(IR::Instrs::IntToInt *i) = 0;
virtual void visitIntToFloat(IR::Instrs::IntToFloat *i) = 0;
virtual void visitFloatToFloat(IR::Instrs::FloatToFloat *i) = 0;
virtual void visitFloatToInt(IR::Instrs::FloatToInt *i) = 0;
virtual void visitReturn(IR::Instrs::Return *i) = 0;
virtual void visitCall(IR::Instrs::Call *i) = 0;
// This code was autogenerated - see the utils/ directory

        // PURE INSTR VISIT END
    };

    class BrVisitor
    {
    public:
        virtual ~BrVisitor() {}

        // PURE BRANCH VISIT START

// The following code was autogenerated - see the utils/ directory
virtual void visitGotoBr(IR::Instrs::GotoBr *i) = 0;
virtual void visitCondBr(IR::Instrs::CondBr *i) = 0;
// This code was autogenerated - see the utils/ directory

        // PURE BRANCH VISIT END
    };
}
