#pragma once

#include <ostream>
#include <vector>

namespace IR
{
    class Register;
    class Function;
    class Value;

    class Block;
    class Type;

    class InstructionVisitor;
    class BrVisitor;

    namespace Instrs
    {
        class Instruction
        {
        public:
            virtual ~Instruction() {};
            virtual void accept(InstructionVisitor *v) = 0;
        };

        class Br
        {
        public:
            virtual ~Br() {};
            virtual void accept(BrVisitor *v) = 0;
        };

        // INSTR CLASSES START

// The following code was autogenerated - see the utils/ directory
    class Store : public Instruction
    {
    public:
        Store(Register *target, Value *value);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *value;
    };
    class Or : public Instruction
    {
    public:
        Or(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class And : public Instruction
    {
    public:
        And(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class CmpNE : public Instruction
    {
    public:
        CmpNE(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class CmpEQ : public Instruction
    {
    public:
        CmpEQ(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class CmpLT : public Instruction
    {
    public:
        CmpLT(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class CmpGT : public Instruction
    {
    public:
        CmpGT(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class CmpLE : public Instruction
    {
    public:
        CmpLE(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class CmpGE : public Instruction
    {
    public:
        CmpGE(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class BitXor : public Instruction
    {
    public:
        BitXor(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class BitOr : public Instruction
    {
    public:
        BitOr(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class BitAnd : public Instruction
    {
    public:
        BitAnd(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class BitNot : public Instruction
    {
    public:
        BitNot(Register *target, Value *op);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *op;
    };
    class ShiftR : public Instruction
    {
    public:
        ShiftR(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class ShiftL : public Instruction
    {
    public:
        ShiftL(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class Add : public Instruction
    {
    public:
        Add(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class Sub : public Instruction
    {
    public:
        Sub(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class Mult : public Instruction
    {
    public:
        Mult(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class Div : public Instruction
    {
    public:
        Div(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class Mod : public Instruction
    {
    public:
        Mod(Register *target, Value *lhs, Value *rhs);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *lhs;
        Value *rhs;
    };
    class Neg : public Instruction
    {
    public:
        Neg(Register *target, Value *op);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *op;
    };
    class Trunc : public Instruction
    {
    public:
        Trunc(Register *target, Value *op, Type *newt);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *op;
        Type *newt;
    };
    class Ext : public Instruction
    {
    public:
        Ext(Register *target, Value *op, Type *newt);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *op;
        Type *newt;
    };
    class IntToFloat : public Instruction
    {
    public:
        IntToFloat(Register *target, Value *op, Type *newt);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *op;
        Type *newt;
    };
    class FloatToInt : public Instruction
    {
    public:
        FloatToInt(Register *target, Value *op, Type *newt);
        void accept(InstructionVisitor *v) override;
        Register *target;
        Value *op;
        Type *newt;
    };
    class Return : public Instruction
    {
    public:
        Return(Value *value);
        void accept(InstructionVisitor *v) override;
        Value *value;
    };
    class Call : public Instruction
    {
    public:
        Call(Register *reg, Function *f, std::vector<Value*> args);
        void accept(InstructionVisitor *v) override;
        Register *reg;
        Function *f;
        std::vector<Value*> args;
    };
    class GotoBr : public Br
    {
    public:
        GotoBr(Block *to);
        void accept(BrVisitor *v) override;
        Block *to;
    };
    class CondBr : public Br
    {
    public:
        CondBr(Value *v, Block *trueB, Block *falseB);
        void accept(BrVisitor *v) override;
        Value *v;
        Block *trueB;
        Block *falseB;
    };
// This code was autogenerated - see the utils/ directory

        // INSTR CLASSES END
    }
}
