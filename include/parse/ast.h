#pragma once

#include <memory>
#include <vector>
#include "lex/token.h"
#include "visit/visitor.h"

namespace ASTNS
{
// ASTHEADER START

// The following code was autogenerated - see the utils/ directory
    class AST;
    class Add;
    class Mult;
    class New_expr;
    class New_stmt;
    class Primary;
    class Unary;
    class AST
    {
    public:
        virtual ~AST() {}
        virtual void accept(ASTVisitor *v) = 0;
    };
    class Add : public AST
    {
    public:
        Add(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Mult : public AST
    {
    public:
        Mult(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class New_expr : public AST
    {
    public:
        New_expr(std::unique_ptr<AST> expr);
        enum class Form
        {
            A,
        };
        std::unique_ptr<AST> expr;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class New_stmt : public AST
    {
    public:
        New_stmt(std::unique_ptr<AST> expr);
        enum class Form
        {
            A,
        };
        std::unique_ptr<AST> expr;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Primary : public AST
    {
    public:
        Primary(Token value);
        Primary(Token oparn, std::unique_ptr<AST> expr, Token cparn);
        enum class Form
        {
            T,
            TAT,
        };
        Token value;
        Token oparn;
        std::unique_ptr<AST> expr;
        Token cparn;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Unary : public AST
    {
    public:
        Unary(Token op, std::unique_ptr<AST> operand);
        enum class Form
        {
            TA,
        };
        Token op;
        std::unique_ptr<AST> operand;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
// This code was autogenerated - see the utils/ directory

// ASTHEADER END
}
