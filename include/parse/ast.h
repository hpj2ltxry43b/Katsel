#pragma once

#include <memory>
#include <vector>
#include "lex/token.h"
#include "visit/visitor.h"

namespace ASTNS
{
// ASTHEADER START

// The following code was autogenerated - see the utils/ directory
    class AST;
    class AdditionExpr;
    class Args;
    class AssignmentExpr;
    class BinandExpr;
    class BinnotExpr;
    class BinorExpr;
    class BitandExpr;
    class BitorExpr;
    class BitshiftExpr;
    class BitxorExpr;
    class Block;
    class CallExpr;
    class CompeqExpr;
    class ComplgtExpr;
    class Decl;
    class Decls;
    class EmptyStmt;
    class ExprStmt;
    class Expression;
    class Function;
    class MultExpr;
    class ParamList;
    class PrimaryExpr;
    class RetStmt;
    class Stmt;
    class Stmts;
    class TernaryExpr;
    class Type;
    class UnaryExpr;
    class VarStmt;
    class VarStmtItem;
    class VarStmtItems;
    class AST
    {
    public:
        virtual ~AST() {}
        virtual void accept(ASTVisitor *v) = 0;
    };
    class AdditionExpr : public AST
    {
    public:
        AdditionExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Args : public AST
    {
    public:
        Args(std::unique_ptr<AST> args, Token comma, std::unique_ptr<AST> expr);
        Args(std::unique_ptr<AST> expr);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<AST> args;
        Token comma;
        std::unique_ptr<AST> expr;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class AssignmentExpr : public AST
    {
    public:
        AssignmentExpr(std::unique_ptr<AST> target, Token equal, std::unique_ptr<AST> value);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> target;
        Token equal;
        std::unique_ptr<AST> value;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class BinandExpr : public AST
    {
    public:
        BinandExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class BinnotExpr : public AST
    {
    public:
        BinnotExpr(Token op, std::unique_ptr<AST> operand);
        enum class Form
        {
            TA,
        };
        Token op;
        std::unique_ptr<AST> operand;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class BinorExpr : public AST
    {
    public:
        BinorExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class BitandExpr : public AST
    {
    public:
        BitandExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class BitorExpr : public AST
    {
    public:
        BitorExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class BitshiftExpr : public AST
    {
    public:
        BitshiftExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class BitxorExpr : public AST
    {
    public:
        BitxorExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Block : public AST
    {
    public:
        Block(Token ocurb, std::unique_ptr<AST> stmts, Token ccurb);
        Block(Token ocurb, Token ccurb);
        enum class Form
        {
            TAT,
            TT,
        };
        Token ocurb;
        std::unique_ptr<AST> stmts;
        Token ccurb;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class CallExpr : public AST
    {
    public:
        CallExpr(std::unique_ptr<AST> callee, Token oparn, std::unique_ptr<AST> args, Token cparn);
        CallExpr(std::unique_ptr<AST> callee, Token oparn, Token cparn);
        enum class Form
        {
            ATAT,
            ATT,
        };
        std::unique_ptr<AST> callee;
        Token oparn;
        std::unique_ptr<AST> args;
        Token cparn;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class CompeqExpr : public AST
    {
    public:
        CompeqExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class ComplgtExpr : public AST
    {
    public:
        ComplgtExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Decl : public AST
    {
    public:
        enum class Form
        {
        };
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Decls : public AST
    {
    public:
        Decls(std::unique_ptr<AST> decls, std::unique_ptr<AST> decl);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<AST> decls;
        std::unique_ptr<AST> decl;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class EmptyStmt : public AST
    {
    public:
        EmptyStmt(Token semi);
        enum class Form
        {
            T,
        };
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class ExprStmt : public AST
    {
    public:
        ExprStmt(std::unique_ptr<AST> expr, Token semi);
        enum class Form
        {
            AT,
        };
        std::unique_ptr<AST> expr;
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Expression : public AST
    {
    public:
        enum class Form
        {
        };
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Function : public AST
    {
    public:
        Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, Token cparn, std::unique_ptr<AST> body);
        Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, std::unique_ptr<AST> paramlist, Token cparn, std::unique_ptr<AST> body);
        enum class Form
        {
            TATTTA,
            TATTATA,
        };
        Token fun;
        std::unique_ptr<AST> retty;
        Token name;
        Token oparn;
        Token cparn;
        std::unique_ptr<AST> body;
        std::unique_ptr<AST> paramlist;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class MultExpr : public AST
    {
    public:
        MultExpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class ParamList : public AST
    {
    public:
        ParamList(std::unique_ptr<AST> plist, Token comma, std::unique_ptr<AST> type, Token name);
        ParamList(std::unique_ptr<AST> type, Token name);
        enum class Form
        {
            ATAT,
            AT,
        };
        std::unique_ptr<AST> plist;
        Token comma;
        std::unique_ptr<AST> type;
        Token name;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class PrimaryExpr : public AST
    {
    public:
        PrimaryExpr(Token value);
        PrimaryExpr(Token oparn, std::unique_ptr<AST> expr, Token cparn);
        enum class Form
        {
            T,
            TAT,
        };
        Token value;
        Token oparn;
        std::unique_ptr<AST> expr;
        Token cparn;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class RetStmt : public AST
    {
    public:
        RetStmt(Token ret, std::unique_ptr<AST> expr, Token semi);
        enum class Form
        {
            TAT,
        };
        Token ret;
        std::unique_ptr<AST> expr;
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Stmt : public AST
    {
    public:
        enum class Form
        {
        };
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Stmts : public AST
    {
    public:
        Stmts(std::unique_ptr<AST> stmts, std::unique_ptr<AST> stmt);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<AST> stmts;
        std::unique_ptr<AST> stmt;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class TernaryExpr : public AST
    {
    public:
        TernaryExpr(std::unique_ptr<AST> cond, Token quest, std::unique_ptr<AST> trues, Token colon, std::unique_ptr<AST> falses);
        enum class Form
        {
            ATATA,
        };
        std::unique_ptr<AST> cond;
        Token quest;
        std::unique_ptr<AST> trues;
        Token colon;
        std::unique_ptr<AST> falses;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Type : public AST
    {
    public:
        Type(Token type);
        enum class Form
        {
            T,
        };
        Token type;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class UnaryExpr : public AST
    {
    public:
        UnaryExpr(Token op, std::unique_ptr<AST> operand);
        enum class Form
        {
            TA,
        };
        Token op;
        std::unique_ptr<AST> operand;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class VarStmt : public AST
    {
    public:
        VarStmt(Token var, std::unique_ptr<AST> type, std::unique_ptr<AST> assignments, Token semi);
        enum class Form
        {
            TAAT,
        };
        Token var;
        std::unique_ptr<AST> type;
        std::unique_ptr<AST> assignments;
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class VarStmtItem : public AST
    {
    public:
        VarStmtItem(Token name, Token equal, std::unique_ptr<AST> expr);
        VarStmtItem(Token name);
        enum class Form
        {
            TTA,
            T,
        };
        Token name;
        Token equal;
        std::unique_ptr<AST> expr;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class VarStmtItems : public AST
    {
    public:
        VarStmtItems(std::unique_ptr<AST> items, Token comma, std::unique_ptr<AST> item);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<AST> items;
        Token comma;
        std::unique_ptr<AST> item;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
// This code was autogenerated - see the utils/ directory

// ASTHEADER END
}
