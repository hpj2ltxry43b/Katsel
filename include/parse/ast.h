#pragma once

#include <memory>
#include <vector>
#include "lex/token.h"
#include "visit/visitor.h"

namespace ASTNS
{
// ASTHEADER START

// The following code was autogenerated - see the utils/ directory
    class AST;
    class Additionexpr;
    class Args;
    class Assignmentexpr;
    class Binandexpr;
    class Binnotexpr;
    class Binorexpr;
    class Bitandexpr;
    class Bitorexpr;
    class Bitshiftexpr;
    class Bitxorexpr;
    class Block;
    class Callexpr;
    class Compeqexpr;
    class Complgtexpr;
    class Decl;
    class Decls;
    class Emptystmt;
    class Expression;
    class Exprstmt;
    class Function;
    class Multexpr;
    class Paramlist;
    class Primaryexpr;
    class Retstmt;
    class Stmt;
    class Stmts;
    class Ternaryexpr;
    class Type;
    class Unaryexpr;
    class Varstmt;
    class Varstmtitem;
    class Varstmtitems;
    class AST
    {
    public:
        virtual ~AST() {}
        virtual void accept(ASTVisitor *v) = 0;
    };
    class Additionexpr : public AST
    {
    public:
        Additionexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Args : public AST
    {
    public:
        Args(std::unique_ptr<AST> args, Token comma, std::unique_ptr<AST> expr);
        Args(std::unique_ptr<AST> expr);
        enum class Form
        {
            ARGS_COMMA_EXPR,
            EXPR,
        };
        std::unique_ptr<AST> args;
        Token comma;
        std::unique_ptr<AST> expr;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Assignmentexpr : public AST
    {
    public:
        Assignmentexpr(std::unique_ptr<AST> target, Token equal, std::unique_ptr<AST> value);
        enum class Form
        {
            TARGET_EQUAL_VALUE,
        };
        std::unique_ptr<AST> target;
        Token equal;
        std::unique_ptr<AST> value;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Binandexpr : public AST
    {
    public:
        Binandexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Binnotexpr : public AST
    {
    public:
        Binnotexpr(Token op, std::unique_ptr<AST> operand);
        enum class Form
        {
            OP_OPERAND,
        };
        Token op;
        std::unique_ptr<AST> operand;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Binorexpr : public AST
    {
    public:
        Binorexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Bitandexpr : public AST
    {
    public:
        Bitandexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Bitorexpr : public AST
    {
    public:
        Bitorexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Bitshiftexpr : public AST
    {
    public:
        Bitshiftexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Bitxorexpr : public AST
    {
    public:
        Bitxorexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Block : public AST
    {
    public:
        Block(Token ocurb, std::unique_ptr<AST> stmts, Token ccurb);
        enum class Form
        {
            OCURB_STMTS_CCURB,
        };
        Token ocurb;
        std::unique_ptr<AST> stmts;
        Token ccurb;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Callexpr : public AST
    {
    public:
        Callexpr(std::unique_ptr<AST> callee, Token oparn, std::unique_ptr<AST> args, Token cparn);
        Callexpr(std::unique_ptr<AST> callee, Token oparn, Token cparn);
        enum class Form
        {
            CALLEE_OPARN_ARGS_CPARN,
            CALLEE_OPARN_CPARN,
        };
        std::unique_ptr<AST> callee;
        Token oparn;
        std::unique_ptr<AST> args;
        Token cparn;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Compeqexpr : public AST
    {
    public:
        Compeqexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Complgtexpr : public AST
    {
    public:
        Complgtexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Decl : public AST
    {
    public:
        enum class Form
        {
        };
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Decls : public AST
    {
    public:
        Decls(std::unique_ptr<AST> decls, std::unique_ptr<AST> decl);
        Decls(std::unique_ptr<AST> decl);
        enum class Form
        {
            DECLS_DECL,
            DECL,
        };
        std::unique_ptr<AST> decls;
        std::unique_ptr<AST> decl;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Emptystmt : public AST
    {
    public:
        Emptystmt(Token semi);
        enum class Form
        {
            SEMI,
        };
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Expression : public AST
    {
    public:
        enum class Form
        {
        };
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Exprstmt : public AST
    {
    public:
        Exprstmt(std::unique_ptr<AST> expr, Token semi);
        enum class Form
        {
            EXPR_SEMI,
        };
        std::unique_ptr<AST> expr;
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Function : public AST
    {
    public:
        Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, Token cparn, std::unique_ptr<AST> body);
        Function(Token fun, std::unique_ptr<AST> retty, Token name, Token oparn, std::unique_ptr<AST> paramlist, Token cparn, std::unique_ptr<AST> body);
        enum class Form
        {
            FUN_RETTY_NAME_OPARN_CPARN_BODY,
            FUN_RETTY_NAME_OPARN_PARAMLIST_CPARN_BODY,
        };
        Token fun;
        std::unique_ptr<AST> retty;
        Token name;
        Token oparn;
        Token cparn;
        std::unique_ptr<AST> body;
        std::unique_ptr<AST> paramlist;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Multexpr : public AST
    {
    public:
        Multexpr(std::unique_ptr<AST> lhs, Token op, std::unique_ptr<AST> rhs);
        enum class Form
        {
            LHS_OP_RHS,
        };
        std::unique_ptr<AST> lhs;
        Token op;
        std::unique_ptr<AST> rhs;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Paramlist : public AST
    {
    public:
        Paramlist(std::unique_ptr<AST> plist, Token comma, std::unique_ptr<AST> type, Token name);
        Paramlist(std::unique_ptr<AST> type, Token name);
        enum class Form
        {
            PLIST_COMMA_TYPE_NAME,
            TYPE_NAME,
        };
        std::unique_ptr<AST> plist;
        Token comma;
        std::unique_ptr<AST> type;
        Token name;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Primaryexpr : public AST
    {
    public:
        Primaryexpr(Token value);
        Primaryexpr(Token oparn, std::unique_ptr<AST> expr, Token cparn);
        enum class Form
        {
            VALUE,
            OPARN_EXPR_CPARN,
        };
        Token value;
        Token oparn;
        std::unique_ptr<AST> expr;
        Token cparn;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Retstmt : public AST
    {
    public:
        Retstmt(Token ret, std::unique_ptr<AST> expr, Token semi);
        enum class Form
        {
            RET_EXPR_SEMI,
        };
        Token ret;
        std::unique_ptr<AST> expr;
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Stmt : public AST
    {
    public:
        enum class Form
        {
        };
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Stmts : public AST
    {
    public:
        Stmts(std::unique_ptr<AST> stmts, std::unique_ptr<AST> stmt);
        enum class Form
        {
            STMTS_STMT,
        };
        std::unique_ptr<AST> stmts;
        std::unique_ptr<AST> stmt;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Ternaryexpr : public AST
    {
    public:
        Ternaryexpr(std::unique_ptr<AST> cond, Token quest, std::unique_ptr<AST> trues, Token colon, std::unique_ptr<AST> falses);
        enum class Form
        {
            COND_QUEST_TRUES_COLON_FALSES,
        };
        std::unique_ptr<AST> cond;
        Token quest;
        std::unique_ptr<AST> trues;
        Token colon;
        std::unique_ptr<AST> falses;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Type : public AST
    {
    public:
        Type(Token type);
        enum class Form
        {
            TYPE,
        };
        Token type;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Unaryexpr : public AST
    {
    public:
        Unaryexpr(Token op, std::unique_ptr<AST> operand);
        enum class Form
        {
            OP_OPERAND,
        };
        Token op;
        std::unique_ptr<AST> operand;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Varstmt : public AST
    {
    public:
        Varstmt(Token var, std::unique_ptr<AST> type, std::unique_ptr<AST> assignments, Token semi);
        enum class Form
        {
            VAR_TYPE_ASSIGNMENTS_SEMI,
        };
        Token var;
        std::unique_ptr<AST> type;
        std::unique_ptr<AST> assignments;
        Token semi;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Varstmtitem : public AST
    {
    public:
        Varstmtitem(Token name, Token equal, std::unique_ptr<AST> expr);
        Varstmtitem(Token name);
        enum class Form
        {
            NAME_EQUAL_EXPR,
            NAME,
        };
        Token name;
        Token equal;
        std::unique_ptr<AST> expr;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
    class Varstmtitems : public AST
    {
    public:
        Varstmtitems(std::unique_ptr<AST> items, std::unique_ptr<AST> item);
        Varstmtitems(std::unique_ptr<AST> item);
        enum class Form
        {
            ITEMS_ITEM,
            ITEM,
        };
        std::unique_ptr<AST> items;
        std::unique_ptr<AST> item;
        Form form;
        virtual void accept(ASTVisitor *v);
    };
// This code was autogenerated - see the utils/ directory

// ASTHEADER END
}
