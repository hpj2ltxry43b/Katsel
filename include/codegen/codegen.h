#pragma once

#include <memory>

#include "ast/ast.h"

namespace llvm { class raw_ostream; }
namespace IR { class Unit; }
struct File;

class CodeGen : public ASTNS::CUB::Visitor, public ASTNS::DeclB::Visitor
{
    class ForwDecl;

    class TypeVisitor;

    class ParamVisitor;
    class ArgVisitor;

    class FunctionCodeGen;
public:
    class Context;

    CodeGen(File const &file);
    ~CodeGen();

    void declarate(ASTNS::CUB *cub);
    void codegen(ASTNS::CUB *cub);

    void printUnit(llvm::raw_ostream &ostream);

    std::unique_ptr<IR::Unit> unit;

    std::unique_ptr<Context> context;

    std::unique_ptr<TypeVisitor> typeVisitor;

    inline bool isErrored() { return errored; }

private:
    // CG METHODS START

// The following code was autogenerated - see the utils/ directory
void visitCU(ASTNS::CU *ast) override;
void visitDeclList(ASTNS::DeclList *ast) override;
void visitFunctionDecl(ASTNS::FunctionDecl *ast) override;
// This code was autogenerated - see the utils/ directory

    // CG METHODS END

    bool errored;
};
