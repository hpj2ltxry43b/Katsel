#pragma once

#include "visit/visitor.h"
#include "parse/ast.h"

#include "value/value.h"
#include "typing/type.h"

#include "llvm/IR/Type.h"
#include "llvm/IR/Value.h"
#include "llvm/IR/IRBuilder.h"

namespace CodeGen
{
    class CodeGen;
    class TypeResolve : public _TYPEVisitor
    {
    public:
        TypeResolve(CodeGen &cg);
        // TYPEVISITOR METHODS START

// The following code was autogenerated - see the utils/ directory
void visitType(ASTNS::Type *ast) override;
// This code was autogenerated - see the utils/ directory

        // TYPEVISITOR METHODS END

    private:
        CodeGen &cg;
    };
    class Declarator : public _DECLVisitor
    {
    public:
        Declarator(CodeGen &cg);

        // DECLARATOR METHODS START

// The following code was autogenerated - see the utils/ directory
void visitDecl(ASTNS::Decl *ast) override;
void visitDecls(ASTNS::Decls *ast) override;
void visitFunction(ASTNS::Function *ast) override;
// This code was autogenerated - see the utils/ directory

        // DECLARATOR METHODS END

    private:
        CodeGen &cg;
    };

    class Context
    {
    public:
        Context(std::string const &name);

        llvm::LLVMContext context;
        llvm::IRBuilder<> builder;
        std::unique_ptr<llvm::Module> mod;
        std::map<std::string, Value> globalSymbolTable;

        std::vector<Local> locals;
        size_t curScope = 1;

        Type* getBuiltinType(BuiltinType::Builtins ty);
        Type* getFunctionType(Type *ret, std::vector<Type*> paramtys);
        Type* getVoidType();

        llvm::AllocaInst* createEntryAlloca(llvm::Function *f, llvm::Type *type, std::string const &name);
        void addLocal(std::string const &name, Type *type, llvm::AllocaInst *alloca, ASTNS::AST *ast);
        Local* findLocal(std::string const &name);
        Value findValue(std::string const &name);
        Value findGlobal(std::string const &name);

        void incScope();
        void decScope();

        Value curFunc;

    private:
        std::vector<std::unique_ptr<Type>> types;
    };

    class CodeGen
    {
    public:
        CodeGen(std::string const &name);

    private:
        Context context;

        Declarator declarator;

        TypeResolve typeVisitor;
    };
}
