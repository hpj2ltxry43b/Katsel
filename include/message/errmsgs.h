#pragma once

struct Token;
namespace IR { namespace Instrs { class Register; class DerefPtr; } class Value; class Function; class Type; struct ASTValue; class DeclSymbol; }

#include <vector>
#include <string>
#include "ast/ast.h"

// ERRH START
// The following code was autogenerated - see the utils/ directory

// === syntax error ===

// E0000 - unexpected-char
#define ERR_UNEXPECTED_CHAR E0000
void E0000(Token const &tok);

// E0001 - unterm-charlit
#define ERR_UNTERM_CHARLIT E0001
void E0001(Token const &tok);

// E0002 - unterm-strlit
#define ERR_UNTERM_STRLIT E0002
void E0002(Token const &tok);

// E0003 - invalid-intlit-base
#define ERR_INVALID_INTLIT_BASE E0003
void E0003(Token const &tok);

// E0004 - nondecimal-floatlit
#define ERR_NONDECIMAL_FLOATLIT E0004
void E0004(Token const &tok);

// E0005 - invalid-char-floatlit
#define ERR_INVALID_CHAR_FLOATLIT E0005
void E0005(Token const &tok);

// E0006 - invalid-char-for-base
#define ERR_INVALID_CHAR_FOR_BASE E0006
void E0006(Token const &tok);

// E0007 - intlit-no-digits
#define ERR_INTLIT_NO_DIGITS E0007
void E0007(Token const &tok);

// E0008 - multichar-charlit
#define ERR_MULTICHAR_CHARLIT E0008
void E0008(Token const &tok);

// E0009 - unterm-multiline-comment
#define ERR_UNTERM_MULTILINE_COMMENT E0009
void E0009(Token const &tok);

// E0010 - dedent-nomatch
#define ERR_DEDENT_NOMATCH E0010
void E0010(Token const &tok);

// E0011 - char-after-backslash
#define ERR_CHAR_AFTER_BACKSLASH E0011
void E0011(Token const &tok);

// E0012 - unrecoverable-invalid-syntax
#define ERR_UNRECOVERABLE_INVALID_SYNTAX E0012
void E0012(Token const &lookahead, Token const &lasttok, std::vector<std::string> const &expectations);

// E0013 - simple-invalid-syntax
#define ERR_SIMPLE_INVALID_SYNTAX E0013
void E0013(Token const &lookahead, Token const &lasttok, std::string const &bestfix, std::vector<std::string> const &expectations);

// E0014 - panicking-invalid-syntax
#define ERR_PANICKING_INVALID_SYNTAX E0014
void E0014(Token const &lookahead, Token const &lasttok, Token const &panicuntil, std::vector<std::string> const &expectations);

// === type error ===

// E0100 - lhs-unsupported-op
#define ERR_LHS_UNSUPPORTED_OP E0100
void E0100(IR::ASTValue const &lhs, Token const &op);

// E0101 - unary-unsupported-op
#define ERR_UNARY_UNSUPPORTED_OP E0101
void E0101(IR::ASTValue const &operand, Token const &_operator);

// E0102 - call-noncallable
#define ERR_CALL_NONCALLABLE E0102
void E0102(IR::ASTValue const &func, Token const &oparn);

// E0103 - incorrect-arg
#define ERR_INCORRECT_ARG E0103
void E0103(IR::ASTValue const &arg, IR::Type const *expected);

// E0104 - confl-tys-ifexpr
#define ERR_CONFL_TYS_IFEXPR E0104
void E0104(IR::ASTValue const &truev, IR::ASTValue const &falsev, Token const &iftok, Token const &elsetok);

// E0105 - assign-conflict-tys
#define ERR_ASSIGN_CONFLICT_TYS E0105
void E0105(IR::ASTValue const &lhs, IR::ASTValue const &rhs, Token const &eq);

// E0106 - conflict-ret-ty
#define ERR_CONFLICT_RET_TY E0106
void E0106(IR::ASTValue const &val, IR::Function *f);

// E0107 - no-deref
#define ERR_NO_DEREF E0107
void E0107(Token const &op, IR::ASTValue const &val);

// E0108 - conflict-var-init-ty
#define ERR_CONFLICT_VAR_INIT_TY E0108
void E0108(Token const &eq, Token const &name, ASTNS::Type *typeAST, IR::ASTValue const &init, IR::Type const *expectedType);

// E0109 - invalid-cast
#define ERR_INVALID_CAST E0109
void E0109(ASTNS::AST *ast, IR::ASTValue v, IR::Type const *newty);

// E0110 - conflict-tys-binary-op
#define ERR_CONFLICT_TYS_BINARY_OP E0110
void E0110(IR::ASTValue const &lhs, IR::ASTValue const &rhs, Token const &op);

// E0111 - cond-not-bool
#define ERR_COND_NOT_BOOL E0111
void E0111(IR::ASTValue &v);

// E0112 - ptr-arith-rhs-not-num
#define ERR_PTR_ARITH_RHS_NOT_NUM E0112
void E0112(IR::ASTValue const &lhs, Token const &optok, IR::ASTValue const &rhs);

// E0113 - no-else-not-void
#define ERR_NO_ELSE_NOT_VOID E0113
void E0113(IR::ASTValue const &truev, Token const &iftok);

// === name error ===

// E0200 - redecl-sym
#define ERR_REDECL_SYM E0200
void E0200(Token const &name, IR::Value *val);

// E0201 - undecl-symb
#define ERR_UNDECL_SYMB E0201
void E0201(Location const &path);

// E0202 - redecl-param
#define ERR_REDECL_PARAM E0202
void E0202(Token const &name, IR::Instrs::Register const *prev);

// E0203 - redecl-var
#define ERR_REDECL_VAR E0203
void E0203(Token const &name, IR::Instrs::Register const *prev);

// E0204 - not-a-type
#define ERR_NOT_A_TYPE E0204
void E0204(Location const &notty, ASTNS::AST *declAST);

// E0205 - no-item-in
#define ERR_NO_ITEM_IN E0205
void E0205(IR::DeclSymbol const *prev, Token const &current);

// === value error ===

// E0300 - addrof-not-lvalue
#define ERR_ADDROF_NOT_LVALUE E0300
void E0300(Token const &op, IR::ASTValue const &val);

// E0301 - assign-invalid-lhs
#define ERR_ASSIGN_INVALID_LHS E0301
void E0301(Token const &eq, IR::ASTValue const &lhs);

// E0302 - assign-not-mut
#define ERR_ASSIGN_NOT_MUT E0302
void E0302(IR::ASTValue const &v, Token const &eq, IR::Instrs::DerefPtr *targetDeref);

// E0303 - mut-addrof-nonmut-op
#define ERR_MUT_ADDROF_NONMUT_OP E0303
void E0303(Token const &op, IR::Instrs::DerefPtr *asDeref);

// === count error ===

// E0400 - wrong-num-args
#define ERR_WRONG_NUM_ARGS E0400
void E0400(IR::ASTValue const &func, Token const &oparn, std::vector<IR::ASTValue> const &args);

// === miscellaneous error ===

// E0500 - no-suppress
#define ERR_NO_SUPPRESS E0500
void E0500(Location const &dot);

// === warnings ===

// W0000 - Wextra-semi
#define WARN_EXTRA_SEMI W0000
void W0000(Token const &semi);

// This code was autogenerated - see the utils/ directory
// ERRH END
