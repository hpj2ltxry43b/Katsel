#pragma once

namespace ASTNS
{
    // ASTFORWDECL BEGIN

// The following code was autogenerated - see the utils/ directory
class AST;
class ArgB;
class CUB;
class DeclB;
class ExprB;
class PListB;
class StmtB;
class TypeB;
class VStmtIB;
class AdditionExpr;
class Arg;
class ArgList;
class ArgList_OPT;
class AssignmentExpr;
class BinandExpr;
class BinorExpr;
class BitandExpr;
class BitorExpr;
class BitshiftExpr;
class BitxorExpr;
class Block;
class BuiltinTypeNoVoid;
class CU;
class CallExpr;
class CompeqExpr;
class ComplgtExpr;
class Decl;
class DeclList;
class EmptyStmt;
class Expr;
class ExprStmt;
class Function;
class MoreArg;
class MoreDecl;
class MoreParam;
class MoreStmt;
class MoreVarStmtItem;
class MultExpr;
class Param;
class ParamList;
class ParamList_OPT;
class PrimaryExpr;
class RetStmt;
class Stmt;
class StmtList;
class TernaryExpr;
class TypeNV;
class TypeV;
class UnaryExpr;
class VarStmt;
class VarStmtItem;
class VarStmtItemList;
// This code was autogenerated - see the utils/ directory

    // ASTFORWDECL END
    // VISITCLASSES START

// The following code was autogenerated - see the utils/ directory
class ArgBVisitor
{
public:
    virtual ~ArgBVisitor() {}
    virtual void visitArg(ASTNS::Arg *ast) = 0;
    virtual void visitArgList(ASTNS::ArgList *ast) = 0;
    virtual void visitArgList_OPT(ASTNS::ArgList_OPT *ast) = 0;
    virtual void visitMoreArg(ASTNS::MoreArg *ast) = 0;
};
class CUBVisitor
{
public:
    virtual ~CUBVisitor() {}
    virtual void visitCU(ASTNS::CU *ast) = 0;
};
class DeclBVisitor
{
public:
    virtual ~DeclBVisitor() {}
    virtual void visitDeclList(ASTNS::DeclList *ast) = 0;
    virtual void visitFunction(ASTNS::Function *ast) = 0;
};
class ExprBVisitor
{
public:
    virtual ~ExprBVisitor() {}
    virtual void visitAdditionExpr(ASTNS::AdditionExpr *ast) = 0;
    virtual void visitAssignmentExpr(ASTNS::AssignmentExpr *ast) = 0;
    virtual void visitBinandExpr(ASTNS::BinandExpr *ast) = 0;
    virtual void visitBinorExpr(ASTNS::BinorExpr *ast) = 0;
    virtual void visitBitandExpr(ASTNS::BitandExpr *ast) = 0;
    virtual void visitBitorExpr(ASTNS::BitorExpr *ast) = 0;
    virtual void visitBitshiftExpr(ASTNS::BitshiftExpr *ast) = 0;
    virtual void visitBitxorExpr(ASTNS::BitxorExpr *ast) = 0;
    virtual void visitCallExpr(ASTNS::CallExpr *ast) = 0;
    virtual void visitCompeqExpr(ASTNS::CompeqExpr *ast) = 0;
    virtual void visitComplgtExpr(ASTNS::ComplgtExpr *ast) = 0;
    virtual void visitMultExpr(ASTNS::MultExpr *ast) = 0;
    virtual void visitPrimaryExpr(ASTNS::PrimaryExpr *ast) = 0;
    virtual void visitTernaryExpr(ASTNS::TernaryExpr *ast) = 0;
    virtual void visitUnaryExpr(ASTNS::UnaryExpr *ast) = 0;
};
class PListBVisitor
{
public:
    virtual ~PListBVisitor() {}
    virtual void visitMoreParam(ASTNS::MoreParam *ast) = 0;
    virtual void visitParam(ASTNS::Param *ast) = 0;
    virtual void visitParamList(ASTNS::ParamList *ast) = 0;
    virtual void visitParamList_OPT(ASTNS::ParamList_OPT *ast) = 0;
};
class StmtBVisitor
{
public:
    virtual ~StmtBVisitor() {}
    virtual void visitBlock(ASTNS::Block *ast) = 0;
    virtual void visitEmptyStmt(ASTNS::EmptyStmt *ast) = 0;
    virtual void visitExprStmt(ASTNS::ExprStmt *ast) = 0;
    virtual void visitRetStmt(ASTNS::RetStmt *ast) = 0;
    virtual void visitStmtList(ASTNS::StmtList *ast) = 0;
    virtual void visitVarStmt(ASTNS::VarStmt *ast) = 0;
};
class TypeBVisitor
{
public:
    virtual ~TypeBVisitor() {}
    virtual void visitBuiltinTypeNoVoid(ASTNS::BuiltinTypeNoVoid *ast) = 0;
    virtual void visitTypeV(ASTNS::TypeV *ast) = 0;
};
class VStmtIBVisitor
{
public:
    virtual ~VStmtIBVisitor() {}
    virtual void visitMoreVarStmtItem(ASTNS::MoreVarStmtItem *ast) = 0;
    virtual void visitVarStmtItem(ASTNS::VarStmtItem *ast) = 0;
    virtual void visitVarStmtItemList(ASTNS::VarStmtItemList *ast) = 0;
};
// This code was autogenerated - see the utils/ directory

    // VISITCLASSES END
}
