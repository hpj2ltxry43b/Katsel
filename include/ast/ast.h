#pragma once

#include <memory>
#include <vector>
#include "lex/token.h"
#include "ast/visitor.h"

namespace ASTNS
{
// ASTHEADER START

// The following code was autogenerated - see the utils/ directory
    class AST;
    class ArgB;
    class CUB;
    class DeclB;
    class ExprB;
    class PListB;
    class StmtB;
    class TypeB;
    class VStmtIB;
    class AdditionExpr;
    class Arg;
    class ArgList;
    class AssignmentExpr;
    class BinandExpr;
    class BinorExpr;
    class BitandExpr;
    class BitorExpr;
    class BitshiftExpr;
    class BitxorExpr;
    class Block;
    class BuiltinTypeNoVoid;
    class CU;
    class CallExpr;
    class CompeqExpr;
    class ComplgtExpr;
    class Decl;
    class DeclList;
    class EmptyStmt;
    class Expr;
    class ExprStmt;
    class Function;
    class MoreArg;
    class MoreDecl;
    class MoreParam;
    class MoreStmt;
    class MoreVarStmtItem;
    class MultExpr;
    class Param;
    class ParamList;
    class PrimaryExpr;
    class RetStmt;
    class Stmt;
    class StmtList;
    class TernaryExpr;
    class TypeNV;
    class TypeV;
    class UnaryExpr;
    class VarStmt;
    class VarStmtItem;
    class VarStmtItemList;
    class AST
    {
    public:
        virtual ~AST() {}
    };
    class ArgB : public AST
    {
    public:
        virtual ~ArgB() {}
        virtual void accept(ASTNS::ArgBVisitor *v) = 0;
    };
    class CUB : public AST
    {
    public:
        virtual ~CUB() {}
        virtual void accept(ASTNS::CUBVisitor *v) = 0;
    };
    class DeclB : public AST
    {
    public:
        virtual ~DeclB() {}
        virtual void accept(ASTNS::DeclBVisitor *v) = 0;
    };
    class ExprB : public AST
    {
    public:
        virtual ~ExprB() {}
        virtual void accept(ASTNS::ExprBVisitor *v) = 0;
    };
    class PListB : public AST
    {
    public:
        virtual ~PListB() {}
        virtual void accept(ASTNS::PListBVisitor *v) = 0;
    };
    class StmtB : public AST
    {
    public:
        virtual ~StmtB() {}
        virtual void accept(ASTNS::StmtBVisitor *v) = 0;
    };
    class TypeB : public AST
    {
    public:
        virtual ~TypeB() {}
        virtual void accept(ASTNS::TypeBVisitor *v) = 0;
    };
    class VStmtIB : public AST
    {
    public:
        virtual ~VStmtIB() {}
        virtual void accept(ASTNS::VStmtIBVisitor *v) = 0;
    };
    class AdditionExpr : public ExprB
    {
    public:
        AdditionExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class Arg : public ArgB
    {
    public:
        Arg(std::unique_ptr<ExprB> expr);
        enum class Form
        {
            A,
        };
        std::unique_ptr<ExprB> expr;
        Form form;
        virtual void accept(ASTNS::ArgBVisitor *v);
    };
    class ArgList : public ArgB
    {
    public:
        ArgList(std::unique_ptr<ArgB> arg, std::unique_ptr<ArgB> morearg);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<ArgB> arg;
        std::unique_ptr<ArgB> morearg;
        Form form;
        virtual void accept(ASTNS::ArgBVisitor *v);
    };
    class AssignmentExpr : public ExprB
    {
    public:
        AssignmentExpr(std::unique_ptr<ExprB> target, Token equal, std::unique_ptr<ExprB> value);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> target;
        Token equal;
        std::unique_ptr<ExprB> value;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class BinandExpr : public ExprB
    {
    public:
        BinandExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class BinorExpr : public ExprB
    {
    public:
        BinorExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class BitandExpr : public ExprB
    {
    public:
        BitandExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class BitorExpr : public ExprB
    {
    public:
        BitorExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class BitshiftExpr : public ExprB
    {
    public:
        BitshiftExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class BitxorExpr : public ExprB
    {
    public:
        BitxorExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class Block : public StmtB
    {
    public:
        Block(Token ocurb, std::unique_ptr<StmtB> stmts, Token ccurb);
        Block(Token ocurb, Token ccurb);
        enum class Form
        {
            TAT,
            TT,
        };
        Token ocurb;
        std::unique_ptr<StmtB> stmts;
        Token ccurb;
        Form form;
        virtual void accept(ASTNS::StmtBVisitor *v);
    };
    class BuiltinTypeNoVoid : public TypeB
    {
    public:
        BuiltinTypeNoVoid(Token type);
        enum class Form
        {
            T,
        };
        Token type;
        Form form;
        virtual void accept(ASTNS::TypeBVisitor *v);
    };
    class CU : public CUB
    {
    public:
        CU(std::unique_ptr<DeclB> dl);
        CU();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<DeclB> dl;
        Form form;
        virtual void accept(ASTNS::CUBVisitor *v);
    };
    class CallExpr : public ExprB
    {
    public:
        CallExpr(std::unique_ptr<ExprB> callee, Token oparn, std::unique_ptr<ArgB> args, Token cparn);
        CallExpr(std::unique_ptr<ExprB> callee, Token oparn, Token cparn);
        enum class Form
        {
            ATAT,
            ATT,
        };
        std::unique_ptr<ExprB> callee;
        Token oparn;
        std::unique_ptr<ArgB> args;
        Token cparn;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class CompeqExpr : public ExprB
    {
    public:
        CompeqExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class ComplgtExpr : public ExprB
    {
    public:
        ComplgtExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class Decl : public DeclB
    {
    public:
        enum class Form
        {
        };
        Form form;
    };
    class DeclList : public DeclB
    {
    public:
        DeclList(std::unique_ptr<DeclB> decl, std::unique_ptr<DeclB> moredecl);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<DeclB> decl;
        std::unique_ptr<DeclB> moredecl;
        Form form;
        virtual void accept(ASTNS::DeclBVisitor *v);
    };
    class EmptyStmt : public StmtB
    {
    public:
        EmptyStmt(Token semi);
        enum class Form
        {
            T,
        };
        Token semi;
        Form form;
        virtual void accept(ASTNS::StmtBVisitor *v);
    };
    class Expr : public ExprB
    {
    public:
        enum class Form
        {
        };
        Form form;
    };
    class ExprStmt : public StmtB
    {
    public:
        ExprStmt(std::unique_ptr<ExprB> expr, Token semi);
        enum class Form
        {
            AT,
        };
        std::unique_ptr<ExprB> expr;
        Token semi;
        Form form;
        virtual void accept(ASTNS::StmtBVisitor *v);
    };
    class Function : public DeclB
    {
    public:
        Function(Token fun, std::unique_ptr<TypeB> retty, Token name, Token oparn, Token cparn, std::unique_ptr<StmtB> body);
        Function(Token fun, std::unique_ptr<TypeB> retty, Token name, Token oparn, std::unique_ptr<PListB> paramlist, Token cparn, std::unique_ptr<StmtB> body);
        enum class Form
        {
            TATTTA,
            TATTATA,
        };
        Token fun;
        std::unique_ptr<TypeB> retty;
        Token name;
        Token oparn;
        Token cparn;
        std::unique_ptr<StmtB> body;
        std::unique_ptr<PListB> paramlist;
        Form form;
        virtual void accept(ASTNS::DeclBVisitor *v);
    };
    class MoreArg : public ArgB
    {
    public:
        MoreArg(Token comma, std::unique_ptr<ArgB> arglist);
        enum class Form
        {
            TA,
        };
        Token comma;
        std::unique_ptr<ArgB> arglist;
        Form form;
        virtual void accept(ASTNS::ArgBVisitor *v);
    };
    class MoreDecl : public DeclB
    {
    public:
        enum class Form
        {
        };
        Form form;
    };
    class MoreParam : public PListB
    {
    public:
        MoreParam(Token comma, std::unique_ptr<PListB> paramlist);
        enum class Form
        {
            TA,
        };
        Token comma;
        std::unique_ptr<PListB> paramlist;
        Form form;
        virtual void accept(ASTNS::PListBVisitor *v);
    };
    class MoreStmt : public StmtB
    {
    public:
        enum class Form
        {
        };
        Form form;
    };
    class MoreVarStmtItem : public VStmtIB
    {
    public:
        MoreVarStmtItem(Token comma, std::unique_ptr<VStmtIB> varstmtitemlist);
        enum class Form
        {
            TA,
        };
        Token comma;
        std::unique_ptr<VStmtIB> varstmtitemlist;
        Form form;
        virtual void accept(ASTNS::VStmtIBVisitor *v);
    };
    class MultExpr : public ExprB
    {
    public:
        MultExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        enum class Form
        {
            ATA,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class Param : public PListB
    {
    public:
        Param(std::unique_ptr<TypeB> type, Token name);
        enum class Form
        {
            AT,
        };
        std::unique_ptr<TypeB> type;
        Token name;
        Form form;
        virtual void accept(ASTNS::PListBVisitor *v);
    };
    class ParamList : public PListB
    {
    public:
        ParamList(std::unique_ptr<PListB> param, std::unique_ptr<PListB> moreparam);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<PListB> param;
        std::unique_ptr<PListB> moreparam;
        Form form;
        virtual void accept(ASTNS::PListBVisitor *v);
    };
    class PrimaryExpr : public ExprB
    {
    public:
        PrimaryExpr(Token value);
        PrimaryExpr(Token oparn, std::unique_ptr<ExprB> expr, Token cparn);
        enum class Form
        {
            T,
            TAT,
        };
        Token value;
        Token oparn;
        std::unique_ptr<ExprB> expr;
        Token cparn;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class RetStmt : public StmtB
    {
    public:
        RetStmt(Token ret, std::unique_ptr<ExprB> expr, Token semi);
        RetStmt(Token ret, Token semi);
        enum class Form
        {
            TAT,
            TT,
        };
        Token ret;
        std::unique_ptr<ExprB> expr;
        Token semi;
        Form form;
        virtual void accept(ASTNS::StmtBVisitor *v);
    };
    class Stmt : public StmtB
    {
    public:
        enum class Form
        {
        };
        Form form;
    };
    class StmtList : public StmtB
    {
    public:
        StmtList(std::unique_ptr<StmtB> stmt, std::unique_ptr<StmtB> morestmt);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<StmtB> stmt;
        std::unique_ptr<StmtB> morestmt;
        Form form;
        virtual void accept(ASTNS::StmtBVisitor *v);
    };
    class TernaryExpr : public ExprB
    {
    public:
        TernaryExpr(std::unique_ptr<ExprB> cond, Token quest, std::unique_ptr<ExprB> trues, Token colon, std::unique_ptr<ExprB> falses);
        enum class Form
        {
            ATATA,
        };
        std::unique_ptr<ExprB> cond;
        Token quest;
        std::unique_ptr<ExprB> trues;
        Token colon;
        std::unique_ptr<ExprB> falses;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class TypeNV : public TypeB
    {
    public:
        enum class Form
        {
        };
        Form form;
    };
    class TypeV : public TypeB
    {
    public:
        TypeV(Token vo);
        enum class Form
        {
            T,
        };
        Token vo;
        Form form;
        virtual void accept(ASTNS::TypeBVisitor *v);
    };
    class UnaryExpr : public ExprB
    {
    public:
        UnaryExpr(Token op, std::unique_ptr<ExprB> operand);
        enum class Form
        {
            TA,
        };
        Token op;
        std::unique_ptr<ExprB> operand;
        Form form;
        virtual void accept(ASTNS::ExprBVisitor *v);
    };
    class VarStmt : public StmtB
    {
    public:
        VarStmt(Token var, std::unique_ptr<TypeB> type, std::unique_ptr<VStmtIB> assignments, Token semi);
        enum class Form
        {
            TAAT,
        };
        Token var;
        std::unique_ptr<TypeB> type;
        std::unique_ptr<VStmtIB> assignments;
        Token semi;
        Form form;
        virtual void accept(ASTNS::StmtBVisitor *v);
    };
    class VarStmtItem : public VStmtIB
    {
    public:
        VarStmtItem(Token name, Token equal, std::unique_ptr<ExprB> expr);
        VarStmtItem(Token name);
        enum class Form
        {
            TTA,
            T,
        };
        Token name;
        Token equal;
        std::unique_ptr<ExprB> expr;
        Form form;
        virtual void accept(ASTNS::VStmtIBVisitor *v);
    };
    class VarStmtItemList : public VStmtIB
    {
    public:
        VarStmtItemList(std::unique_ptr<VStmtIB> varstmtitem, std::unique_ptr<VStmtIB> morevarstmtitem);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<VStmtIB> varstmtitem;
        std::unique_ptr<VStmtIB> morevarstmtitem;
        Form form;
        virtual void accept(ASTNS::VStmtIBVisitor *v);
    };
// This code was autogenerated - see the utils/ directory

// ASTHEADER END
}
