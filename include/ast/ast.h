#pragma once

#include <memory>
#include <vector>
#include "lex/token.h"

namespace ASTNS
{
// ASTHEADER START
// The following code was autogenerated - see the utils/ directory
    class AST;
    class ArgB;
    class CUB;
    class DeclB;
    class ExprB;
    class LineEndingB;
    class PListB;
    class StmtB;
    class TypeB;
    class VStmtIB;
    class AdditionExpr;
    class AnotherArg;
    class AnotherDecl;
    class AnotherParam;
    class AnotherStmt;
    class AnotherVarStmtItem;
    class Arg;
    class ArgList;
    class ArgList_OPT;
    class ArgSegment;
    class AssignmentExpr;
    class BinAndExpr;
    class BinOrExpr;
    class BitAndExpr;
    class BitOrExpr;
    class BitShiftExpr;
    class BitXorExpr;
    class Block;
    class BlockedExpr;
    class BracedBlock;
    class BuiltinType;
    class CU;
    class CallExpr;
    class CastExpr;
    class CompEQExpr;
    class CompLGTExpr;
    class Decl;
    class DeclList;
    class Expr;
    class ExprStmt;
    class Expr_OPT;
    class ForExpr;
    class FunctionDecl;
    class IfExpr;
    class ImplRet;
    class ImplRet_OPT;
    class IndentedBlock;
    class LineEnding;
    class LineEnding_OPT;
    class MultExpr;
    class NotBlockedExpr;
    class Param;
    class ParamList;
    class ParamList_OPT;
    class ParamSegment;
    class PrimaryExpr;
    class RetStmt;
    class Stmt;
    class StmtList;
    class StmtList_OPT;
    class Type;
    class UnaryExpr;
    class VarStmt;
    class VarStmtItem;
    class VarStmtItemList;
    class VarStmtItemSegment;
    class VarStmt_OPT;
    class AST
    {
    public:
        virtual ~AST() {}
    };
    class ArgB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitAnotherArg(ASTNS::AnotherArg *ast) = 0;
            virtual void visitArg(ASTNS::Arg *ast) = 0;
            virtual void visitArgList(ASTNS::ArgList *ast) = 0;
            virtual void visitArgList_OPT(ASTNS::ArgList_OPT *ast) = 0;
            virtual void visitArgSegment(ASTNS::ArgSegment *ast) = 0;
        };
        virtual ~ArgB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class CUB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitCU(ASTNS::CU *ast) = 0;
        };
        virtual ~CUB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class DeclB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitAnotherDecl(ASTNS::AnotherDecl *ast) = 0;
            virtual void visitDecl(ASTNS::Decl *ast) = 0;
            virtual void visitDeclList(ASTNS::DeclList *ast) = 0;
            virtual void visitFunctionDecl(ASTNS::FunctionDecl *ast) = 0;
        };
        virtual ~DeclB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class ExprB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitAdditionExpr(ASTNS::AdditionExpr *ast) = 0;
            virtual void visitAssignmentExpr(ASTNS::AssignmentExpr *ast) = 0;
            virtual void visitBinAndExpr(ASTNS::BinAndExpr *ast) = 0;
            virtual void visitBinOrExpr(ASTNS::BinOrExpr *ast) = 0;
            virtual void visitBitAndExpr(ASTNS::BitAndExpr *ast) = 0;
            virtual void visitBitOrExpr(ASTNS::BitOrExpr *ast) = 0;
            virtual void visitBitShiftExpr(ASTNS::BitShiftExpr *ast) = 0;
            virtual void visitBitXorExpr(ASTNS::BitXorExpr *ast) = 0;
            virtual void visitBlock(ASTNS::Block *ast) = 0;
            virtual void visitBlockedExpr(ASTNS::BlockedExpr *ast) = 0;
            virtual void visitBracedBlock(ASTNS::BracedBlock *ast) = 0;
            virtual void visitCallExpr(ASTNS::CallExpr *ast) = 0;
            virtual void visitCastExpr(ASTNS::CastExpr *ast) = 0;
            virtual void visitCompEQExpr(ASTNS::CompEQExpr *ast) = 0;
            virtual void visitCompLGTExpr(ASTNS::CompLGTExpr *ast) = 0;
            virtual void visitExpr(ASTNS::Expr *ast) = 0;
            virtual void visitExpr_OPT(ASTNS::Expr_OPT *ast) = 0;
            virtual void visitForExpr(ASTNS::ForExpr *ast) = 0;
            virtual void visitIfExpr(ASTNS::IfExpr *ast) = 0;
            virtual void visitImplRet(ASTNS::ImplRet *ast) = 0;
            virtual void visitImplRet_OPT(ASTNS::ImplRet_OPT *ast) = 0;
            virtual void visitIndentedBlock(ASTNS::IndentedBlock *ast) = 0;
            virtual void visitMultExpr(ASTNS::MultExpr *ast) = 0;
            virtual void visitNotBlockedExpr(ASTNS::NotBlockedExpr *ast) = 0;
            virtual void visitPrimaryExpr(ASTNS::PrimaryExpr *ast) = 0;
            virtual void visitUnaryExpr(ASTNS::UnaryExpr *ast) = 0;
        };
        virtual ~ExprB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class LineEndingB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitLineEnding(ASTNS::LineEnding *ast) = 0;
            virtual void visitLineEnding_OPT(ASTNS::LineEnding_OPT *ast) = 0;
        };
        virtual ~LineEndingB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class PListB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitAnotherParam(ASTNS::AnotherParam *ast) = 0;
            virtual void visitParam(ASTNS::Param *ast) = 0;
            virtual void visitParamList(ASTNS::ParamList *ast) = 0;
            virtual void visitParamList_OPT(ASTNS::ParamList_OPT *ast) = 0;
            virtual void visitParamSegment(ASTNS::ParamSegment *ast) = 0;
        };
        virtual ~PListB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class StmtB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitAnotherStmt(ASTNS::AnotherStmt *ast) = 0;
            virtual void visitExprStmt(ASTNS::ExprStmt *ast) = 0;
            virtual void visitRetStmt(ASTNS::RetStmt *ast) = 0;
            virtual void visitStmt(ASTNS::Stmt *ast) = 0;
            virtual void visitStmtList(ASTNS::StmtList *ast) = 0;
            virtual void visitStmtList_OPT(ASTNS::StmtList_OPT *ast) = 0;
            virtual void visitVarStmt(ASTNS::VarStmt *ast) = 0;
            virtual void visitVarStmt_OPT(ASTNS::VarStmt_OPT *ast) = 0;
        };
        virtual ~StmtB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class TypeB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitBuiltinType(ASTNS::BuiltinType *ast) = 0;
            virtual void visitType(ASTNS::Type *ast) = 0;
        };
        virtual ~TypeB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class VStmtIB : public AST
    {
    public:
        class Visitor
        {
        public:
            virtual ~Visitor() {}
            virtual void visitAnotherVarStmtItem(ASTNS::AnotherVarStmtItem *ast) = 0;
            virtual void visitVarStmtItem(ASTNS::VarStmtItem *ast) = 0;
            virtual void visitVarStmtItemList(ASTNS::VarStmtItemList *ast) = 0;
            virtual void visitVarStmtItemSegment(ASTNS::VarStmtItemSegment *ast) = 0;
        };
        virtual ~VStmtIB() {}
        virtual void accept(Visitor *v) = 0;
        virtual bool empty() = 0;
    };
    class AdditionExpr : public ExprB
    {
    public:
        AdditionExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        AdditionExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class AnotherArg : public ArgB
    {
    public:
        AnotherArg(std::unique_ptr<ArgB> arg);
        enum class Form
        {
            A,
        };
        std::unique_ptr<ArgB> arg;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ArgB::Visitor *v) override;
    };
    class AnotherDecl : public DeclB
    {
    public:
        AnotherDecl(std::unique_ptr<DeclB> decl);
        enum class Form
        {
            A,
        };
        std::unique_ptr<DeclB> decl;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::DeclB::Visitor *v) override;
    };
    class AnotherParam : public PListB
    {
    public:
        AnotherParam(std::unique_ptr<PListB> param);
        enum class Form
        {
            A,
        };
        std::unique_ptr<PListB> param;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::PListB::Visitor *v) override;
    };
    class AnotherStmt : public StmtB
    {
    public:
        AnotherStmt(std::unique_ptr<StmtB> stmt);
        enum class Form
        {
            A,
        };
        std::unique_ptr<StmtB> stmt;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
    class AnotherVarStmtItem : public VStmtIB
    {
    public:
        AnotherVarStmtItem(std::unique_ptr<VStmtIB> varstmtitem);
        enum class Form
        {
            A,
        };
        std::unique_ptr<VStmtIB> varstmtitem;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::VStmtIB::Visitor *v) override;
    };
    class Arg : public ArgB
    {
    public:
        Arg(std::unique_ptr<ExprB> expr);
        enum class Form
        {
            A,
        };
        std::unique_ptr<ExprB> expr;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ArgB::Visitor *v) override;
    };
    class ArgList : public ArgB
    {
    public:
        ArgList(std::unique_ptr<ArgB> argsegment);
        ArgList(std::unique_ptr<ArgB> argsegment, Token comma);
        enum class Form
        {
            A,
            AT,
        };
        std::unique_ptr<ArgB> argsegment;
        Token comma;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ArgB::Visitor *v) override;
    };
    class ArgList_OPT : public ArgB
    {
    public:
        ArgList_OPT(std::unique_ptr<ArgB> arglist);
        ArgList_OPT();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<ArgB> arglist;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ArgB::Visitor *v) override;
    };
    class ArgSegment : public ArgB
    {
    public:
        ArgSegment(std::unique_ptr<ArgB> argsegment, Token comma, std::unique_ptr<ArgB> anotherarg);
        ArgSegment(std::unique_ptr<ArgB> arg);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ArgB> argsegment;
        Token comma;
        std::unique_ptr<ArgB> anotherarg;
        std::unique_ptr<ArgB> arg;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ArgB::Visitor *v) override;
    };
    class AssignmentExpr : public ExprB
    {
    public:
        AssignmentExpr(std::unique_ptr<ExprB> target, Token equal, std::unique_ptr<ExprB> value);
        AssignmentExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> target;
        Token equal;
        std::unique_ptr<ExprB> value;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BinAndExpr : public ExprB
    {
    public:
        BinAndExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        BinAndExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BinOrExpr : public ExprB
    {
    public:
        BinOrExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        BinOrExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BitAndExpr : public ExprB
    {
    public:
        BitAndExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        BitAndExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BitOrExpr : public ExprB
    {
    public:
        BitOrExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        BitOrExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BitShiftExpr : public ExprB
    {
    public:
        BitShiftExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        BitShiftExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BitXorExpr : public ExprB
    {
    public:
        BitXorExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        BitXorExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class Block : public ExprB
    {
    public:
        Block(std::unique_ptr<ExprB> _);
        enum class Form
        {
            A,
        };
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BlockedExpr : public ExprB
    {
    public:
        BlockedExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            A,
        };
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BracedBlock : public ExprB
    {
    public:
        BracedBlock(Token ocurb, std::unique_ptr<StmtB> stmts, std::unique_ptr<ExprB> implret, Token ccurb);
        BracedBlock(Token ocurb, Token newlopt, std::unique_ptr<StmtB> stmts, std::unique_ptr<ExprB> implret, Token ccurb);
        BracedBlock(Token ocurb, Token newlopt, Token indentopt, std::unique_ptr<StmtB> stmts, std::unique_ptr<ExprB> implret, Token dedentopt, Token ccurb);
        enum class Form
        {
            TAAT,
            TTAAT,
            TTTAATT,
        };
        Token ocurb;
        std::unique_ptr<StmtB> stmts;
        std::unique_ptr<ExprB> implret;
        Token ccurb;
        Token newlopt;
        Token indentopt;
        Token dedentopt;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class BuiltinType : public TypeB
    {
    public:
        BuiltinType(Token type);
        enum class Form
        {
            T,
        };
        Token type;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::TypeB::Visitor *v) override;
    };
    class CU : public CUB
    {
    public:
        CU(std::unique_ptr<DeclB> dl);
        CU();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<DeclB> dl;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::CUB::Visitor *v) override;
    };
    class CallExpr : public ExprB
    {
    public:
        CallExpr(std::unique_ptr<ExprB> callee, Token oparn, std::unique_ptr<ArgB> args, Token cparn);
        CallExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATAT,
            A,
        };
        std::unique_ptr<ExprB> callee;
        Token oparn;
        std::unique_ptr<ArgB> args;
        Token cparn;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class CastExpr : public ExprB
    {
    public:
        CastExpr(Token oparn, std::unique_ptr<TypeB> type, Token cparn, std::unique_ptr<ExprB> operand);
        CastExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            TATA,
            A,
        };
        Token oparn;
        std::unique_ptr<TypeB> type;
        Token cparn;
        std::unique_ptr<ExprB> operand;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class CompEQExpr : public ExprB
    {
    public:
        CompEQExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        CompEQExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class CompLGTExpr : public ExprB
    {
    public:
        CompLGTExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        CompLGTExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class Decl : public DeclB
    {
    public:
        Decl(std::unique_ptr<DeclB> _);
        enum class Form
        {
            A,
        };
        std::unique_ptr<DeclB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::DeclB::Visitor *v) override;
    };
    class DeclList : public DeclB
    {
    public:
        DeclList(std::unique_ptr<DeclB> decllist, std::unique_ptr<DeclB> anotherdecl);
        DeclList(std::unique_ptr<DeclB> decl);
        enum class Form
        {
            AA,
            A,
        };
        std::unique_ptr<DeclB> decllist;
        std::unique_ptr<DeclB> anotherdecl;
        std::unique_ptr<DeclB> decl;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::DeclB::Visitor *v) override;
    };
    class Expr : public ExprB
    {
    public:
        Expr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            A,
        };
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class ExprStmt : public StmtB
    {
    public:
        ExprStmt(std::unique_ptr<ExprB> expr, std::unique_ptr<LineEndingB> ending);
        enum class Form
        {
            AA,
        };
        std::unique_ptr<ExprB> expr;
        std::unique_ptr<LineEndingB> ending;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
    class Expr_OPT : public ExprB
    {
    public:
        Expr_OPT(std::unique_ptr<ExprB> expr);
        Expr_OPT();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<ExprB> expr;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class ForExpr : public ExprB
    {
    public:
        ForExpr(Token fortok, std::unique_ptr<StmtB> start, Token semi1, std::unique_ptr<ExprB> cond, Token semi2, std::unique_ptr<ExprB> increment, Token cparn, std::unique_ptr<ExprB> body);
        enum class Form
        {
            TATATATA,
        };
        Token fortok;
        std::unique_ptr<StmtB> start;
        Token semi1;
        std::unique_ptr<ExprB> cond;
        Token semi2;
        std::unique_ptr<ExprB> increment;
        Token cparn;
        std::unique_ptr<ExprB> body;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class FunctionDecl : public DeclB
    {
    public:
        FunctionDecl(Token fun, std::unique_ptr<TypeB> retty, Token name, Token oparn, std::unique_ptr<PListB> paramlist, Token cparn, std::unique_ptr<ExprB> body, std::unique_ptr<LineEndingB> endl);
        FunctionDecl(Token fun, std::unique_ptr<TypeB> retty, Token name, Token oparn, std::unique_ptr<PListB> paramlist, Token cparn, std::unique_ptr<LineEndingB> endl);
        enum class Form
        {
            TATTATAA,
            TATTATA,
        };
        Token fun;
        std::unique_ptr<TypeB> retty;
        Token name;
        Token oparn;
        std::unique_ptr<PListB> paramlist;
        Token cparn;
        std::unique_ptr<ExprB> body;
        std::unique_ptr<LineEndingB> endl;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::DeclB::Visitor *v) override;
    };
    class IfExpr : public ExprB
    {
    public:
        IfExpr(Token iftok, std::unique_ptr<ExprB> cond, std::unique_ptr<ExprB> trues);
        IfExpr(Token iftok, std::unique_ptr<ExprB> cond, std::unique_ptr<ExprB> trues, Token elsetok, std::unique_ptr<ExprB> falses);
        enum class Form
        {
            TAA,
            TAATA,
        };
        Token iftok;
        std::unique_ptr<ExprB> cond;
        std::unique_ptr<ExprB> trues;
        Token elsetok;
        std::unique_ptr<ExprB> falses;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class ImplRet : public ExprB
    {
    public:
        ImplRet(Token leftarrow, std::unique_ptr<ExprB> expr, std::unique_ptr<LineEndingB> ending);
        enum class Form
        {
            TAA,
        };
        Token leftarrow;
        std::unique_ptr<ExprB> expr;
        std::unique_ptr<LineEndingB> ending;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class ImplRet_OPT : public ExprB
    {
    public:
        ImplRet_OPT(std::unique_ptr<ExprB> implret);
        ImplRet_OPT();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<ExprB> implret;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class IndentedBlock : public ExprB
    {
    public:
        IndentedBlock(Token newl, Token indent, std::unique_ptr<StmtB> stmts, std::unique_ptr<ExprB> implret, Token dedent);
        enum class Form
        {
            TTAAT,
        };
        Token newl;
        Token indent;
        std::unique_ptr<StmtB> stmts;
        std::unique_ptr<ExprB> implret;
        Token dedent;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class LineEnding : public LineEndingB
    {
    public:
        LineEnding(Token tok);
        LineEnding(Token tok, Token tok2);
        enum class Form
        {
            T,
            TT,
        };
        Token tok;
        Token tok2;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::LineEndingB::Visitor *v) override;
    };
    class LineEnding_OPT : public LineEndingB
    {
    public:
        LineEnding_OPT(std::unique_ptr<LineEndingB> lineending);
        LineEnding_OPT();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<LineEndingB> lineending;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::LineEndingB::Visitor *v) override;
    };
    class MultExpr : public ExprB
    {
    public:
        MultExpr(std::unique_ptr<ExprB> lhs, Token op, std::unique_ptr<ExprB> rhs);
        MultExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<ExprB> lhs;
        Token op;
        std::unique_ptr<ExprB> rhs;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class NotBlockedExpr : public ExprB
    {
    public:
        NotBlockedExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            A,
        };
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class Param : public PListB
    {
    public:
        Param(std::unique_ptr<TypeB> type, Token name);
        enum class Form
        {
            AT,
        };
        std::unique_ptr<TypeB> type;
        Token name;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::PListB::Visitor *v) override;
    };
    class ParamList : public PListB
    {
    public:
        ParamList(std::unique_ptr<PListB> paramsegment);
        ParamList(std::unique_ptr<PListB> paramsegment, Token comma);
        enum class Form
        {
            A,
            AT,
        };
        std::unique_ptr<PListB> paramsegment;
        Token comma;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::PListB::Visitor *v) override;
    };
    class ParamList_OPT : public PListB
    {
    public:
        ParamList_OPT(std::unique_ptr<PListB> paramlist);
        ParamList_OPT();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<PListB> paramlist;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::PListB::Visitor *v) override;
    };
    class ParamSegment : public PListB
    {
    public:
        ParamSegment(std::unique_ptr<PListB> paramsegment, Token comma, std::unique_ptr<PListB> anotherparam);
        ParamSegment(std::unique_ptr<PListB> param);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<PListB> paramsegment;
        Token comma;
        std::unique_ptr<PListB> anotherparam;
        std::unique_ptr<PListB> param;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::PListB::Visitor *v) override;
    };
    class PrimaryExpr : public ExprB
    {
    public:
        PrimaryExpr(Token value);
        PrimaryExpr(Token oparn, std::unique_ptr<ExprB> expr, Token cparn);
        enum class Form
        {
            T,
            TAT,
        };
        Token value;
        Token oparn;
        std::unique_ptr<ExprB> expr;
        Token cparn;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class RetStmt : public StmtB
    {
    public:
        RetStmt(Token ret, std::unique_ptr<ExprB> expr, std::unique_ptr<LineEndingB> ending);
        RetStmt(Token ret, std::unique_ptr<LineEndingB> ending);
        enum class Form
        {
            TAA,
            TA,
        };
        Token ret;
        std::unique_ptr<ExprB> expr;
        std::unique_ptr<LineEndingB> ending;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
    class Stmt : public StmtB
    {
    public:
        Stmt(std::unique_ptr<StmtB> _);
        enum class Form
        {
            A,
        };
        std::unique_ptr<StmtB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
    class StmtList : public StmtB
    {
    public:
        StmtList(std::unique_ptr<StmtB> stmtlist, std::unique_ptr<StmtB> anotherstmt);
        StmtList(std::unique_ptr<StmtB> stmt);
        enum class Form
        {
            AA,
            A,
        };
        std::unique_ptr<StmtB> stmtlist;
        std::unique_ptr<StmtB> anotherstmt;
        std::unique_ptr<StmtB> stmt;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
    class StmtList_OPT : public StmtB
    {
    public:
        StmtList_OPT(std::unique_ptr<StmtB> stmtlist);
        StmtList_OPT();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<StmtB> stmtlist;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
    class Type : public TypeB
    {
    public:
        Type(std::unique_ptr<TypeB> _);
        enum class Form
        {
            A,
        };
        std::unique_ptr<TypeB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::TypeB::Visitor *v) override;
    };
    class UnaryExpr : public ExprB
    {
    public:
        UnaryExpr(Token op, std::unique_ptr<ExprB> operand);
        UnaryExpr(std::unique_ptr<ExprB> _);
        enum class Form
        {
            TA,
            A,
        };
        Token op;
        std::unique_ptr<ExprB> operand;
        std::unique_ptr<ExprB> _;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::ExprB::Visitor *v) override;
    };
    class VarStmt : public StmtB
    {
    public:
        VarStmt(Token var, std::unique_ptr<TypeB> type, std::unique_ptr<VStmtIB> assignments, std::unique_ptr<LineEndingB> ending);
        enum class Form
        {
            TAAA,
        };
        Token var;
        std::unique_ptr<TypeB> type;
        std::unique_ptr<VStmtIB> assignments;
        std::unique_ptr<LineEndingB> ending;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
    class VarStmtItem : public VStmtIB
    {
    public:
        VarStmtItem(Token name, Token equal, std::unique_ptr<ExprB> expr);
        VarStmtItem(Token name);
        enum class Form
        {
            TTA,
            T,
        };
        Token name;
        Token equal;
        std::unique_ptr<ExprB> expr;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::VStmtIB::Visitor *v) override;
    };
    class VarStmtItemList : public VStmtIB
    {
    public:
        VarStmtItemList(std::unique_ptr<VStmtIB> varstmtitemsegment);
        VarStmtItemList(std::unique_ptr<VStmtIB> varstmtitemsegment, Token comma);
        enum class Form
        {
            A,
            AT,
        };
        std::unique_ptr<VStmtIB> varstmtitemsegment;
        Token comma;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::VStmtIB::Visitor *v) override;
    };
    class VarStmtItemSegment : public VStmtIB
    {
    public:
        VarStmtItemSegment(std::unique_ptr<VStmtIB> varstmtitemsegment, Token comma, std::unique_ptr<VStmtIB> anothervarstmtitem);
        VarStmtItemSegment(std::unique_ptr<VStmtIB> varstmtitem);
        enum class Form
        {
            ATA,
            A,
        };
        std::unique_ptr<VStmtIB> varstmtitemsegment;
        Token comma;
        std::unique_ptr<VStmtIB> anothervarstmtitem;
        std::unique_ptr<VStmtIB> varstmtitem;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::VStmtIB::Visitor *v) override;
    };
    class VarStmt_OPT : public StmtB
    {
    public:
        VarStmt_OPT(std::unique_ptr<StmtB> varstmt);
        VarStmt_OPT();
        enum class Form
        {
            A,
            EMPTY,
        };
        std::unique_ptr<StmtB> varstmt;
        Form form;
        bool empty() override;
        virtual void accept(ASTNS::StmtB::Visitor *v) override;
    };
// This code was autogenerated - see the utils/ directory
// ASTHEADER END
}
