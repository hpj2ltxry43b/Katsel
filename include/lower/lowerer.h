#pragma once

#include "ir/instruction.h"
#include "ir/value.h"
#include "ir/unit.h"
#include "ir/visitor.h"
#include "mangle/mangler.h"

#include <unordered_map>

#include "llvm/IR/Module.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/LegacyPassManager.h"

namespace Lower {
    class Lowerer : public IR::InstructionVisitor, public IR::BrVisitor, public IR::ValueVisitor {
    public:
        Lowerer(IR::Unit const &unit);

        // LOWER VISIT INSTR START
// The following code was autogenerated - see the utils/ directory
void visitStore(NNPtr<IR::Instrs::Store> i) override;
void visitPhi(NNPtr<IR::Instrs::Phi> i) override;
void visitRegister(NNPtr<IR::Instrs::Register> i) override;
void visitOr(NNPtr<IR::Instrs::Or> i) override;
void visitAnd(NNPtr<IR::Instrs::And> i) override;
void visitNot(NNPtr<IR::Instrs::Not> i) override;
void visitICmpNE(NNPtr<IR::Instrs::ICmpNE> i) override;
void visitICmpEQ(NNPtr<IR::Instrs::ICmpEQ> i) override;
void visitICmpLT(NNPtr<IR::Instrs::ICmpLT> i) override;
void visitICmpGT(NNPtr<IR::Instrs::ICmpGT> i) override;
void visitICmpLE(NNPtr<IR::Instrs::ICmpLE> i) override;
void visitICmpGE(NNPtr<IR::Instrs::ICmpGE> i) override;
void visitIAdd(NNPtr<IR::Instrs::IAdd> i) override;
void visitISub(NNPtr<IR::Instrs::ISub> i) override;
void visitIMult(NNPtr<IR::Instrs::IMult> i) override;
void visitIDiv(NNPtr<IR::Instrs::IDiv> i) override;
void visitIMod(NNPtr<IR::Instrs::IMod> i) override;
void visitINeg(NNPtr<IR::Instrs::INeg> i) override;
void visitFCmpNE(NNPtr<IR::Instrs::FCmpNE> i) override;
void visitFCmpEQ(NNPtr<IR::Instrs::FCmpEQ> i) override;
void visitFCmpLT(NNPtr<IR::Instrs::FCmpLT> i) override;
void visitFCmpGT(NNPtr<IR::Instrs::FCmpGT> i) override;
void visitFCmpLE(NNPtr<IR::Instrs::FCmpLE> i) override;
void visitFCmpGE(NNPtr<IR::Instrs::FCmpGE> i) override;
void visitFAdd(NNPtr<IR::Instrs::FAdd> i) override;
void visitFSub(NNPtr<IR::Instrs::FSub> i) override;
void visitFMult(NNPtr<IR::Instrs::FMult> i) override;
void visitFDiv(NNPtr<IR::Instrs::FDiv> i) override;
void visitFMod(NNPtr<IR::Instrs::FMod> i) override;
void visitFNeg(NNPtr<IR::Instrs::FNeg> i) override;
void visitBitXor(NNPtr<IR::Instrs::BitXor> i) override;
void visitBitOr(NNPtr<IR::Instrs::BitOr> i) override;
void visitBitAnd(NNPtr<IR::Instrs::BitAnd> i) override;
void visitBitNot(NNPtr<IR::Instrs::BitNot> i) override;
void visitShiftR(NNPtr<IR::Instrs::ShiftR> i) override;
void visitShiftL(NNPtr<IR::Instrs::ShiftL> i) override;
void visitNoOpCast(NNPtr<IR::Instrs::NoOpCast> i) override;
void visitIntToInt(NNPtr<IR::Instrs::IntToInt> i) override;
void visitIntToFloat(NNPtr<IR::Instrs::IntToFloat> i) override;
void visitFloatToFloat(NNPtr<IR::Instrs::FloatToFloat> i) override;
void visitFloatToInt(NNPtr<IR::Instrs::FloatToInt> i) override;
void visitCall(NNPtr<IR::Instrs::Call> i) override;
void visitAddrof(NNPtr<IR::Instrs::Addrof> i) override;
void visitDerefPtr(NNPtr<IR::Instrs::DerefPtr> i) override;
void visitPtrArith(NNPtr<IR::Instrs::PtrArith> i) override;
// This code was autogenerated - see the utils/ directory
        // LOWER VISIT INSTR END
        // LOWER VISIT BRANCH START
// The following code was autogenerated - see the utils/ directory
void visitReturn(NNPtr<IR::Instrs::Return> i) override;
void visitGotoBr(NNPtr<IR::Instrs::GotoBr> i) override;
void visitCondBr(NNPtr<IR::Instrs::CondBr> i) override;
// This code was autogenerated - see the utils/ directory
        // LOWER VISIT BRANCH END

#define METHOD(cl, n) \
        void value_visit##n(NNPtr<IR::cl> v) override;
        IR_VALUE_LIST(METHOD)
#undef METHOD

        void lower();
        bool objectify(llvm::raw_fd_ostream &ostream);

        void printMod(llvm::raw_ostream &ostream);

        bool errored;

    private:
        void lower(IR::Function const &f);
        void lower(IR::Block const &b);
        NNPtr<llvm::Value> lower(NNPtr<IR::Value> v);
        NNPtr<llvm::Value> lower(IR::ASTValue &v);

        IR::Unit const &unit;

        llvm::LLVMContext context;
        llvm::IRBuilder<> builder;
        llvm::Module mod;
        llvm::legacy::FunctionPassManager fpm;

        std::unordered_map<NNPtr<IR::Instrs::Instruction const> , llvm::Value*> values;
        std::unordered_map<NNPtr<IR::Block const> , llvm::BasicBlock*> blocks;
        std::unordered_map<NNPtr<IR::Function const> , llvm::Function*> functions;

        Mangle::NameMangler mangler;

        int allocaIndex;
        llvm::Function *curFunction;

        llvm::Value *lvret;
    };
}
