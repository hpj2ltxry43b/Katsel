#pragma once

#include "ir/instructionfwd.h"
#include "ir/value.h"
#include "ir/function.h"
#include "ir/unit.h"
#include "ir/visitor.h"
#include "mangle/mangler.h"

#include <unordered_map>

#include "llvm/IR/Module.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/LegacyPassManager.h"

namespace Lower {
    class Lowerer : public IR::InstructionVisitor, public IR::BrVisitor, public IR::ValueVisitor {
    public:
        Lowerer(IR::Unit const &unit);

        // LOWER VISIT INSTR START
// The following code was autogenerated - see the utils/ directory
void visit(IR::Instrs::Store &i) override;
void visit(IR::Instrs::Phi &i) override;
void visit(IR::Instrs::Register &i) override;
void visit(IR::Instrs::Or &i) override;
void visit(IR::Instrs::And &i) override;
void visit(IR::Instrs::Not &i) override;
void visit(IR::Instrs::ICmpNE &i) override;
void visit(IR::Instrs::ICmpEQ &i) override;
void visit(IR::Instrs::ICmpLT &i) override;
void visit(IR::Instrs::ICmpGT &i) override;
void visit(IR::Instrs::ICmpLE &i) override;
void visit(IR::Instrs::ICmpGE &i) override;
void visit(IR::Instrs::IAdd &i) override;
void visit(IR::Instrs::ISub &i) override;
void visit(IR::Instrs::IMult &i) override;
void visit(IR::Instrs::IDiv &i) override;
void visit(IR::Instrs::IMod &i) override;
void visit(IR::Instrs::INeg &i) override;
void visit(IR::Instrs::FCmpNE &i) override;
void visit(IR::Instrs::FCmpEQ &i) override;
void visit(IR::Instrs::FCmpLT &i) override;
void visit(IR::Instrs::FCmpGT &i) override;
void visit(IR::Instrs::FCmpLE &i) override;
void visit(IR::Instrs::FCmpGE &i) override;
void visit(IR::Instrs::FAdd &i) override;
void visit(IR::Instrs::FSub &i) override;
void visit(IR::Instrs::FMult &i) override;
void visit(IR::Instrs::FDiv &i) override;
void visit(IR::Instrs::FMod &i) override;
void visit(IR::Instrs::FNeg &i) override;
void visit(IR::Instrs::BitXor &i) override;
void visit(IR::Instrs::BitOr &i) override;
void visit(IR::Instrs::BitAnd &i) override;
void visit(IR::Instrs::BitNot &i) override;
void visit(IR::Instrs::ShiftR &i) override;
void visit(IR::Instrs::ShiftL &i) override;
void visit(IR::Instrs::NoOpCast &i) override;
void visit(IR::Instrs::IntToInt &i) override;
void visit(IR::Instrs::IntToFloat &i) override;
void visit(IR::Instrs::FloatToFloat &i) override;
void visit(IR::Instrs::FloatToInt &i) override;
void visit(IR::Instrs::Call &i) override;
void visit(IR::Instrs::Addrof &i) override;
void visit(IR::Instrs::DerefPtr &i) override;
void visit(IR::Instrs::PtrArith &i) override;
// This code was autogenerated - see the utils/ directory
        // LOWER VISIT INSTR END
        // LOWER VISIT BRANCH START
// The following code was autogenerated - see the utils/ directory
void visit(IR::Instrs::Return &i) override;
void visit(IR::Instrs::GotoBr &i) override;
void visit(IR::Instrs::CondBr &i) override;
// This code was autogenerated - see the utils/ directory
        // LOWER VISIT BRANCH END

#define METHOD(cl, n) \
        void value_visit(IR::cl &v) override;
        IR_VALUE_LIST(METHOD)
#undef METHOD

        void lower();
        bool objectify(llvm::raw_fd_ostream &ostream);

        void print_mod(llvm::raw_ostream &ostream);

        bool errored;

    private:
        void lower(IR::Function const &f);
        void lower(IR::Block const &b);
        NNPtr<llvm::Value> lower(NNPtr<IR::Value> v);
        NNPtr<llvm::Value> lower(IR::ASTValue &v);

        IR::Unit const &unit;

        llvm::LLVMContext context;
        llvm::IRBuilder<> builder;
        llvm::Module mod;
        llvm::legacy::FunctionPassManager fpm;

        std::unordered_map<NNPtr<IR::Instrs::Instruction const> , llvm::Value*> values;
        std::unordered_map<NNPtr<IR::Block const> , llvm::BasicBlock*> blocks;
        std::unordered_map<NNPtr<IR::Function const> , llvm::Function*> functions;

        Mangle::NameMangler mangler;

        int alloca_index;
        llvm::Function *cur_function;

        llvm::Value *lvret;
    };
}
