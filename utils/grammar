Decls                    -> $Decls:decls $Decl:decl                                                                          ; "declaration list"
Decls                    -> $Decl:_                                                                                          ; "declaration list"

Decl                     -> $Function:_                                                                                      ; "declaration"

Function                 -> FUN:fun $Type:retty IDENTIFIER:name OPARN:oparn CPARN:cparn $Block:body                          ; "function declaration"
Function                 -> FUN:fun $Type:retty IDENTIFIER:name OPARN:oparn $ParamList:paramlist CPARN:cparn $Block:body     ; "function declaration"

Stmts                    -> $Stmts:stmts $Stmt:stmt                                                                          ; "statement list"
Stmts                    -> $Stmt:_                                                                                          ; "statement list"
Stmt                     -> $EmptyStmt:_                                                                                     ; "statement"
Stmt                     -> $VarStmt:_                                                                                       ; "statement"
Stmt                     -> $ExprStmt:_                                                                                      ; "statement"
Stmt                     -> $RetStmt:_                                                                                       ; "statement"
Stmt                     -> $Block:_                                                                                         ; "statement"

VarStmt                  -> VAR:var $Type:type $VarStmtItems:assignments SEMICOLON:semi                                      ; "variable statement"
ExprStmt                 -> $Expression:expr SEMICOLON:semi                                                                  ; "expression statement"
RetStmt                  -> RETURN:ret $Expression:expr SEMICOLON:semi                                                       ; "return statement"
EmptyStmt                -> SEMICOLON:semi                                                                                   ; "empty statement"

VarStmtItems             -> $VarStmtItems:items COMMA:comma $VarStmtItem:item                                                ; "variable statement assignments"
VarStmtItems             -> $VarStmtItem:_                                                                                   ; "variable statement assignments"
VarStmtItem              -> IDENTIFIER:name EQUAL:equal $Expression:expr                                                     ; "variable statement assignment"
VarStmtItem              -> IDENTIFIER:name                                                                                  ; "variable statement assignment"

Block                    -> OCURB:ocurb $Stmts:stmts CCURB:ccurb                                                             ; "code block"
Block                    -> OCURB:ocurb CCURB:ccurb                                                                          ; "code block"

Type                     -> UINT8:type                                                                                       ; "type specifier"
Type                     -> UINT16:type                                                                                      ; "type specifier"
Type                     -> UINT32:type                                                                                      ; "type specifier"
Type                     -> UINT64:type                                                                                      ; "type specifier"
Type                     -> SINT8:type                                                                                       ; "type specifier"
Type                     -> SINT16:type                                                                                      ; "type specifier"
Type                     -> SINT32:type                                                                                      ; "type specifier"
Type                     -> SINT64:type                                                                                      ; "type specifier"
Type                     -> FLOAT:type                                                                                       ; "type specifier"
Type                     -> BOOL:type                                                                                        ; "type specifier"
Type                     -> DOUBLE:type                                                                                      ; "type specifier"
Type                     -> VOID:type                                                                                        ; "type specifier"
Type                     -> CHAR:type                                                                                        ; "type specifier"

Args                     -> $Args:args COMMA:comma $Expression:expr                                                          ; "argument list"
Args                     -> $Expression:expr                                                                                 ; "argument list"

ParamList                -> $ParamList:plist COMMA:comma $Type:type IDENTIFIER:name                                          ; "parameter list"
ParamList                -> $Type:type IDENTIFIER:name                                                                       ; "parameter list"

Expression               -> $AssignmentExpr:_                                                                                ; "expression"

AssignmentExpr           -> $TernaryExpr:target EQUAL:equal $AssignmentExpr:value                                            ; "assignment expression"
AssignmentExpr           -> $TernaryExpr:_                                                                                   ; "assignment expression"

TernaryExpr              -> $BinorExpr:_                                                                                     ; "ternary expression"
TernaryExpr              -> $BinorExpr:cond QUESTION:quest $Expression:trues COLON:colon $TernaryExpr:falses                 ; "ternary expression"

BinorExpr                -> $BinorExpr:lhs DOUBLEPIPE:op $BinandExpr:rhs                                                     ; "binary or expression"
BinorExpr                -> $BinandExpr:_                                                                                    ; "binary or expression"

BinandExpr               -> $BinandExpr:lhs DOUBLEAMPER:op $BinnotExpr:rhs                                                   ; "binary and expression"
BinandExpr               -> $BinnotExpr:_                                                                                    ; "binary and expression"

BinnotExpr               -> BANG:op $BinnotExpr:operand                                                                      ; "binary not expression"
BinnotExpr               -> $CompeqExpr:_                                                                                    ; "binary not expression"

CompeqExpr               -> $CompeqExpr:lhs BANGEQUAL:op $ComplgtExpr:rhs                                                    ; "equality expression"
CompeqExpr               -> $CompeqExpr:lhs DOUBLEEQUAL:op $ComplgtExpr:rhs                                                  ; "equality expression"
CompeqExpr               -> $ComplgtExpr:_                                                                                   ; "equality expression"

ComplgtExpr              -> $ComplgtExpr:lhs LESS:op $BitxorExpr:rhs                                                         ; "comparison expression"
ComplgtExpr              -> $ComplgtExpr:lhs GREATER:op $BitxorExpr:rhs                                                      ; "comparison expression"
ComplgtExpr              -> $ComplgtExpr:lhs LESSEQUAL:op $BitxorExpr:rhs                                                    ; "comparison expression"
ComplgtExpr              -> $ComplgtExpr:lhs GREATEREQUAL:op $BitxorExpr:rhs                                                 ; "comparison expression"
ComplgtExpr              -> $BitxorExpr:_                                                                                    ; "comparison expression"

BitxorExpr               -> $BitxorExpr:lhs CARET:op $BitorExpr:rhs                                                          ; "bitwise xor expression"
BitxorExpr               -> $BitorExpr:_                                                                                     ; "bitwise xor expression"

BitorExpr                -> $BitorExpr:lhs PIPE:op $BitandExpr:rhs                                                           ; "bitwise or expression"
BitorExpr                -> $BitandExpr:_                                                                                    ; "bitwise or expression"

BitandExpr               -> $BitandExpr:lhs AMPER:op $BitshiftExpr:rhs                                                       ; "bitwise and expression"
BitandExpr               -> $BitshiftExpr:_                                                                                  ; "bitwise and expression"

BitshiftExpr             -> $BitshiftExpr:lhs DOUBLEGREATER:op $AdditionExpr:rhs                                             ; "bit shift expression"
BitshiftExpr             -> $BitshiftExpr:lhs DOUBLELESS:op $AdditionExpr:rhs                                                ; "bit shift expression"
BitshiftExpr             -> $AdditionExpr:_                                                                                  ; "bit shift expression"

AdditionExpr             -> $AdditionExpr:lhs PLUS:op $MultExpr:rhs                                                          ; "addition expression"
AdditionExpr             -> $AdditionExpr:lhs MINUS:op $MultExpr:rhs                                                         ; "addition expression"
AdditionExpr             -> $MultExpr:_                                                                                      ; "addition expression"

MultExpr                 -> $MultExpr:lhs STAR:op $UnaryExpr:rhs                                                             ; "multiplication expression"
MultExpr                 -> $MultExpr:lhs SLASH:op $UnaryExpr:rhs                                                            ; "multiplication expression"
MultExpr                 -> $MultExpr:lhs PERCENT:op $UnaryExpr:rhs                                                          ; "multiplication expression"
MultExpr                 -> $UnaryExpr:_                                                                                     ; "multiplication expression"

UnaryExpr                -> TILDE:op $UnaryExpr:operand                                                                      ; "unary expression"
UnaryExpr                -> MINUS:op $UnaryExpr:operand                                                                      ; "unary expression"
UnaryExpr                -> $CallExpr:_                                                                                      ; "unary expression"

CallExpr                 -> $PrimaryExpr:callee OPARN:oparn $Args:args CPARN:cparn                                           ; "function call expression"
CallExpr                 -> $PrimaryExpr:callee OPARN:oparn CPARN:cparn                                                      ; "function call expression"
CallExpr                 -> $PrimaryExpr:_                                                                                   ; "function call expression"

PrimaryExpr              -> TRUELIT:value                                                                                    ; "primary expression"
PrimaryExpr              -> FALSELIT:value                                                                                   ; "primary expression"
PrimaryExpr              -> FLOATLIT:value                                                                                   ; "primary expression"
PrimaryExpr              -> NULLPTRLIT:value                                                                                 ; "primary expression"
PrimaryExpr              -> DECINTLIT:value                                                                                  ; "primary expression"
PrimaryExpr              -> OCTINTLIT:value                                                                                  ; "primary expression"
PrimaryExpr              -> BININTLIT:value                                                                                  ; "primary expression"
PrimaryExpr              -> HEXINTLIT:value                                                                                  ; "primary expression"
PrimaryExpr              -> CHARLIT:value                                                                                    ; "primary expression"
PrimaryExpr              -> STRINGLIT:value                                                                                  ; "primary expression"
PrimaryExpr              -> IDENTIFIER:value                                                                                 ; "primary expression"
PrimaryExpr              -> OPARN:oparn $Expression:expr CPARN:cparn                                                         ; "primary expression"

