decls                    -> $decls:decls $decl:decl                                                                          ; "declaration list"
decls                    -> $decl:decl                                                                                       ; "declaration list"

decl                     -> $function:_                                                                                      ; "declaration"

function                 -> FUN:fun $type:retty IDENTIFIER:name OPARN:oparn CPARN:cparn $block:body                          ; "function declaration"
function                 -> FUN:fun $type:retty IDENTIFIER:name OPARN:oparn $paramlist:paramlist CPARN:cparn $block:body     ; "function declaration"

stmts                    -> $stmts:stmts $stmt:stmt                                                                          ; "statements"
stmts                    -> $stmt:_                                                                                          ; "statements"
stmt                     -> $varstmt:_                                                                                       ; "statement"
stmt                     -> $exprstmt:_                                                                                      ; "statement"
stmt                     -> $retstmt:_                                                                                       ; "statement"
stmt                     -> $block:_                                                                                         ; "statement"

varstmt                  -> VAR:var $type:type $varstmtfinisher:assignments SEMICOLON:semi                                   ; "variable statement"
exprstmt                 -> $expression:expr SEMICOLON:semi                                                                  ; "expression statement"
retstmt                  -> RETURN:ret $expression:expr SEMICOLON:semi                                                       ; "return statement"

varstmtfinisher          -> $varstmtfinisher:assignments COMMA:comma IDENTIFIER:name EQUAL:equal $expression:expr            ; "variable statement assignments"
varstmtfinisher          -> IDENTIFIER:name EQUAL:equal $expression:expr                                                     ; "variable statement assignments"

block                    -> OCURB:ocurb $stmts:stmts CCURB:ccurb                                                             ; "code block"

type                     -> UINT8:type                                                                                       ; "type specifier"
type                     -> UINT16:type                                                                                      ; "type specifier"
type                     -> UINT32:type                                                                                      ; "type specifier"
type                     -> UINT64:type                                                                                      ; "type specifier"
type                     -> SINT8:type                                                                                       ; "type specifier"
type                     -> SINT16:type                                                                                      ; "type specifier"
type                     -> SINT32:type                                                                                      ; "type specifier"
type                     -> SINT64:type                                                                                      ; "type specifier"
type                     -> FLOAT:type                                                                                       ; "type specifier"
type                     -> BOOL:type                                                                                        ; "type specifier"
type                     -> DOUBLE:type                                                                                      ; "type specifier"
type                     -> VOID:type                                                                                        ; "type specifier"
type                     -> CHAR:type                                                                                        ; "type specifier"

args                     -> $args:args COMMA:comma $expression:expr                                                          ; "argument list"
args                     -> $expression:expr                                                                                 ; "argument list"

paramlist                -> $paramlist:plist COMMA:comma $type:type IDENTIFIER:name                                          ; "parameter list"
paramlist                -> $type:type IDENTIFIER:name                                                                       ; "parameter list"

expression               -> $assignmentexpr:_                                                                                ; "expression"

assignmentexpr           -> $ternaryexpr:target EQUAL:equal $assignmentexpr:value                                            ; "assignment expression"
assignmentexpr           -> $ternaryexpr:_                                                                                   ; "assignment expression"

ternaryexpr              -> $binorexpr:_                                                                                     ; "ternary expression"
ternaryexpr              -> $binorexpr:cond QUESTION:quest $binorexpr:trues COLON:colon $ternaryexpr:falses                  ; "ternary expression"

binorexpr                -> $binorexpr:lhs DOUBLEPIPE:op $binandexpr:rhs                                                     ; "binary or expression"
binorexpr                -> $binandexpr:_                                                                                    ; "binary or expression"

binandexpr               -> $binandexpr:lhs DOUBLEAMPER:op $binnotexpr:rhs                                                   ; "binary and expression"
binandexpr               -> $binnotexpr:_                                                                                    ; "binary and expression"

binnotexpr               -> BANG:op $binnotexpr:operand                                                                      ; "binary not expression"
binnotexpr               -> $compeqexpr:_                                                                                    ; "binary not expression"

compeqexpr               -> $compeqexpr:lhs BANGEQUAL:op $complgtexpr:rhs                                                    ; "equality expression"
compeqexpr               -> $compeqexpr:lhs DOUBLEEQUAL:op $complgtexpr:rhs                                                  ; "equality expression"
compeqexpr               -> $complgtexpr:_                                                                                   ; "equality expression"

complgtexpr              -> $complgtexpr:lhs LESS:op $bitxorexpr:rhs                                                         ; "comparison expression"
complgtexpr              -> $complgtexpr:lhs GREATER:op $bitxorexpr:rhs                                                      ; "comparison expression"
complgtexpr              -> $complgtexpr:lhs LESSEQUAL:op $bitxorexpr:rhs                                                    ; "comparison expression"
complgtexpr              -> $complgtexpr:lhs GREATEREQUAL:op $bitxorexpr:rhs                                                 ; "comparison expression"
complgtexpr              -> $bitxorexpr:_                                                                                    ; "comparison expression"

bitxorexpr               -> $bitxorexpr:lhs CARET:op $bitorexpr:rhs                                                          ; "bitwise xor expression"
bitxorexpr               -> $bitorexpr:_                                                                                     ; "bitwise xor expression"

bitorexpr                -> $bitorexpr:lhs PIPE:op $bitandexpr:rhs                                                           ; "bitwise or expression"
bitorexpr                -> $bitandexpr:_                                                                                    ; "bitwise or expression"

bitandexpr               -> $bitandexpr:lhs AMPER:op $bitshiftexpr:rhs                                                       ; "bitwise and expression"
bitandexpr               -> $bitshiftexpr:_                                                                                  ; "bitwise and expression"

bitshiftexpr             -> $bitshiftexpr:lhs DOUBLEGREATER:op $additionexpr:rhs                                             ; "bit shift expression"
bitshiftexpr             -> $bitshiftexpr:lhs DOUBLELESS:op $additionexpr:rhs                                                ; "bit shift expression"
bitshiftexpr             -> $additionexpr:_                                                                                  ; "bit shift expression"

additionexpr             -> $additionexpr:lhs PLUS:op $multexpr:rhs                                                          ; "addition expression"
additionexpr             -> $additionexpr:lhs MINUS:op $multexpr:rhs                                                         ; "addition expression"
additionexpr             -> $multexpr:_                                                                                      ; "addition expression"

multexpr                 -> $multexpr:lhs STAR:op $unaryexpr:rhs                                                             ; "multiplication expression"
multexpr                 -> $multexpr:lhs SLASH:op $unaryexpr:rhs                                                            ; "multiplication expression"
multexpr                 -> $multexpr:lhs PERCENT:op $unaryexpr:rhs                                                          ; "multiplication expression"
multexpr                 -> $unaryexpr:_                                                                                     ; "multiplication expression"

unaryexpr                -> TILDE:op $unaryexpr:operand                                                                      ; "unary expression"
unaryexpr                -> MINUS:op $unaryexpr:operand                                                                      ; "unary expression"
unaryexpr                -> $callexpr:_                                                                                      ; "unary expression"

callexpr                 -> $primaryexpr:callee OPARN:oparn $args:args CPARN:cparn                                           ; "function call expression"
callexpr                 -> $primaryexpr:callee OPARN:oparn CPARN:cparn                                                      ; "function call expression"
callexpr                 -> $primaryexpr:_                                                                                   ; "function call expression"

primaryexpr              -> TRUELIT:value                                                                                    ; "primary expression"
primaryexpr              -> FALSELIT:value                                                                                   ; "primary expression"
primaryexpr              -> FLOATLIT:value                                                                                   ; "primary expression"
primaryexpr              -> NULLPTRLIT:value                                                                                 ; "primary expression"
primaryexpr              -> DECINTLIT:value                                                                                  ; "primary expression"
primaryexpr              -> OCTINTLIT:value                                                                                  ; "primary expression"
primaryexpr              -> BININTLIT:value                                                                                  ; "primary expression"
primaryexpr              -> HEXINTLIT:value                                                                                  ; "primary expression"
primaryexpr              -> CHARLIT:value                                                                                    ; "primary expression"
primaryexpr              -> STRINGLIT:value                                                                                  ; "primary expression"
primaryexpr              -> IDENTIFIER:value                                                                                    ; "primary expression"
primaryexpr              -> OPARN:oparn $expression:expr CPARN:cparn                                                         ; "primary expression"

