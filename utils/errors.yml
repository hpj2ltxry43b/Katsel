regions:
  - [  0, 100, 'lexing errors']
  - [100, 200, 'parsing errors']

underlines:
  under0: &under0 '^'
  under1: &under1 '='
  under2: &under2 '~'
  under3: &under3 '-'

errors:
  -
    code: 0
    name: unexpected-char
    desc: The lexer found an unexpected character that could not begin a token.
    inputs: 'Token const &tok'
    location: tok
    highlights:
      - ['tok', *under0, [
          ['error', '"unexpected character"']
        ]]
  -
    code: 1
    name: unterm-charlit
    desc: The lexer found an unterminated character literal. A common cause of this is character literals that are more than one character long.
    inputs: 'Token const &tok'
    location: tok
    highlights:
      - ['tok', *under0, [
          ['error', '"unterminated character literal"']
        ]]
  -
    code: 2
    name: unterm-strlit
    desc: The lexer found a newline in a string literal, thereby making it unterminated. Newlines that need to appear inside the string literal must be escaped by putting `\n`.
    inputs: 'Token const &tok'
    location: tok
    highlights:
      - ['tok', *under0, [
          ['error', '"unterminated string literal"']
        ]]
  -
    code: 3
    name: invalid-intlit-base
    desc: The lexer found an integer literal that has an invalid base.
    inputs: 'Token const &tok'
    location: tok
    highlights:
      - ['tok', *under0, [
          ['error', '"invalid integer literal base"']
        ]]
  -
    code: 4
    name: nondecimal-floatlit
    desc: The lexer found a non-decimal floating point literal.
    inputs: 'Token const &tok'
    location: tok
    highlights:
      - ['tok', *under0, [
          ['error', '"invalid integer literal base"']
        ]]
  -
    code: 100
    name: unrecoverable-invalid-syntax-while
    desc: The parser found an unrecoverable syntax error, and has information about what construct was being parsed when the error happened.
    inputs: 'std::string const &justparsed, std::string const &expected, std::string const &whileparsing, Token const &last, Token const &lookahead'
    location: last
    highlights:
      - ['last', *under0, [
          ['error', 'concatMsg("expected ", expected, " after ", justparsed, " of ", whileparsing, ", but got ", stringifyTokenType(lookahead.type), " instead")']
        ]]
      - ['lookahead', *under1, [
          ['note', '"unexpected token here"']
        ]]
  - code: 101
    name: unrecoverable-invalid-syntax
    desc: The parser found an unrecoverable syntax error, and has conflicting information about what construct was being parsed when the error happened.
    inputs: 'std::string const &justparsed, std::string const &expected, Token const &last, Token const &lookahead'
    location: last
    highlights:
      - ['last', *under0, [
          ['error', 'concatMsg("expected ", expected, " after ", justparsed, ", but got ", stringifyTokenType(lookahead.type), " instead")']
        ]]
      - ['lookahead', *under1, [
          ['note', '"unexpected token here"']
        ]]
  -
    code: 102
    name: simple-invalid-syntax-while
    desc: The parser found a syntax error, has information about what construct was being parsed when the error happened, and recovered by inserting, substituting, or removing a single token.
    inputs: 'std::string const &justparsed, std::string const &expected, std::string const &whileparsing, Token const &last, Token const &lookahead, std::string const &bestfix'
    location: last
    highlights:
      - ['last', *under0, [
          ['error', 'concatMsg("expected ", expected, " after ", justparsed, " of ", whileparsing, ", but got ", stringifyTokenType(lookahead.type), " instead")']
        ]]
      - ['lookahead', *under1, [
          ['note', '"unexpected token here"'],
          ['hint', 'bestfix']
        ]]
  - code: 103
    name: simple-invalid-syntax
    desc: The parser found a syntax error, has conflicting information about what construct was being parsed when the error happened, and recovered by inserting, substituting, or removing a single token.
    inputs: 'std::string const &justparsed, std::string const &expected, Token const &last, Token const &lookahead, std::string const &bestfix'
    location: last
    highlights:
      - ['last', *under0, [
          ['error', 'concatMsg("expected ", expected, " after ", justparsed, ", but got ", stringifyTokenType(lookahead.type), " instead")']
        ]]
      - ['lookahead', *under1, [
          ['note', '"unexpected token here"'],
          ['hint', 'bestfix']
        ]]
  -
    code: 104
    name: panicking-invalid-syntax-while
    desc: The parser found a syntax error, has information about what construct was being parsed when the error happened, and recovered via panic mode error recovery.
    inputs: 'std::string const &justparsed, std::string const &expected, std::string const &whileparsing, Token const &last, Token const &lookahead'
    location: last
    highlights:
      - ['last', *under0, [
          ['error', 'concatMsg("expected ", expected, " after ", justparsed, " of ", whileparsing, ", but got ", stringifyTokenType(lookahead.type), " instead")']
        ]]
      - ['lookahead', *under1, [
          ['note', '"unexpected token here"']
        ]]
  - code: 105
    name: panicking-invalid-syntax
    desc: The parser found a syntax error, has conflicting information about what construct was being parsed when the error happened, and recovered via panic mode error recovery.
    inputs: 'std::string const &justparsed, std::string const &expected, Token const &last, Token const &lookahead'
    location: last
    highlights:
      - ['last', *under0, [
          ['error', 'concatMsg("expected ", expected, " after ", justparsed, ", but got ", stringifyTokenType(lookahead.type), " instead")']
        ]]
      - ['lookahead', *under1, [
          ['note', '"unexpected token here"']
        ]]
